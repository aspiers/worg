#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Org API
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tjolitz [at] gmail [dot] com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport

* Org-Exp API functions (org-exp.el)
** org-expiry-add-keyword =&optional keyword=

Add =keyword= to the entry at point if it is expired.


** org-expiry-archive-subtree  

Archive the entry at point if it is expired.


** org-expiry-deinsinuate =&optional arg=

Remove hooks and deactivate advices for org-expiry.
If =arg=, also remove org-expiry hook in Org's /before-save-hook/
and restart /org-mode/ if necessary.


** org-expiry-expired-p  

Check if the entry at point is expired.
Return nil if the entry is not expired.  Otherwise return the
amount of time between today and the expiry date.

If there is no creation date, use /org-expiry-created-date/.
If there is no expiry date, use /org-expiry-expiry-date/.


** org-expiry-insert-created =&optional arg=

Insert or update a property with the creation date.
If =arg=, always update it.  With one /C-u/ prefix, silently update
to today's date.  With two /C-u/ prefixes, prompt the user for to
update the date.


** org-expiry-insert-expiry =&optional today=

Insert a property with the expiry date.
With one /C-u/ prefix, don't prompt interactively for the date
and insert today's date.


** org-expiry-insinuate =&optional arg=

Add hooks and activate advices for org-expiry.
If =arg=, also add a hook to /before-save-hook/ in /org-mode/ and
restart /org-mode/ if necessary.


** org-expiry-process-entries =beg end=

Process all expired entries between =beg= and =end=.
The expiry process will run the function defined by
/org-expiry-handler-functions/.


** org-expiry-process-entry =&optional force=

Call /org-expiry-handler-function/ on entry.
If =force= is non-nil, don't require confirmation from the user.
Otherwise rely on /org-expiry-confirm-flag/ to decide.


** org-export =&optional arg=

Export dispatcher for Org-mode.
When /org-export-run-in-background/ is non-nil, try to run the command
in the background.  This will be done only for commands that write
to a file.  For details see the docstring of /org-export-run-in-background/.

The prefix argument =arg= will be passed to the exporter.  However, if
=arg= is a double universal prefix C-u C-u, that means to inverse the
value of /org-export-run-in-background/.

If /org-export-initial-scope/ is set to 'subtree, try to export
the current subtree, otherwise try to export the whole buffer.
Pressing /1/ will switch between these two options.


** org-export-add-options-to-plist =p options=

=p=arse an =options= line and set values in the property list =p=.


** org-export-add-subtree-options =p pos=

Add options in subtree at position =pos= to property list =p=.


** org-export-apply-macros-in-string =s=

Apply the macros in string =s=.


** org-export-as =backend &optional subtreep visible-only body-only ext-plist noexpand=

Transcode current Org buffer into =backend= code.

If narrowing is active in the current buffer, only transcode its
narrowed part.

If a region is active, transcode that region.

When optional argument =subtreep= is non-nil, transcode the
sub-tree at point, extracting information from the headline
properties first.

When optional argument =visible-only= is non-nil, don't export
contents of hidden elements.

When optional argument =body-only= is non-nil, only return body
code, without preamble nor postamble.

Optional argument =ext-plist=, when provided, is a property list
with external parameters overriding Org default settings, but
still inferior to file-local settings.

Optional argument =noexpand=, when non-nil, prevents included files
to be expanded and Babel code to be executed.

Return code as a string.


** org-export-as-ascii =arg &optional hidden ext-plist to-buffer body-only pub-dir=

Export the outline as a pretty ASCII file.
If there is an active region, export only the region.
The prefix =arg= specifies how many levels of the outline should become
underlined headlines, default is 3.    Lower levels will become bulleted
lists.  When =hidden= is non-nil, don't display the ASCII buffer.
=ext-plist= is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When =to-buffer= is non-nil, create a buffer with that
name and export to that buffer.  If =to-buffer= is the symbol
/string/, don't leave any buffer behind but just return the
resulting ASCII as a string.  When =body-only= is set, don't produce
the file header and footer.  When =pub-dir= is set, use this as the
publishing directory.


** org-export-as-ascii-to-buffer =arg=

Call `org-export-as-ascii` with output to a temporary buffer.
No file is created.  The prefix =arg= is passed through to /org-export-as-ascii/.


** org-export-as-docbook =&optional hidden ext-plist to-buffer body-only pub-dir=

Export the current buffer as a DocBook file.
If there is an active region, export only the region.  When
=hidden= is obsolete and does nothing.  =ext-plist= is a
property list with external parameters overriding org-mode's
default settings, but still inferior to file-local settings.
When =to-buffer= is non-nil, create a buffer with that name and
export to that buffer.  If =to-buffer= is the symbol /string/,
don't leave any buffer behind but just return the resulting HTML
as a string.  When =body-only= is set, don't produce the file
header and footer, simply return the content of the document (all
top-level sections).  When =pub-dir= is set, use this as the
publishing directory.


** org-export-as-docbook-batch  

Call /org-export-as-docbook/ in batch style.
This function can be used in batch processing.

For example:

$ emacs --batch
#+begin_src emacs-lisp
        --load=$HOME/lib/emacs/org.el
        --visit=MyOrgFile.org --funcall org-export-as-docbook-batch
#+end_src



** org-export-as-docbook-pdf =&optional hidden ext-plist to-buffer body-only pub-dir=

Export as DocBook XML file, and generate PDF file.


** org-export-as-docbook-pdf-and-open  

Export as DocBook XML file, generate PDF file, and open it.


** org-export-as-docbook-to-buffer  

Call /org-export-as-docbook/ with output to a temporary buffer.
No file is created.


** org-export-as-freemind =&optional hidden ext-plist to-buffer body-only pub-dir=

Export the current buffer as a Freemind file.
If there is an active region, export only the region.  =hidden= is
obsolete and does nothing.  =ext-plist= is a property list with
external parameters overriding org-mode's default settings, but
still inferior to file-local settings.  When =to-buffer= is
non-nil, create a buffer with that name and export to that
buffer.  If =to-buffer= is the symbol /string/, don't leave any
buffer behind but just return the resulting HTML as a string.
When =body-only= is set, don't produce the file header and footer,
simply return the content of the document (all top level
sections).  When =pub-dir= is set, use this as the publishing
directory.

See /org-freemind-from-org-mode/ for more information.


** org-export-as-html =arg &optional hidden ext-plist to-buffer body-only pub-dir=

Export the outline as a pretty HTML file.
If there is an active region, export only the region.  The prefix
=arg= specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted
lists.  =hidden= is obsolete and does nothing.
=ext-plist= is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When =to-buffer= is non-nil, create a buffer with that
name and export to that buffer.  If =to-buffer= is the symbol
/string/, don't leave any buffer behind but just return the
resulting HTML as a string.  When =body-only= is set, don't produce
the file header and footer, simply return the content of
<body>...</body>, without even the body tags themselves.  When
=pub-dir= is set, use this as the publishing directory.


** org-export-as-html-and-open =arg=

Export the outline as HTML and immediately open it with a browser.
If there is an active region, export only the region.
The prefix =arg= specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted lists.


** org-export-as-html-batch  

Call the function /org-export-as-html/.
This function can be used in batch processing as:
emacs   --batch
#+begin_src emacs-lisp
        --load=$HOME/lib/emacs/org.el
        --eval "(setq org-export-headline-levels 2)"
        --visit=MyFile --funcall org-export-as-html-batch
#+end_src



** org-export-as-html-to-buffer =arg=

Call `org-export-as-html` with output to a temporary buffer.
No file is created.  The prefix =arg= is passed through to /org-export-as-html/.


** org-export-as-latex =arg &optional hidden ext-plist to-buffer body-only pub-dir=

Export current buffer to a LaTeX file.
If there is an active region, export only the region.  The prefix
=arg= specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will be exported
depending on /org-export-latex-low-levels/.  The default is to
convert them as description lists.
=hidden= is obsolete and does nothing.
=ext-plist= is a property list with
external parameters overriding org-mode's default settings, but
still inferior to file-local settings.  When =to-buffer= is
non-nil, create a buffer with that name and export to that
buffer.  If =to-buffer= is the symbol /string/, don't leave any
buffer behind but just return the resulting LaTeX as a string.
When =body-only= is set, don't produce the file header and footer,
simply return the content of \begin{document}...\end{document},
without even the \begin{document} and \end{document} commands.
when =pub-dir= is set, use this as the publishing directory.


** org-export-as-latex-batch  

Call /org-export-as-latex/, may be used in batch processing.
For example:

emacs   --batch
#+begin_src emacs-lisp
        --load=$HOME/lib/emacs/org.el
        --eval "(setq org-export-headline-levels 2)"
        --visit=MyFile --funcall org-export-as-latex-batch
#+end_src



** org-export-as-latex-to-buffer =arg=

Call `org-export-as-latex` with output to a temporary buffer.
No file is created.  The prefix =arg= is passed through to /org-export-as-latex/.


** org-export-as-latin1 =&rest args=

Like /org-export-as-ascii/, use latin1 encoding for special symbols.


** org-export-as-latin1-to-buffer =&rest args=

Like /org-export-as-ascii-to-buffer/, use latin1 encoding for symbols.


** org-export-as-odf =latex-frag &optional odf-file=

Export =latex-frag= as OpenDocument formula file =odf-file=.
Use /org-create-math-formula/ to convert =latex-frag= first to
MathML.  When invoked as an interactive command, use
/org-latex-regexps/ to infer =latex-frag= from currently active
region.  If no LaTeX fragments are found, prompt for it.  Push
MathML source to kill ring, if /org-export-copy-to-kill-ring/ is
non-nil.


** org-export-as-odf-and-open  

Export LaTeX fragment as OpenDocument formula and immediately open it.
Use /org-export-as-odf/ to read LaTeX fragment and OpenDocument
formula file.


** org-export-as-odt =arg &optional hidden ext-plist to-buffer body-only pub-dir=

Export the outline as a OpenDocumentText file.
If there is an active region, export only the region.  The prefix
=arg= specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted
lists.  =hidden= is obsolete and does nothing.
=ext-plist= is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When =to-buffer= is non-nil, create a buffer with that
name and export to that buffer.  If =to-buffer= is the symbol
/string/, don't leave any buffer behind but just return the
resulting XML as a string.  When =body-only= is set, don't produce
the file header and footer, simply return the content of
<body>...</body>, without even the body tags themselves.  When
=pub-dir= is set, use this as the publishing directory.


** org-export-as-odt-and-open =arg=

Export the outline as ODT and immediately open it with a browser.
If there is an active region, export only the region.
The prefix =arg= specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted lists.


** org-export-as-odt-batch  

Call the function /org-lparse-batch/.
This function can be used in batch processing as:
emacs   --batch
#+begin_src emacs-lisp
        --load=$HOME/lib/emacs/org.el
        --eval "(setq org-export-headline-levels 2)"
        --visit=MyFile --funcall org-export-as-odt-batch
#+end_src



** org-export-as-org =arg &optional hidden ext-plist to-buffer body-only pub-dir=

Make a copy with not-exporting stuff removed.
The purpose of this function is to provide a way to export the source
Org file of a webpage in Org format, but with sensitive and/or irrelevant
stuff removed.  This command will remove the following:

- archived trees (if the variable /org-export-with-archived-trees/ is nil)
- comment blocks and trees starting with the COMMENT keyword
- only trees that are consistent with /org-export-select-tags/
#+begin_src emacs-lisp
  and /org-export-exclude-tags/.
#+end_src

The only arguments that will be used are =ext-plist= and =pub-dir=,
all the others will be ignored (but are present so that the general
mechanism to call publishing functions will work).

=ext-plist= is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When =pub-dir= is set, use this as the publishing
directory.


** org-export-as-pdf =arg &optional hidden ext-plist to-buffer body-only pub-dir=

Export as LaTeX, then process through to PDF.


** org-export-as-pdf-and-open =arg=

Export as LaTeX, then process through to PDF, and open.


** org-export-as-s5 =arg &optional hidden ext-plist to-buffer body-only pub-dir=

Wrap /org-export-as-html/ in setting for S5 export.


** org-export-as-taskjuggler  

Export parts of the current buffer as a TaskJuggler file.
The exporter looks for a tree with tag, property or todo that
matches /org-export-taskjuggler-project-tag/ and takes this as
the tasks for this project. The first node of this tree defines
the project properties such as project name and project period.
If there is a tree with tag, property or todo that matches
/org-export-taskjuggler-resource-tag/ this three is taken as
resources for the project. If no resources are specified, a
default resource is created and allocated to the project. Also
the taskjuggler project will be created with default reports as
defined in /org-export-taskjuggler-default-reports/.


** org-export-as-taskjuggler-and-open  

Export the current buffer as a TaskJuggler file and open it
with the TaskJuggler GUI.


** org-export-as-utf8 =&rest args=

Like /org-export-as-ascii/, use encoding for special symbols.


** org-export-as-utf8-to-buffer =&rest args=

Like /org-export-as-ascii-to-buffer/, use utf8 encoding for symbols.


** org-export-as-xoxo =&optional buffer=

Export the org buffer as XOXO.
The XOXO buffer is named *xoxo-<source buffer name>*


** org-export-ascii-preprocess =parameters=

Do extra work for ASCII export.


** org-export-ascii-push-links =link-buffer=

Push out links in the buffer.


** org-export-ascii-wrap =line where=

Wrap =line= at or before =where=.


** org-export-attach-captions-and-attributes =target-alist=

Move #+CAPTION, #+ATTR_BACKEND, and #+LABEL text into text properties.
If the next thing following is a table, add the text properties to the first
table line.  If it is a link, add it to the line containing the link.


** org-export-bibtex-preprocess  

Export all BibTeX.


** org-export-blocks-add-block =block-spec=

Add a new block type to /org-export-blocks/.
=block-spec= should be a three element list the first element of
which should indicate the name of the block, the second element
should be the formatting function called by
/org-export-blocks-preprocess/ and the third element a flag
indicating whether these types of blocks should be fontified in
org-mode buffers (see /org-protecting-blocks/).  For example the
=block-spec= for ditaa blocks is as follows.

#+begin_src emacs-lisp
  (ditaa org-export-blocks-format-ditaa nil)
#+end_src



** org-export-blocks-format-comment =body &rest headers=

Format comment =body= by OWNER and return it formatted for export.
Currently, this only does something for HTML export, for all
other backends, it converts the comment into an EXAMPLE segment.


** org-export-blocks-format-ditaa =body &rest headers=

DEPRECATED: use begin_src ditaa code blocks

Pass block =body= to the ditaa utility creating an image.
Specify the path at which the image should be saved as the first
element of headers, any additional elements of headers will be
passed to the ditaa utility as command line arguments.


** org-export-blocks-format-dot =body &rest headers=

DEPRECATED: use "#+begin_src dot" code blocks

Pass block =body= to the dot graphing utility creating an image.
Specify the path at which the image should be saved as the first
element of headers, any additional elements of headers will be
passed to the dot utility as command line arguments.  Don't
forget to specify the output type for the dot command, so if you
are exporting to a file with a name like 'image.png' you should
include a '-Tpng' argument, and your block should look like the
following.

#+begin_dot models.png -Tpng
digraph data_relationships {
#+begin_src emacs-lisp
  "data_requirement" [shape=Mrecord, label="{DataRequirement|descriptionlformatl}"]
  "data_product" [shape=Mrecord, label="{DataProduct|namelversionlpoclformatl}"]
  "data_requirement" -> "data_product"
#+end_src
}
#+end_dot


** org-export-blocks-html-quote =body &optional open close=

Protect =body= from org html export.
The optional =open= and =close= tags will be inserted around =body=.


** org-export-blocks-latex-quote =body &optional open close=

Protect =body= from org latex export.
The optional =open= and =close= tags will be inserted around =body=.


** org-export-blocks-preprocess  

Export all blocks according to the /org-export-blocks/ block export alist.
Does not export block types specified in specified in BLOCKS
which defaults to the value of /org-export-blocks-witheld/.


** org-export-blocks-set =var value=

Set the value of /org-export-blocks/ and install fontification.


** org-export-cleanup-toc-line =s=

Remove tags and timestamps from lines going into the toc.


** org-export-collect-elements =type info &optional predicate=

Collect referenceable elements of a determined type.

=type= can be a symbol or a list of symbols specifying element
types to search.  Only elements with a caption or a name are
collected.

=info= is a plist used as a communication channel.

When non-nil, optional argument =predicate= is a function accepting
one argument, an element of type =type=.  It returns a non-nil
value when that element should be collected.

Return a list of all elements found, in order of appearance.


** org-export-collect-figures =info predicate=

Build a list of figures.

=info= is a plist used as a communication channel.  =predicate= is
a function which accepts one argument: a paragraph element and
whose return value is non-nil when that element should be
collected.

A figure is a paragraph type element, with a caption or a name,
verifying =predicate=.  The latter has to be provided since
a "figure" is a vague concept that may depend on back-end.

Return a list of elements recognized as figures.


** org-export-collect-footnote-definitions =data info=

Return an alist between footnote numbers, labels and definitions.

=data= is the parse tree from which definitions are collected.
=info= is the plist used as a communication channel.

Definitions are sorted by order of references.  They either
appear as Org data or as a secondary string for inlined
footnotes.  Unreferenced definitions are ignored.


** org-export-collect-headline-numbering =data options=

Return numbering of all exportable headlines in a parse tree.

=data= is the parse tree.  =options= is the plist holding export
options.

Return an alist whose key is an headline and value is its
associated numbering (in the shape of a list of numbers).


** org-export-collect-headlines =info &optional n=

Collect headlines in order to build a table of contents.

=info= is a plist used as a communication channel.

When non-nil, optional argument =n= must be an integer.  It
specifies the depth of the table of contents.

Return a list of all exportable headlines as parsed elements.


** org-export-collect-listings =info=

Build a list of src blocks.

=info= is a plist used as a communication channel.

Return a list of src-block elements with a caption or a name
affiliated keyword.


** org-export-collect-tables =info=

Build a list of tables.

=info= is a plist used as a communication channel.

Return a list of table elements with a caption or a name
affiliated keyword.


** org-export-collect-tree-properties =data info=

Extract tree properties from parse tree.

=data= is the parse tree from which information is retrieved.  =info=
is a list holding export options.

Following tree properties are set or updated:
/:footnote-definition-alist/ List of footnotes definitions in
#+begin_src emacs-lisp
                   original buffer and current parse tree.
#+end_src

/:headline-offset/ Offset between true level of headlines and
		   local level.  An offset of -1 means an headline
		   of level 2 should be considered as a level
		   1 headline in the context.

/:headline-numbering/ Alist of all headlines as key an the
		      associated numbering as value.

/:ignore-list/     List of elements that should be ignored during
#+begin_src emacs-lisp
                   export.
#+end_src

/:target-list/     List of all targets in the parse tree.


** org-export-concatenate-multiline-emphasis  

Find multi-line emphasis and put it all into a single line.
This is to make sure that the line-processing export backends
can work correctly.


** org-export-concatenate-multiline-links  

Find multi-line links and put it all into a single line.
This is to make sure that the line-processing export backends
can work correctly.


** org-export-confirm-letbind  

Can we use #+BIND values during export?
By default this will ask for confirmation by the user, to divert possible
security risks.


** org-export-convert-protected-spaces  

Convert strings like \____ to protected spaces in all backends.


** org-export-data =data info=

Convert =data= into current back-end format.

=data= is a parse tree, an element or an object or a secondary
string.  =info= is a plist holding export options.

Return transcoded string.


** org-export-define-heading-targets =target-alist=

Find all headings and define the targets for them.
The new targets are added to =target-alist=, which is also returned.
Also find all ID and CUSTOM_ID properties and store them.


** org-export-dispatch  

Export dispatcher for Org mode.

It provides an access to common export related tasks in a buffer.
Its interface comes in two flavours: standard and expert.  While
both share the same set of bindings, only the former displays the
valid keys associations.  Set /org-export-dispatch-use-expert-ui/
to switch to one or the other.

Return an error if key pressed has no associated command.


** org-export-dispatch-ui =options expertp=

Handle interface for /org-export-dispatch/.

=options= is a list containing current interactive options set for
export.  It can contain any of the following symbols:
/body/    toggles a body-only export
/subtree/ restricts export to current subtree
/visible/ restricts export to visible part of buffer.
/force/   force publishing files.

=expertp=, when non-nil, triggers expert UI.  In that case, no help
buffer is provided, but indications about currently active
options are given in the prompt.  Moreover, [?] allows to switch
back to standard interface.

Return value is a list with key pressed as CAR and a list of
final interactive export options as CDR.


** org-export-docbook-close-li =&optional type=

Close list if necessary.


** org-export-docbook-close-para-maybe  

Close DocBook paragraph if there is one open.


** org-export-docbook-convert-emphasize =string=

Apply emphasis for DocBook exporting.


** org-export-docbook-convert-special-strings =string=

Convert special characters in =string= to DocBook.


** org-export-docbook-convert-sub-super =string=

Convert sub- and superscripts in =string= for DocBook.


** org-export-docbook-finalize-table =table=

Clean up =table= and turn it into DocBook format.
This function adds a label to the table if it is available, and
also changes =table= to informaltable if caption does not exist.
=table= is a string containing the HTML code generated by
/org-format-table-html/ for a table in Org-mode buffer.


** org-export-docbook-format-desc =desc=

Make sure =desc= is valid as a description in a link.


** org-export-docbook-format-image =src=

Create image element in DocBook.


** org-export-docbook-get-footnotes =lines=

Given a list of =lines=, return a list of alist footnotes.


** org-export-docbook-handle-time-stamps =line=

Format time stamps in string =line=.


** org-export-docbook-level-start =level title=

Insert a new level in DocBook export.
When =title= is nil, just close all open levels.


** org-export-docbook-list-line =line pos struct prevs=

Insert list syntax in export buffer. Return =line=, maybe modified.

=pos= is the item position or line position the line had before
modifications to buffer. =struct= is the list structure. =prevs= is
the alist of previous items.


** org-export-docbook-open-para  

Insert <para>, but first close previous paragraph if any.


** org-export-docbook-preprocess =parameters=

Extra preprocessing work for DocBook export.


** org-export-docbook-protect-tags =string=

Change //<...>// in string =string= into //@<...>//.
This is normally needed when =string= contains DocBook elements
that need to be preserved in later phase of DocBook exporting.


** org-export-e-htmlize-generate-css  

Create the CSS for all font definitions in the current Emacs session.
Use this to create face definitions in your CSS style file that can then
be used by code snippets transformed by htmlize.
This command just produces a buffer that contains class definitions for all
faces used in the current Emacs session.  You can copy and paste the ones you
need into your CSS file.

If you then set /org-export-e-htmlize-output-type/ to /css/, calls to
the function /org-export-e-htmlize-region-for-paste/ will produce code
that uses these same face definitions.


** org-export-e-htmlize-region-for-paste =beg end=

Convert the region to HTML, using htmlize.el.
This is much like /htmlize-region-for-paste/, only that it uses
the settings define in the org-... variables.


** org-export-expand =blob contents=

Expand a parsed element or object to its original state.
=blob= is either an element or an object.  =contents= is its
contents, as a string or nil.


** org-export-expand-include-keyword =&optional included dir=

Expand every include keyword in buffer.
Optional argument =included= is a list of included file names along
with their line restriction, when appropriate.  It is used to
avoid infinite recursion.  Optional argument =dir= is the current
working directory.  It is used to properly resolve relative
paths.


** org-export-expand-macro =macro info=

Expand =macro= and return it as a string.
=info= is a plist holding export options.


** org-export-filter-apply-functions =filters value info=

Call every function in =filters=.
Functions are called with arguments =value=, current export
back-end and =info=.  Call is done in a LIFO fashion, to be sure
that developer specified filters, if any, are called first.


** org-export-first-sibling-p =headline info=

Non-nil when =headline= is the first sibling in its sub-tree.
=info= is the plist used as a communication channel.


** org-export-footnote-first-reference-p =footnote-reference info=

Non-nil when a footnote reference is the first one for its label.

=footnote-reference= is the footnote reference being considered.
=info= is the plist used as a communication channel.


** org-export-format-code =code fun &optional num-lines ref-alist=

Format =code= by applying =fun= line-wise and return it.

=code= is a string representing the code to format.  =fun= is
a function.  It must accept three arguments: a line of
code (string), the current line number (integer) or nil and the
reference associated to the current line (string) or nil.

Optional argument =num-lines= can be an integer representing the
number of code lines accumulated until the current code.  Line
numbers passed to =fun= will take it into account.  If it is nil,
=fun='s second argument will always be nil.  This number can be
obtained with /org-export-get-loc/ function.

Optional argument =ref-alist= can be an alist between relative line
number (i.e. ignoring =num-lines=) and the name of the code
reference on it.  If it is nil, =fun='s third argument will always
be nil.  It can be obtained through the use of
/org-export-unravel-code/ function.


** org-export-format-code-default =element info=

Return source code from =element=, formatted in a standard way.

=element= is either a /src-block/ or /example-block/ element.  =info=
is a plist used as a communication channel.

This function takes care of line numbering and code references
inclusion.  Line numbers, when applicable, appear at the
beginning of the line, separated from the code by two white
spaces.  Code references, on the other hand, appear flushed to
the right, separated by six white spaces from the widest line of
code.


** org-export-format-drawer =name content=

Format the content of a drawer as a colon example.


** org-export-format-source-code-or-example =lang code &optional opts indent caption=

Format =code= from language =lang= and return it formatted for export.
The =code= is marked up in /org-export-current-backend/ format.

Check if a function by name
"org-<backend>-format-source-code-or-example" is bound. If yes,
use it as the custom formatter. Otherwise, use the default
formatter. Default formatters are provided for docbook, html,
latex and ascii backends. For example, use
/org-html-format-source-code-or-example/ to provide a custom
formatter for export to "html".

If =lang= is nil, do not add any fontification.
=opts= contains formatting options, like /-n/ for triggering numbering lines,
and /+n/ for continuing previous numbering.
Code formatting according to language currently only works for HTML.
Numbering lines works for all three major backends (html, latex, and ascii).
=indent= was the original indentation of the block.


** org-export-generic =arg=

Export the outline as generic output.
If there is an active region, export only the region.
The prefix =arg= specifies how many levels of the outline should become
underlined headlines.  The default is 3.


** org-export-generic-check-section =type &optional prefix suffix=

checks to see if type is already in use, or we're switching parts
If we're switching, then insert a potentially previously remembered
suffix, and insert the current prefix immediately and then save the
suffix a later change time.


** org-export-generic-emph-format =format-varname string protect=

Return a string that results from applying the markup indicated by
=format-varname= to =string=.


** org-export-generic-fontify =string=

Convert fontification according to generic rules.


** org-export-generic-format =export-plist prop &optional len n reverse=

converts a property specification to a string given types of properties

The =export-plist= should be defined as the lookup plist.
The =prop= should be the property name to search for in it.
=len= is set to the length of multi-characters strings to generate (or 0)
=n= is the tree depth
=reverse= means to reverse the list if the plist match is a list
#+begin_src emacs-lisp
 
#+end_src



** org-export-generic-header =header export-plist prefixprop formatprop postfixprop &optional n reverse=

convert a header to an output string given formatting property names


** org-export-generic-preprocess =parameters=

Do extra work for ASCII export


** org-export-generic-push-links =link-buffer=

Push out links in the buffer.


** org-export-generic-wrap =line where=

Wrap =line= at or before =where=.


** org-export-get-buffer-attributes  

Return properties related to buffer attributes, as a plist.


** org-export-get-categories  

Get categories according to /org-icalendar-categories/.


** org-export-get-environment =&optional backend subtreep ext-plist=

Collect export options from the current buffer.

Optional argument =backend= is a symbol specifying which back-end
specific options to read, if any.

When optional argument =subtreep= is non-nil, assume the export is
done against the current sub-tree.

Third optional argument =ext-plist= is a property list with
external parameters overriding Org default settings, but still
inferior to file-local settings.


** org-export-get-footnote-definition =footnote-reference info=

Return definition of =footnote-reference= as parsed data.
=info= is the plist used as a communication channel.


** org-export-get-footnote-number =footnote info=

Return number associated to a footnote.

=footnote= is either a footnote reference or a footnote definition.
=info= is the plist used as a communication channel.


** org-export-get-genealogy =blob info=

Return genealogy relative to a given element or object.
=blob= is the element or object being considered.  =info= is a plist
used as a communication channel.


** org-export-get-global-options =&optional backend=

Return global export options as a plist.

Optional argument =backend=, if non-nil, is a symbol specifying
which back-end specific export options should also be read in the
process.


** org-export-get-headline-number =headline info=

Return =headline= numbering as a list of numbers.
=info= is a plist holding contextual information.


** org-export-get-inbuffer-options =&optional backend files=

Return current buffer export options, as a plist.

Optional argument =backend=, when non-nil, is a symbol specifying
which back-end specific options should also be read in the
process.

Optional argument =files= is a list of setup files names read so
far, used to avoid circular dependencies.

Assume buffer is in Org mode.  Narrowing, if any, is ignored.


** org-export-get-loc =element info=

Return accumulated lines of code up to =element=.

=info= is the plist used as a communication channel.

=element= is excluded from count.


** org-export-get-min-level =data options=

Return minimum exportable headline's level in =data=.
=data= is parsed tree as returned by /org-element-parse-buffer/.
=options= is a plist holding export options.


** org-export-get-next-element =blob info=

Return next element or object.

=blob= is an element or object.  =info= is a plist used as
a communication channel.

Return next element or object, a string, or nil.


** org-export-get-ordinal =element info &optional types predicate=

Return ordinal number of an element or object.

=element= is the element or object considered.  =info= is the plist
used as a communication channel.

Optional argument =types=, when non-nil, is a list of element or
object types, as symbols, that should also be counted in.
Otherwise, only provided element's type is considered.

Optional argument =predicate= is a function returning a non-nil
value if the current element or object should be counted in.  It
accepts two arguments: the element or object being considered and
the plist used as a communication channel.  This allows to count
only a certain type of objects (i.e. inline images).

Return value is a list of numbers if =element= is an headline or an
item.  It is nil for keywords.  It represents the footnote number
for footnote definitions and footnote references.  If =element= is
a target, return the same value as if =element= was the closest
table, item or headline containing the target.  In any other
case, return the sequence number of =element= among elements or
objects of the same type.


** org-export-get-parent =blob info=

Return =blob= parent or nil.
=blob= is the element or object considered.  =info= is a plist used
as a communication channel.


** org-export-get-parent-headline =blob info=

Return =blob= parent headline or nil.
=blob= is the element or object being considered.  =info= is a plist
used as a communication channel.


** org-export-get-parent-paragraph =object info=

Return =object= parent paragraph or nil.
=object= is the object to consider.  =info= is a plist used as
a communication channel.


** org-export-get-parent-table =object info=

Return =object= parent table or nil.
=object= is either a /table-cell/ or /table-element/ type object.
=info= is a plist used as a communication channel.


** org-export-get-previous-element =blob info=

Return previous element or object.

=blob= is an element or object.  =info= is a plist used as
a communication channel.

Return previous element or object, a string, or nil.


** org-export-get-relative-level =headline info=

Return =headline= relative level within current parsed tree.
=info= is a plist holding contextual information.


** org-export-get-remind-categories  

Get categories according to /org-remind-categories/.


** org-export-get-subtree-options  

Get export options in subtree at point.

Assume point is at subtree's beginning.

Return options as a plist.


** org-export-get-table-cell-at =address table info=

Return regular table-cell object at =address= in =table=.

Address is a CONS cell (ROW . COLUMN), where ROW and COLUMN are
zero-based index.  =table= is a table type element.  =info= is
a plist used as a communication channel.

If no table-cell, among exportable cells, is found at =address=,
return nil.


** org-export-get-title-from-subtree  

Return subtree title and exclude it from export.


** org-export-grab-title-from-buffer  

Get a title for the current document, from looking at the buffer.


** org-export-handle-comments =org-commentsp=

Remove comments, or convert to backend-specific format.
=org-commentsp= can be a format string for publishing comments.
When it is nil, all comments will be removed.


** org-export-handle-export-tags =select-tags exclude-tags=

Modify the buffer, honoring =select-tags= and =exclude-tags=.
Both arguments are lists of tags.
If any of =select-tags= is found, all trees not marked by a SELECT-TAG
will be removed.
After that, all subtrees that are marked by =exclude-tags= will be
removed as well.


** org-export-handle-include-files  

Include the contents of include files, with proper formatting.


** org-export-handle-include-files-recurse  

Recursively include files aborting on circular inclusion.


** org-export-handle-invisible-targets =target-alist=

Find targets in comments and move them out of comments.
Mark them as invisible targets.


** org-export-handle-table-metalines  

Remove table specific metalines #+TBLNAME: and #+TBLFM:.


** org-export-html-convert-emphasize =string=

Apply emphasis.


** org-export-html-convert-special-strings =string=

Convert special characters in =string= to HTML.


** org-export-html-convert-sub-super =string=

Convert sub- and superscripts in =string= to HTML.


** org-export-html-format-desc =s=

Make sure the =s= is valid as a description in a link.


** org-export-html-format-href =s=

Make sure the =s= is valid as a href reference in an XHTML document.


** org-export-html-format-image =src par-open=

Create image tag with source and attributes.


** org-export-html-get-bibliography  

Find bibliography, cut it out and return it.


** org-export-html-get-tag-class-name =tag=

Turn tag into a valid class name.
Replaces invalid characters with "_" and then prepends a prefix.


** org-export-html-get-todo-kwd-class-name =kwd=

Turn todo keyword into a valid class name.
Replaces invalid characters with "_" and then prepends a prefix.


** org-export-html-mathjax-config =template options in-buffer=

Insert the user setup into the matchjax template.


** org-export-html-preprocess =parameters=

Convert LaTeX fragments to images.


** org-export-htmlize-generate-css  

Create the CSS for all font definitions in the current Emacs session.
Use this to create face definitions in your CSS style file that can then
be used by code snippets transformed by htmlize.
This command just produces a buffer that contains class definitions for all
faces used in the current Emacs session.  You can copy and paste the ones you
need into your CSS file.

If you then set /org-export-htmlize-output-type/ to /css/, calls to
the function /org-export-htmlize-region-for-paste/ will produce code
that uses these same face definitions.


** org-export-htmlize-region-for-paste =beg end=

Convert the region to HTML, using htmlize.el.
This is much like /htmlize-region-for-paste/, only that it uses
the settings define in the org-... variables.


** org-export-icalendar =combine &rest files=

Create iCalendar files for all elements of =files=.
If =combine= is non-nil, combine all calendar entries into a single large
file and store it under the name /org-combined-agenda-icalendar-file/.


** org-export-icalendar-all-agenda-files  

Export all files in the variable /org-agenda-files/ to iCalendar .ics files.
Each iCalendar file will be located in the same directory as the Org-mode
file, but with extension /.ics/.


** org-export-icalendar-combine-agenda-files  

Export all files in /org-agenda-files/ to a single combined iCalendar file.
The file is stored under the name /org-combined-agenda-icalendar-file/.


** org-export-icalendar-this-file  

Export current file as an iCalendar file.
The iCalendar file will be located in the same directory as the Org-mode
file, but with extension /.ics/.


** org-export-ignore-element =element info=

Add =element= to /:ignore-list/ in =info=.

Any element in /:ignore-list/ will be skipped when using
/org-element-map/.  =info= is modified by side effects.


** org-export-inline-image-p =link &optional rules=

Non-nil if =link= object points to an inline image.

Optional argument is a set of =rules= defining inline images.  It
is an alist where associations have the following shape:

#+begin_src emacs-lisp
  (TYPE . REGEXP)
#+end_src

Applying a rule means apply REGEXP against =link='s path when its
type is TYPE.  The function will return a non-nil value if any of
the provided rules is non-nil.  The default rule is
/org-export-default-inline-image-rule/.

This only applies to links without a description.


** org-export-install-filters =info=

Install filters properties in communication channel.

=info= is a plist containing the current communication channel.

Return the updated communication channel.


** org-export-install-letbind-maybe  

Install the values from #+BIND lines as local variables.
Variables must be installed before in-buffer options are
retrieved.


** org-export-interpret-p =blob info=

Non-nil if element or object =blob= should be interpreted as Org syntax.
Check is done according to export options =info=, stored as
a plist.


** org-export-kill-licensed-text  

Remove all text that is marked with a :org-license-to-kill property.


** org-export-last-sibling-p =headline info=

Non-nil when =headline= is the last sibling in its sub-tree.
=info= is the plist used as a communication channel.


** org-export-latex-content =content &optional exclude-list=

Convert =content= string to LaTeX.
Don't perform conversions that are in =exclude-list=.  Recognized
conversion types are: quotation-marks, emphasis, sub-superscript,
links, keywords, lists, tables, fixed-width


** org-export-latex-convert-table.el-table  

Replace table.el table at point with LaTeX code.


** org-export-latex-emph-format =format string=

Format an emphasis string and handle the \verb special case.


** org-export-latex-first-lines =opt-plist &optional beg end=

Export the first lines before first headline.
If =beg= is non-nil, it is the beginning of the region.
If =end= is non-nil, it is the end of the region.


** org-export-latex-fix-inputenc  

Set the coding system in inputenc to what the buffer is.


** org-export-latex-fixed-width =opt=

When =opt= is non-nil convert fixed-width sections to LaTeX.


** org-export-latex-fontify  

Convert fontification to LaTeX.


** org-export-latex-fontify-headline =string=

Fontify special words in =string=.


** org-export-latex-format-image =path caption label attr &optional shortn=

Format the image element, depending on user settings.


** org-export-latex-get-error =buf=

Collect the kinds of errors that remain in pdflatex processing.


** org-export-latex-global =content=

Export =content= to LaTeX.
=content= is an element of the list produced by
/org-export-latex-parse-global/.


** org-export-latex-keywords  

Convert special keywords to LaTeX.


** org-export-latex-keywords-maybe =&optional remove-list=

Maybe remove keywords depending on rules in =remove-list=.


** org-export-latex-links  

Convert links to LaTeX.


** org-export-latex-lists  

Convert plain text lists in current buffer into LaTeX lists.


** org-export-latex-make-header =title opt-plist=

Make the LaTeX header and return it as a string.
=title= is the current title from the buffer or region.
=opt-plist= is the options plist for current buffer.


** org-export-latex-parse-content  

Extract the content of a section.


** org-export-latex-parse-global =level odd=

Parse the current buffer recursively, starting at =level=.
If =odd= is non-nil, assume the buffer only contains odd sections.
Return a list reflecting the document structure.


** org-export-latex-parse-subcontent =level odd=

Extract the subcontent of a section at =level=.
If =odd= Is non-nil, assume subcontent only contains odd sections.


** org-export-latex-preprocess =parameters=

Clean stuff in the LaTeX export.


** org-export-latex-protect-char-in-string =char-list string=

Add org-protected text-property to char from =char-list= in =string=.


** org-export-latex-protect-string =s=

Add the org-protected property to string =s=.


** org-export-latex-quotation-marks  

Export quotation marks depending on language conventions.


** org-export-latex-set-initial-vars =ext-plist level=

Store org local variables required for LaTeX export.
=ext-plist= is an optional additional plist.
=level= indicates the default depth for export.


** org-export-latex-special-chars =sub-superscript=

Export special characters to LaTeX.
If =sub-superscript= is non-nil, convert \ and ^.
See the /org-export-latex.el/ code for a complete conversion table.


** org-export-latex-sub =subcontent=

Export the list =subcontent= to LaTeX.
=subcontent= is an alist containing information about the headline
and its content.


** org-export-latex-subcontent =subcontent num=

Export each cell of =subcontent= to LaTeX.
If =num= is non-nil export numbered sections, otherwise use unnumbered
sections.  If =num= is an integer, export the highest =num= levels as
numbered sections and lower levels as unnumbered sections.


** org-export-latex-tables =insert=

Convert tables to LaTeX and =insert= it.


** org-export-latex-time-stamps  

Format time stamps.


** org-export-latex-treat-backslash-char =string-before string-after=

Convert the "$" special character to LaTeX.
The conversion is made depending of =string-before= and =string-after=.


** org-export-latex-treat-sub-super-char =subsup char string-before string-after=

Convert the "_" and "^" characters to LaTeX.
=subsup= corresponds to the ^: option in the #+OPTIONS line.
Convert =char= depending on =string-before= and =string-after=.


** org-export-low-level-p =headline info=

Non-nil when =headline= is considered as low level.

=info= is a plist used as a communication channel.

A low level headlines has a relative level greater than
/:headline-levels/ property value.

Return value is the difference between =headline= relative level
and the last level being considered as high enough, or nil.


** org-export-mark-blockquote-verse-center  

Mark block quote and verse environments with special cookies.
These special cookies will later be interpreted by the backend.


** org-export-mark-list-end  

Mark all list endings with a special string.


** org-export-mark-list-properties  

Mark list with special properties.
These special properties will later be interpreted by the backend.


** org-export-mark-radio-links  

Find all matches for radio targets and turn them into internal links.


** org-export-normalize-links  

Convert all links to bracket links, and expand link abbreviations.


** org-export-number-lines =text &optional skip1 skip2 number cont replace-labels label-format preprocess=

Apply line numbers to literal examples and handle code references.
Handle user-specified options under info node `(org)Literal
examples' and return the modified source block.

=text= contains the source or example block.

=skip1= and =skip2= are the number of lines that are to be skipped at
the beginning and end of =text=.  Use these to skip over
backend-specific lines pre-pended or appended to the original
source block.

=number= is non-nil if the literal example specifies "+n" or
"-n" switch. If =number= is non-nil add line numbers.

=cont= is non-nil if the literal example specifies "+n" switch.
If =cont= is nil, start numbering this block from 1.  Otherwise
continue numbering from the last numbered block.

=replace-labels= is dual-purpose.
1. It controls the retention of labels in the exported block.
2. It specifies in what manner the links (or references) to a
#+begin_src emacs-lisp
   labeled line be formatted.
#+end_src

=replace-labels= is the symbol /keep/ if the literal example
specifies "-k" option, is numeric if the literal example
specifies "-r" option and is nil otherwise.

Handle =replace-labels= as below:
- If nil, retain labels in the exported block and use
#+begin_src emacs-lisp
  user-provided labels for referencing the labeled lines.
#+end_src
- If it is a number, remove labels in the exported block and use
#+begin_src emacs-lisp
  one of line numbers or labels for referencing labeled lines based
  on NUMBER option.
#+end_src
- If it is a keep, retain labels in the exported block and use
#+begin_src emacs-lisp
  one of line numbers or labels for referencing labeled lines
  based on NUMBER option.
#+end_src

=label-format= is the value of "-l" switch associated with
literal example.  See /org-coderef-label-format/.

=preprocess= is intended for backend-agnostic handling of source
block numbering.  When non-nil do the following:
- do not number the lines
- always strip the labels from exported block
- do not make the labeled line a target of an incoming link.
#+begin_src emacs-lisp
  Instead mark the labeled line with /org-coderef/ property and
  store the label in it.
#+end_src



** org-export-number-to-roman =n=

Convert integer =n= into a roman numeral.


** org-export-numbered-headline-p =headline info=

Return a non-nil value if =headline= element should be numbered.
=info= is a plist used as a communication channel.


** org-export-odt-convert =&optional in-file out-fmt prefix-arg=

Convert =in-file= to format =out-fmt= using a command line converter.
=in-file= is the file to be converted.  If unspecified, it defaults
to variable /buffer-file-name/.  =out-fmt= is the desired output
format.  Use /org-export-odt-convert-process/ as the converter.
If =prefix-arg= is non-nil then the newly converted file is opened
using /org-open-file/.


** org-export-odt-do-preprocess-latex-fragments  

Convert LaTeX fragments to images.


** org-export-odt-format-image =src href=

Create image tag with source and attributes.


** org-export-output-file-name =extension &optional subtreep pub-dir=

Return output file's name according to buffer specifications.

=extension= is a string representing the output file extension,
with the leading dot.

With a non-nil optional argument =subtreep=, try to determine
output file's name by looking for "EXPORT_FILE_NAME" property
of subtree at point.

When optional argument =pub-dir= is set, use it as the publishing
directory.

Return file name as a string, or nil if it couldn't be
determined.


** org-export-parse-option-keyword =options &optional backend=

Parse an =options= line and return values as a plist.
Optional argument =backend= is a symbol specifying which back-end
specific items to read, if any.


** org-export-populate-ignore-list =data options=

Return list of elements and objects to ignore during export.

=data= is the parse tree to traverse.  =options= is the plist holding
export options.

Return elements or objects to ignore as a list.


** org-export-prepare-file-contents =file &optional lines ind minlevel=

Prepare the contents of =file= for inclusion and return them as a string.

When optional argument =lines= is a string specifying a range of
lines, include only those lines.

Optional argument =ind=, when non-nil, is an integer specifying the
global indentation of returned contents.  Since its purpose is to
allow an included file to stay in the same environment it was
created (i.e. a list item), it doesn't apply past the first
headline encountered.

Optional argument =minlevel=, when non-nil, is an integer
specifying the level that any top-level headline in the included
file should have.


** org-export-preprocess-apply-macros  

Replace macro references.


** org-export-preprocess-string =string &rest parameters=

Cleanup =string= so that the true exported has a more consistent source.
This function takes =string=, which should be a buffer-string of an org-file
to export.  It then creates a temporary buffer where it does its job.
The result is then again returned as a string, and the exporter works
on this string to produce the exported version.


** org-export-protect-colon-examples  

Protect lines starting with a colon.


** org-export-protect-quoted-subtrees  

Mark quoted subtrees with the protection property.


** org-export-protect-verbatim  

Mark verbatim snippets with the protection property.


** org-export-push-to-kill-ring =format=

Push buffer content to kill ring.
The depends on the variable /org-export-copy-to-kill-ring/.


** org-export-region-as-ascii =beg end &optional body-only buffer=

Convert region from =beg= to =end= in org-mode buffer to plain ASCII.
If prefix arg =body-only= is set, omit file header, footer, and table of
contents, and only produce the region of converted text, useful for
cut-and-paste operations.
If =buffer= is a buffer or a string, use/create that buffer as a target
of the converted ASCII.  If =buffer= is the symbol /string/, return the
produced ASCII as a string and leave not buffer behind.  For example,
a Lisp program could call this function in the following way:

#+begin_src emacs-lisp
  (setq ascii (org-export-region-as-ascii beg end t 'string))
#+end_src

When called interactively, the output buffer is selected, and shown
in a window.  A non-interactive call will only return the buffer.


** org-export-region-as-docbook =beg end &optional body-only buffer=

Convert region from =beg= to =end= in /org-mode/ buffer to DocBook.
If prefix arg =body-only= is set, omit file header and footer and
only produce the region of converted text, useful for
cut-and-paste operations.  If =buffer= is a buffer or a string,
use/create that buffer as a target of the converted DocBook.  If
=buffer= is the symbol /string/, return the produced DocBook as a
string and leave not buffer behind.  For example, a Lisp program
could call this function in the following way:

#+begin_src emacs-lisp
  (setq docbook (org-export-region-as-docbook beg end t 'string))
#+end_src

When called interactively, the output buffer is selected, and shown
in a window.  A non-interactive call will only return the buffer.


** org-export-region-as-html =beg end &optional body-only buffer=

Convert region from =beg= to =end= in org-mode buffer to HTML.
If prefix arg =body-only= is set, omit file header, footer, and table of
contents, and only produce the region of converted text, useful for
cut-and-paste operations.
If =buffer= is a buffer or a string, use/create that buffer as a target
of the converted HTML.  If =buffer= is the symbol /string/, return the
produced HTML as a string and leave not buffer behind.  For example,
a Lisp program could call this function in the following way:

#+begin_src emacs-lisp
  (setq html (org-export-region-as-html beg end t 'string))
#+end_src

When called interactively, the output buffer is selected, and shown
in a window.  A non-interactive call will only return the buffer.


** org-export-region-as-latex =beg end &optional body-only buffer=

Convert region from =beg= to =end= in /org-mode/ buffer to LaTeX.
If prefix arg =body-only= is set, omit file header, footer, and table of
contents, and only produce the region of converted text, useful for
cut-and-paste operations.
If =buffer= is a buffer or a string, use/create that buffer as a target
of the converted LaTeX.  If =buffer= is the symbol /string/, return the
produced LaTeX as a string and leave no buffer behind.  For example,
a Lisp program could call this function in the following way:

#+begin_src emacs-lisp
  (setq latex (org-export-region-as-latex beg end t 'string))
#+end_src

When called interactively, the output buffer is selected, and shown
in a window.  A non-interactive call will only return the buffer.


** org-export-remember-html-container-classes  

Store the HTML_CONTAINER_CLASS properties in a text property.


** org-export-remove-archived-trees =export-archived-trees=

Remove archived trees.
When =export-archived-trees= is `headline;, only the headline will be exported.
When it is t, the entire archived tree will be exported.
When it is nil the entire tree including the headline will be removed
from the buffer.


** org-export-remove-clock-lines  

Remove clock lines for export.


** org-export-remove-comment-blocks-and-subtrees  

Remove the comment environment, and also commented subtrees.


** org-export-remove-headline-metadata =opts=

Remove meta data from the headline, according to user options.


** org-export-remove-or-extract-drawers =all-drawers exp-drawers=

Remove drawers, or extract and format the content.
=all-drawers= is a list of all drawer names valid in the current buffer.
=exp-drawers= can be t to keep all drawer contents, or a list of drawers
whose content to keep.  Any drawers that are in =all-drawers= but not in
=exp-drawers= will be removed.


** org-export-remove-special-table-lines  

Remove tables lines that are used for internal purposes.
Also, store forced alignment information found in such lines.


** org-export-remove-tasks =keep=

Remove tasks depending on configuration.
When =keep= is nil, remove all tasks.
When =keep= is /todo/, remove the tasks that are DONE.
When =keep= is /done/, remove the tasks that are not yet done.
When it is a list of strings, keep only tasks with these TODO keywords.


** org-export-remove-timestamps  

Remove timestamps and keywords for export.


** org-export-replace-src-segments-and-examples  

Replace source code segments with special code for export.


** org-export-res/src-name-cleanup  

Clean up #+results and #+name lines for export.
This function should only be called after all block processing
has taken place.


** org-export-resolve-coderef =ref info=

Resolve a code reference =ref=.

=info= is a plist used as a communication channel.

Return associated line number in source code, or =ref= itself,
depending on src-block or example element's switches.


** org-export-resolve-fuzzy-link =link info=

Return =link= destination.

=info= is a plist holding contextual information.

Return value can be an object, an element, or nil:

- If =link= path matches a target object (i.e. <<path>>) or
#+begin_src emacs-lisp
  element (i.e. "#+TARGET: path"), return it.
#+end_src

- If =link= path exactly matches the name affiliated keyword
#+begin_src emacs-lisp
  (i.e. #+NAME: path) of an element, return that element.
#+end_src

- If =link= path exactly matches any headline name, return that
#+begin_src emacs-lisp
  element.  If more than one headline share that name, priority
  will be given to the one with the closest common ancestor, if
  any, or the first one in the parse tree otherwise.
#+end_src

- Otherwise, return nil.

Assume =link= type is "fuzzy".


** org-export-resolve-id-link =link info=

Return headline referenced as =link= destination.

=info= is a plist used as a communication channel.

Return value can be an headline element or nil.  Assume =link= type
is either "id" or "custom-id".


** org-export-snippet-backend =export-snippet=

Return =export-snippet= targeted back-end as a symbol.
Translation, with /org-export-snippet-translation-alist/, is
applied.


** org-export-solidify-link-text =s=

Take link text =s= and make a safe target out of it.


** org-export-splice-attributes =tag attributes=

Read attributes in string =attributes=, add and replace in HTML tag =tag=.


** org-export-splice-style =style extra=

Splice =extra= into =style=, just before "</style>".


** org-export-store-footnote-definitions =info=

Collect and store footnote definitions from current buffer in =info=.

=info= is a plist containing export options.

Footnotes definitions are stored as a alist whose CAR is
footnote's label, as a string, and CDR the contents, as a parse
tree.  This alist will be consed to the value of
/:footnote-definition-alist/ in =info=, if any.

The new plist is returned; use

#+begin_src emacs-lisp
  (setq info (org-export-store-footnote-definitions info))
#+end_src

to be sure to use the new value.  =info= is modified by side
effects.


** org-export-string =string fmt &optional dir=

Export =string= to =fmt= using existing export facilities.
During export =string= is saved to a temporary file whose location
could vary.  Optional argument =dir= can be used to force the
directory in which the temporary file is created during export
which can be useful for resolving relative paths.  Dir defaults
to the value of /temporary-file-directory/.


** org-export-table-cell-address =table-cell info=

Return address of a regular =table-cell= object.

=table-cell= is the cell considered.  =info= is a plist used as
a communication channel.

Address is a CONS cell (ROW . COLUMN), where ROW and COLUMN are
zero-based index.  Only exportable cells are considered.  The
function returns nil for other cells.


** org-export-table-cell-alignment =table-cell info=

Return =table-cell= contents alignment.

=info= is a plist used as the communication channel.

Return alignment as specified by the last alignment cookie in the
same column as =table-cell=.  If no such cookie is found, a default
alignment value will be deduced from fraction of numbers in the
column (see /org-table-number-fraction/ for more information).
Possible values are /left/, /right/ and /center/.


** org-export-table-cell-borders =table-cell info=

Return =table-cell= borders.

=info= is a plist used as a communication channel.

Return value is a list of symbols, or nil.  Possible values are:
/top/, /bottom/, /above/, /below/, /left/ and /right/.  Note:
/top/ (resp. /bottom/) only happen for a cell in the first
row (resp. last row) of the table, ignoring table rules, if any.

Returned borders ignore special rows.


** org-export-table-cell-ends-colgroup-p =table-cell info=

Non-nil when =table-cell= is at the end of a row group.
=info= is a plist used as a communication channel.


** org-export-table-cell-starts-colgroup-p =table-cell info=

Non-nil when =table-cell= is at the beginning of a row group.
=info= is a plist used as a communication channel.


** org-export-table-cell-width =table-cell info=

Return =table-cell= contents width.

=info= is a plist used as the communication channel.

Return value is the width given by the last width cookie in the
same column as =table-cell=, or nil.


** org-export-table-dimensions =table info=

Return =table= dimensions.

=info= is a plist used as a communication channel.

Return value is a CONS like (ROWS . COLUMNS) where
ROWS (resp. COLUMNS) is the number of exportable
rows (resp. columns).


** org-export-table-has-header-p =table info=

Non-nil when =table= has an header.

=info= is a plist used as a communication channel.

A table has an header when it contains at least two row groups.


** org-export-table-has-special-column-p =table=

Non-nil when =table= has a special column.
All special columns will be ignored during export.


** org-export-table-row-ends-header-p =table-row info=

Non-nil when =table-row= is the last table header's row.
=info= is a plist used as a communication channel.


** org-export-table-row-ends-rowgroup-p =table-row info=

Non-nil when =table-row= is at the end of a column group.
=info= is a plist used as a communication channel.


** org-export-table-row-group =table-row info=

Return =table-row='s group.

=info= is a plist used as the communication channel.

Return value is the group number, as an integer, or nil special
rows and table rules.  Group 1 is also table's header.


** org-export-table-row-is-special-p =table-row info=

Non-nil if =table-row= is considered special.

=info= is a plist used as the communication channel.

All special rows will be ignored during export.


** org-export-table-row-starts-header-p =table-row info=

Non-nil when =table-row= is the first table header's row.
=info= is a plist used as a communication channel.


** org-export-table-row-starts-rowgroup-p =table-row info=

Non-nil when =table-row= is at the beginning of a column group.
=info= is a plist used as a communication channel.


** org-export-target-internal-links =target-alist=

Find all internal links and assign targets to them.
If a link has a fuzzy match (i.e. not a *dedicated* target match),
let the link  point to the corresponding section.
This function also handles the id links, if they have a match in
the current file.


** org-export-to-buffer =backend buffer &optional subtreep visible-only body-only ext-plist noexpand=

Call /org-export-as/ with output to a specified buffer.

=backend= is the back-end used for transcoding, as a symbol.

=buffer= is the output buffer.  If it already exists, it will be
erased first, otherwise, it will be created.

Optional arguments =subtreep=, =visible-only=, =body-only=, =ext-plist=
and =noexpand= are similar to those used in /org-export-as/, which
see.

Return buffer.


** org-export-to-file =backend file &optional subtreep visible-only body-only ext-plist noexpand=

Call /org-export-as/ with output to a specified file.

=backend= is the back-end used for transcoding, as a symbol.  =file=
is the name of the output file, as a string.

Optional arguments =subtreep=, =visible-only=, =body-only=, =ext-plist=
and =noexpand= are similar to those used in /org-export-as/, which
see.

Return output file's name.


** org-export-transcoder =blob info=

Return appropriate transcoder for =blob=.
=info= is a plist containing export directives.


** org-export-unravel-code =element=

Clean source code and extract references out of it.

=element= has either a /src-block/ an /example-block/ type.

Return a cons cell whose CAR is the source code, cleaned from any
reference and protective comma and CDR is an alist between
relative line number (integer) and name of code reference on that
line (string).


** org-export-visible =type arg=

Create a copy of the visible part of the current buffer, and export it.
The copy is created in a temporary buffer and removed after use.
=type= is the final key (as a string) that also selects the export command in
the C-c C-e export dispatcher.
As a special case, if the you type SPC at the prompt, the temporary
org-mode file will not be removed but presented to you so that you can
continue to use it.  The prefix arg =arg= is passed through to the exporting
command.


** org-export-with-current-buffer-copy =&rest body=

Apply =body= in a copy of the current buffer.

The copy preserves local variables and visibility of the original
buffer.

Point is at buffer's beginning when =body= is applied.

