#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Org API
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tjolitz [at] gmail [dot] com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport

* Org-Velocity API functions (org-velocity.el)
** org-velocity =arg &optional search=

Read a search string =search= for Org-Velocity interface.
This means that a buffer will display all headings where =search=
occurs, where one can be selected by a mouse click or by typing
its index.  If =search= does not occur, then a new heading may be
created named =search=.

If /org-velocity-bucket/ is defined and
/org-velocity-always-use-bucket/ is non-nil, then the bucket file
will be used; otherwise, this will work when called in any Org
file. Calling with =arg= forces current file.


** org-velocity-activate-button =char=

Go to button on line number associated with =char= in /org-velocity-index/.


** org-velocity-all-search =search &optional hide-hints max=

Display only entries containing every word in =search=.


** org-velocity-beginning-of-headings  

Goto the start of the first heading.


** org-velocity-bucket-file  

Return the proper file for Org-Velocity to search.
If /org-velocity-always-use-bucket/ is t, use bucket file;
complain if missing. Otherwise, if an Org file is current, then
use it.


** org-velocity-buffer-file-name =&optional buffer=

Return the name of the file =buffer= saves to.
Same as function /buffer-file-name/ unless =buffer= is an indirect
buffer or a minibuffer. In the former case, return the file name
of the base buffer; in the latter, return the file name of
/minibuffer-selected-window/ (or its base buffer).


** org-velocity-buttonize =heading=

Insert =heading= as a text button with no hints.


** org-velocity-capture  

Record a note with /org-capture/.


** org-velocity-click-for-incremental  

Jump out of search and select hint clicked on.


** org-velocity-create =search &key ask=

Create new heading named =search=.
If =ask= is non-nil, ask first.


** org-velocity-dabbrev-completion-list =abbrev=

Return all dabbrev completions for =abbrev=.


** org-velocity-dismiss  

Save current entry and close indirect buffer.


** org-velocity-displaying-completions-p  

Is there a *Completions* buffer showing?


** org-velocity-edit-entry =heading=

Edit entry at =heading= in an indirect buffer.


** org-velocity-electric-click =ev=

Follow hint indexed by a mouse event =ev=.


** org-velocity-electric-edit  

Edit the search string.


** org-velocity-electric-follow =ev=

Follow a hint indexed by keyboard event =ev=.


** org-velocity-electric-new  

Force a new entry.


** org-velocity-electric-read-hint  

Read index of button electrically.


** org-velocity-electric-undefined  

Complain about an undefined key.


** org-velocity-engine =search=

Display a list of headings where =search= occurs.


** org-velocity-generic-search =search &optional hide-hints=

Display any entry containing =search=.


** org-velocity-grab-preview  

Grab preview of a subtree.
The length of the preview is determined by /window-width/.

Replace all contiguous whitespace with single spaces.


** org-velocity-incremental-read =prompt=

Read string with =prompt= and display results incrementally.


** org-velocity-make-indirect-buffer =heading=

Make or switch to an indirect buffer visiting =heading=.


** org-velocity-match-buffer  

Return the proper buffer for Org-Velocity to display in.


** org-velocity-minibuffer-contents  

Return the contents of the minibuffer when it is active.


** org-velocity-nearest-heading =position=

Return last heading at =position=.
If there is no last heading, return nil.


** org-velocity-position =item list=

Return first position of =item= in =list=.


** org-velocity-present =search &key hide-hints=

Buttonize matches for =search= in /org-velocity-match-buffer/.
If =hide-hints= is non-nil, display entries without indices. =search=
binds /org-velocity-search/.

Return matches.


** org-velocity-read =arg &optional search=

Read a search string =search= for Org-Velocity interface.
This means that a buffer will display all headings where =search=
occurs, where one can be selected by a mouse click or by typing
its index.  If =search= does not occur, then a new heading may be
created named =search=.

If /org-velocity-bucket/ is defined and
/org-velocity-always-use-bucket/ is non-nil, then the bucket file
will be used; otherwise, this will work when called in any Org
file. Calling with =arg= forces current file.


** org-velocity-read-string =prompt &optional initial-input=

Read string with =prompt= followed by =initial-input=.


** org-velocity-read-with-completion =prompt=

Completing read with =prompt=.


** org-velocity-singlep =object=

Return t when =object= is a list or sequence of one element.


** org-velocity-store-link  

Function for /org-store-link-functions/.


** org-velocity-update  

Display results of search without hinting.
Stop searching once there are more matches than can be displayed.
