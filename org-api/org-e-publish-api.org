#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Org API
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tjolitz [at] gmail [dot] com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport

* Org-E-Publish API functions (org-e-publish.el)
** org-e-publish =project &optional force=

Publish =project=.


** org-e-publish-all =&optional force=

Publish all projects.
With prefix argument, remove all files in the timestamp
directory and force publishing all files.


** org-e-publish-attachment =plist filename pub-dir=

Publish a file with no transformation of any kind.

=filename= is the filename of the Org file to be published.  =plist=
is the property list for the given project.  =pub-dir= is the
publishing directory.

Return output file name.


** org-e-publish-cache-ctime-of-src =filename=

Get the =filename= ctime as an integer.


** org-e-publish-cache-file-needs-publishing =filename &optional pub-dir pub-func=

Check the timestamp of the last publishing of =filename=.
Return /t/, if the file needs publishing.  The function also
checks if any included files have been more recently published,
so that the file including them will be republished as well.


** org-e-publish-cache-get =key=

Return the value stored in /org-e-publish-cache/ for key =key=.
Returns nil, if no value or nil is found, or the cache does not
exist.


** org-e-publish-cache-get-file-property =filename property &optional default no-create project-name=

Return the value for a =property= of file =filename= in publishing cache.
Use cache file of =project-name=. Return the value of that =property=
or =default=, if the value does not yet exist.  If the entry will
be created, unless =no-create= is not nil.


** org-e-publish-cache-set =key value=

Store =key= =value= pair in /org-e-publish-cache/.
Returns value on success, else nil.


** org-e-publish-cache-set-file-property =filename property value &optional project-name=

Set the =value= for a =property= of file =filename= in publishing cache to =value=.
Use cache file of =project-name=.  If the entry does not exist, it
will be created.  Return =value=.


** org-e-publish-collect-index =tree backend info=

Update index for a file with =tree= in cache.

=backend= is the back-end being used for transcoding.  =info= is
a plist containing publishing options.

The index relative to current file is stored as an alist.  An
association has the following shape: (TERM FILE-NAME PARENT),
where TERM is the indexed term, as a string, FILE-NAME is the
original full path of the file where the term in encountered, and
PARENT is the headline element containing the original index
keyword.


** org-e-publish-compare-directory-files =a b=

Predicate for /sort/, that sorts folders and files for sitemap.


** org-e-publish-current-file =&optional force=

Publish the current file.
With prefix argument, force publish the file.


** org-e-publish-current-project =&optional force=

Publish the project associated with the current file.
With a prefix argument, force publishing of all files in
the project.


** org-e-publish-expand-projects =projects-alist=

Expand projects in =projects-alist=.
This splices all the components into the list.


** org-e-publish-file =filename &optional project no-cache=

Publish file =filename= from =project=.
If =no-cache= is not nil, do not initialize org-e-publish-cache and
write it to disk.  This is needed, since this function is used to
publish single files, when entire projects are published.
See /org-e-publish-projects/.


** org-e-publish-find-date =file=

Find the date of =file= in project.
If =file= provides a #+date keyword use it else use the file
system's modification time.

It returns time in /current-time/ format.


** org-e-publish-find-title =file &optional reset=

Find the title of =file= in project.


** org-e-publish-get-base-files =project &optional exclude-regexp=

Return a list of all files in =project=.
If =exclude-regexp= is set, this will be used to filter out
matching filenames.


** org-e-publish-get-base-files-1 =base-dir &optional recurse match skip-file skip-dir=

Set /org-e-publish-temp-files/ with files from =base-dir= directory.
If =recurse= is non-nil, check =base-dir= recursively.  If =match= is
non-nil, restrict this list to the files matching the regexp
=match=.  If =skip-file= is non-nil, skip file matching the regexp
=skip-file=.  If =skip-dir= is non-nil, don't check directories
matching the regexp =skip-dir= when recursing through =base-dir=.


** org-e-publish-get-project-from-filename =filename &optional up=

Return the project that =filename= belongs to.


** org-e-publish-index-generate-theindex =project directory=

Retrieve full index from cache and build "theindex.org".
=project= is the project the index relates to.  =directory= is the
publishing directory.


** org-e-publish-initialize-cache =project-name=

Initialize the projects cache if not initialized yet and return it.


** org-e-publish-needed-p =filename &optional pub-dir pub-func true-pub-dir=

Return t if =filename= should be published in =pub-dir= using =pub-func=.
=true-pub-dir= is where the file will truly end up.  Currently we
are not using this - maybe it can eventually be used to check if
the file is present at the target location, and how old it is.
Right now we cannot do this, because we do not know under what
file name the file will be stored - the publishing function can
still decide about that independently.


** org-e-publish-org-sitemap =project &optional sitemap-filename=

Create a sitemap of pages in set defined by =project=.
Optionally set the filename of the sitemap with =sitemap-filename=.
Default for =sitemap-filename= is 'sitemap.org'.


** org-e-publish-org-to =backend filename extension plist pub-dir=

Publish an Org file to a specified back-end.

=backend= is a symbol representing the back-end used for
transcoding.  =filename= is the filename of the Org file to be
published.  =extension= is the extension used for the output
string, with the leading dot.  =plist= is the property list for the
given project.  =pub-dir= is the publishing directory.

Return output file name.


** org-e-publish-org-to-ascii =plist filename pub-dir=

Publish an Org file to ASCII.

=filename= is the filename of the Org file to be published.  =plist=
is the property list for the given project.  =pub-dir= is the
publishing directory.

Return output file name.


** org-e-publish-org-to-html =plist filename pub-dir=

Publish an org file to HTML.

=filename= is the filename of the Org file to be published.  =plist=
is the property list for the given project.  =pub-dir= is the
publishing directory.

Return output file name.


** org-e-publish-org-to-latex =plist filename pub-dir=

Publish an Org file to LaTeX.

=filename= is the filename of the Org file to be published.  =plist=
is the property list for the given project.  =pub-dir= is the
publishing directory.

Return output file name.


** org-e-publish-org-to-latin1 =plist filename pub-dir=

Publish an Org file to Latin-1.

=filename= is the filename of the Org file to be published.  =plist=
is the property list for the given project.  =pub-dir= is the
publishing directory.

Return output file name.


** org-e-publish-org-to-pdf =plist filename pub-dir=

Publish an Org file to PDF (via LaTeX).

=filename= is the filename of the Org file to be published.  =plist=
is the property list for the given project.  =pub-dir= is the
publishing directory.

Return output file name.


** org-e-publish-org-to-utf8 =plist filename pub-dir=

Publish an org file to UTF-8.

=filename= is the filename of the Org file to be published.  =plist=
is the property list for the given project.  =pub-dir= is the
publishing directory.

Return output file name.


** org-e-publish-project =project &optional force=

Publish =project=.


** org-e-publish-projects =projects=

Publish all files belonging to the =projects= alist.
If /:auto-sitemap/ is set, publish the sitemap too.  If
/:makeindex/ is set, also produce a file theindex.org.


** org-e-publish-remove-all-timestamps  

Remove all files in the timestamp directory.


** org-e-publish-reset-cache  

Empty org-e-publish-cache and reset it nil.


** org-e-publish-timestamp-filename =filename &optional pub-dir pub-func=

Return path to timestamp file for filename =filename=.


** org-e-publish-update-timestamp =filename &optional pub-dir pub-func=

Update publishing timestamp for file =filename=.
If there is no timestamp, create one.


** org-e-publish-write-cache-file =&optional free-cache=

Write /org-e-publish-cache/ to file.
If =free-cache=, empty the cache.
