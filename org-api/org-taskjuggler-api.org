#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Org API
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tjolitz [at] gmail [dot] com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport

* Org-Taskjuggler API functions (org-taskjuggler.el)
** org-taskjuggler-assign-resource-ids =resources=

Given a list of resources return the same list, assigning a
unique id to each resource.


** org-taskjuggler-assign-task-ids =tasks=

Given a list of tasks return the same list assigning a unique id
and the full path to each task. Taskjuggler takes hierarchical ids.
For that reason we have to make ids locally unique and we have to keep
a path to the current task.


** org-taskjuggler-clean-effort =effort=

Translate effort strings into a format acceptable to taskjuggler,
i.e. REAL UNIT. A valid effort string can be anything that is
accepted by `org-duration-string-to-minutesÂ´.


** org-taskjuggler-clean-id =id=

Clean and return =id= to make it acceptable for taskjuggler.


** org-taskjuggler-components  

Return an alist containing all the pertinent information for
the current node such as the headline, the level, todo state
information, all the properties, etc.


** org-taskjuggler-compute-task-leafiness =tasks=

Figure out if each task is a leaf by looking at it's level,
and the level of its successor. If the successor is higher (ie
deeper), then it's not a leaf.


** org-taskjuggler-filter-and-join =items=

Filter all nil elements from =items= and join the remaining ones
with separator "
".


** org-taskjuggler-find-task-with-id =id tasks=

Find =id= in tasks. If found return the path of task. Otherwise
return nil.


** org-taskjuggler-get-attribute =item attribute=

Return a list of strings containing the properly formatted
taskjuggler declaration for a given =attribute= in =item= (an alist).
If the =attribute= is not in =item= return nil.


** org-taskjuggler-get-attributes =item attributes=

Return all attribute as a single formatted string. =item= is an
alist representing either a resource or a task. =attributes= is a
list of symbols. Only entries from =item= are considered that are
listed in =attributes=.


** org-taskjuggler-get-priority =priority=

Return a priority between 1 and 1000 based on =priority=, an
org-mode priority string.


** org-taskjuggler-get-unique-id =item unique-ids=

Return a unique id for an =item= which can be a task or a resource.
The id is derived from the headline and made unique against
=unique-ids=. If the (downcased) first token of the headline is not
unique try to add more (downcased) tokens of the headline or
finally add more underscore characters ("_").


** org-taskjuggler-open-project =project=

Insert the beginning of a project declaration. All valid
attributes from the =project= alist are inserted. If no end date is
specified it is calculated
/org-export-taskjuggler-default-project-duration/ days from now.


** org-taskjuggler-open-resource =resource=

Insert the beginning of a resource declaration. All valid
attributes from the =resource= alist are inserted. If the =resource=
defines a property "resource_id" it will be used as the id for
this resource. Otherwise it will use the ID property. If neither
is defined it will calculate a unique id for the resource using
/org-taskjuggler-get-unique-id/.


** org-taskjuggler-parent-is-ordered-p  

Return true if the parent of the current node has a property
"ORDERED". Return nil otherwise.


** org-taskjuggler-resolve-explicit-dependencies =dependencies tasks=

For each dependency in =dependencies= try to find a
corresponding task with a matching property "task_id" in =tasks=.
Return a list containing the resolved links for all =dependencies=
where a matching tasks was found. If the dependency is
"previous-sibling" it is ignored (as this is dealt with in
/org-taskjuggler-resolve-dependencies/). If there is no matching
task the dependency is ignored and a warning is displayed .


** org-taskjuggler-targeting-tj3-p  

Return true if we are targeting TaskJuggler III.


** org-taskjuggler-tokenize-dependencies =dependencies=

Split a dependency property value =dependencies= into the
individual dependencies and return them as a list while keeping
the optional arguments (such as gapduration) for the
dependencies. A dependency will have to match /[-a-zA-Z0-9_]+/.
