#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Org API
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tjolitz [at] gmail [dot] com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport

* Org-Invoice API functions (org-invoice.el)
** org-invoice-collapse-list =ls=

Reorganize the given list by dates.


** org-invoice-collect-invoice-data  

Collect all the invoice data from the current OrgMode tree and
return it.  Before you call this function, move point to the
heading that begins the invoice data, usually using the
/org-invoice-goto-tree/ function.


** org-invoice-goto-tree =&optional tree=

Move point to the heading that represents the head of the
current invoice.  The heading level will be taken from
/org-invoice-default-level/ unless tree is set to a string that
looks like tree2, where the level is 2.


** org-invoice-heading-info  

Return invoice information from the current heading.


** org-invoice-in-report-p  

Check to see if point is inside an invoice report.


** org-invoice-info-to-table =info=

Create a single org table row from the given info alist.


** org-invoice-level-min-max =ls=

Return a list where the car is the min level, and the cdr the max.


** org-invoice-list-to-table =ls=

Convert a list of heading info to an org table


** org-invoice-report =&optional jump=

Create or update an invoice dblock report.  If point is inside
an existing invoice report, the report is updated.  If point
isn't inside an invoice report, a new report is created.

When called with a prefix argument, move to the first invoice
report after point and update it.

For information about various settings for the invoice report,
see the /org-dblock-write:invoice/ function documentation.

An invoice report is created by reading a heading tree and
collecting information from various properties.  It is assumed
that all invoices start at a second level heading, but this can
be configured using the /org-invoice-default-level/ variable.

Here is an example, where all invoices fall under the first-level
heading Invoices:
