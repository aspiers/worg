#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Org API
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tjolitz [at] gmail [dot] com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport

* Org-Ctags API functions (org-ctags.el)
** org-ctags-all-tags-in-current-tags-table  

Read all tags defined in the active TAGS file, into a list of strings.
Return the list.


** org-ctags-append-topic =name &optional narrowp=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Append a new toplevel heading to the end of the current buffer. The
heading contains =name= surrounded by <<angular brackets>>, thus making
the heading a destination for the tag /=name=/.


** org-ctags-ask-append-topic =name &optional narrowp=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Wrapper for org-ctags-append-topic, which first asks the user if they want
to append a new topic.


** org-ctags-ask-rebuild-tags-file-then-find-tag =name=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Wrapper for org-ctags-rebuild-tags-file-then-find-tag.


** org-ctags-ask-visit-buffer-or-file =name=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Wrapper for org-ctags-visit-buffer-or-file, which ensures the user is
asked before creating a new file.


** org-ctags-create-tags =&optional directory-name=

(Re)create tags file in the directory of the active buffer.
The file will contain tag definitions for all the files in the
directory and its subdirectories which are recognized by ctags.
This will include files ending in /.org/ as well as most other
source files (.C, .H, .EL, .LISP, etc).  All the resulting tags
end up in one file, called TAGS, located in the directory.  This
function may take several seconds to finish if the directory or
its subdirectories contain large numbers of taggable files.


** org-ctags-fail-silently =name=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Put as the last function in the list if you want to prevent org's default
behavior of free text search.


** org-ctags-find-tag =name=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Look for a tag called /=name=/ in the current TAGS table.  If it is found,
visit the file and location where the tag is found.


** org-ctags-find-tag-at-point  

Determine default tag to search for, based on text at point.
If there is no plausible default, return nil.


** org-ctags-find-tag-interactive  

Prompt for the name of a tag, with autocompletion, then visit the named tag.
Uses /ido-mode/ if available.
If the user enters a string that does not match an existing tag, create
a new topic.


** org-ctags-get-filename-for-tag =tag=

=tag= is a string.  Search the active =tag=S file for a matching tag.
If the tag is found, return a list containing the filename, line number, and
buffer position where the tag is found.


** org-ctags-open-file =name &optional title=

Visit or create a file called /=name=.org/, and insert a new topic.
The new topic will be titled =name= (or =title= if supplied).


** org-ctags-rebuild-tags-file-then-find-tag =name=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Like ORG-CTAGS-FIND-TAG, but calls the external ctags program first,
to rebuild (update) the TAGS file.


** org-ctags-string-search-and-replace =search replace string=

Replace all instances of =search= with =replace= in =string=.


** org-ctags-visit-buffer-or-file =name &optional create=

This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
Visit buffer named /=name=.org/.  If there is no such buffer, visit the file
with the same name if it exists.  If the file does not exist, then behavior
depends on the value of =create=.

If =create= is nil (default), then return nil.  Do not create a new file.
If =create= is t, create the new file and visit it.
If =create= is the symbol /ask/, then ask the user if they wish to create
the new file.
