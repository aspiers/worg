#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TITLE:      How to use git to edit Worg files?
#+AUTHOR:     Worg people
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+EMAIL:      bzg AT altern DOT org
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg
#+OPTIONS:    H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc

[[file:index.org][{Back to Worg's index}]]

* What is git?

[[http://git.or.cz][git]] is a fast version control system that lets you collaborate on a project.
For details on how to use git, go and read the [[http://www.kernel.org/pub/software/scm/git/docs/tutorial.html][git tutorial]].  For details on
the public git repository, go and read the [[http://repo.or.cz/about.html][about page]] of
http://repo.or.cz/.

The homepage of the Worg project is here: http://repo.or.cz/w/Worg.git

* The first time you contribute to Worg

1. If you don't have a SSH-key, [[file:worg-git-ssh-key.org][create one]].

2. Register a [[http://repo.or.cz/m/reguser.cgi][new account]] on the git public repository.

3. Drop an email to [[mailto:bzg%20AT%20altern%20DOT%20org][Bastien]] mentioning your username on repo.or.cz

4. Install git on your system.

5. Clone the project somewhere in a working directory:

   :~$ git clone git+ssh://repo.or.cz/srv/git/Worg.git

6. Go to the newly created =Worg/= directory and edit some files.

7. If you created files, add them to the git index:

   :~$ git add *.org

8. Commit changes with the appropriate ChangeLog:

  :~$ git commit -a -m "My changelog"

9. Push your change to Worg:

  :~$ git push

* The second time you contribute to Worg

1. Go to your =Worg/= directory.

2. Be sure to "pull" the last version of the repository.

3. Make some changes.

4. Commit your changes on your local repository: 
   
   :~$ git commit -a -m "My ChangeLog"

5. Push your change on the remote repository

   :~$ git push

* Getting organized

The Worg TODO file is =worg-todo.org=.  If you are a Worg zealot, maybe you
want to add this file to the list of your agenda files.  For example, here
is my =org-agenda-files= variable:

  :(setq org-agenda-files '("~/org/bzg.org" "~/git/Worg/worg-todo.org")

I have an agenda custom command for checking tasks that are assigned to me:

  :(org-add-agenda-custom-command '("W" tags "Owner=\"Bastien\""))

The next time someone assigns a task for me, it will appear in my Worg
agenda view.  

* Register your changes under your name

Information regarding your name is stored in the .gitconfig file, where
you pulled the Worg project.

Edit it like this:

:[user]
:        name = Your Name Goes Here
:        email = you@yourdomain.example.com

Now your changes will be filed under your name.

Alternatively you can add this to ~/.gitconfig which will apply to all
git repositories you have.

# I'm not sure this is useful at all:
* COMMENT Anonymous editing through the "mob" user/branch

If you don't want to register a new account on =repo.or.gz= but still
want to suggest modifications on Worg, you can do this by editing the
"mob" branch of Worg.  For details about the =mob= user, check [[http://repo.or.cz/mob.html][this
webpage]] on repo.or.cz

This branch is usually empty, since interesting changes are quickly
merged into the master branch.  But it is important to make sure that
you pull all changes in any existing =mob= branch before trying to push
yours.

1. Clone the Worg project as the =mob= user:

   :~$ git clone git+ssh://mob@repo.or.cz/srv/git/Worg.git

2. Check out the "mob" branch to avoid conflicts between the =mob=
   branch that you will soon create and any existing =mob= branch:

   :~$ git checkout origin/mob

   You should get this warning:

   : Note: moving to "origin/mob" which isn't a local branch
   : If you want to create a new branch from this checkout, you may do so
   : now or later) by using -b with the checkout command again. Example:
   : git checkout -b <new_branch_name>

   Don't worry.

3. Create a new branch named =mob= from this checkout:

   :~$ git checkout -b mob

4. Edit the files, add new files (=git-add=) and commit (=git-commit=)
   them as usual.

5. Push the =mob= branch into the Worg remote directory:

   :~$ git push origin mob

You're done!














# FIXME:
# What if two people edit Worg at the same time?
# Can I have private sections in Worg?
