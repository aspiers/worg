#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions
:PROPERTIES:
:CUSTOM_ID: types-of-contributions
:END:

Every contribution to Org is very welcome.  Here is a list of areas
where your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make sure
  you have read this section of Org's manual: [[https://orgmode.org/org.html#Feedback][Feedback]] You can also
  read this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *patches* -- You can submit patches to the mailing
  list.  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for
  details.  You can run =make test= to check that your patch does not
  introduce new bugs.

  If your patch is against a file that is part of Emacs, then your
  total contribution (all patches you submit) should change /less than
  15 lines/ (See the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE file in GNU Emacs]].)  If you contribute
  more, you have to assign the copyright of your contribution to the
  Free Software Foundation (see below).

- You can submit material to the *Worg* website -- This website is made
  of Org files that you can contribute to.  Learn what Worg is [[file:worg-about.org][about]]
  and how to contribute to it [[file:worg-git.org][through git]].

- You can submit *feature requests* -- Org is already mature, but new
  ideas keep popping up.  If you want to request a feature, it might
  be a good idea to have a look at the current [[https://orgmode.org/worg/org-issues.html][Issue tracking file]]
  which captures both bug reports and feature requests.  Or dig into
  the mailing list for possible previous discussions about your idea.
  If you cannot find back your idea, formulate it as detailed as
  possible, if possible with examples, and send it to the mailing
  list.

- You can submit Org *add-ons* -- there are many Org add-ons.
  - The best way is to submit your code to [[file:org-mailing-list.org][the mailing list]] to discuss
    it with people.
  - If it is useful, you might consider contributing it to the
    =lisp/contrib/= directory in the git repository. It will be
    reviewed, and if it passes, it will be included. Ask help from
    [[file:org-people.org][Eric Schulte]] for this step. The =lisp/contrib/= directory is somehow
    relaxed: it is not distributed with Emacs, and does not require a
    formal copyright assignment.
  - If you decide to sign the [[*Copyright issues when contributing to Emacs Org mode][assignment contract with the FSF]], we
    might include your contribution in the distribution, and then in
    GNU Emacs.

* Copyright issues when contributing to Emacs Org mode
:PROPERTIES:
:CUSTOM_ID: copyright-issues
:END:

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[https://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
;; GNU Emacs is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the repository
will be accepted, as well as very minor changes (so-called /tiny
changes/) to core files.  We will ask you to sign FSF papers at the
moment we attempt to move a =contrib/= file into the Org core, or into
Emacs.

* For Org developers
  :PROPERTIES:
  :CUSTOM_ID: devs
  :END:

** Git branches

Please read [[https://code.orgmode.org/bzg/org-mode/src/master/README_maintainer][README_maintainer]] file within Org's repository.

** Pushing your first commit

1. Create an account on https://code.orgmode.org
2. Add your public key to the account
3. Ask [[mailto:bzgATgnuDOTorg][Bastien]] to be added as a collaborator on the repository
4. Clone =org-mode.git=: =~$ git clone git@code.orgmode.org:bzg/org-mode.git=
5. Commit your changes against the code and the documentation.
6. Run =make test=
7. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch
and make sure you have a clean commit history before merging it into
the maint or master branch.

** Taking care of the manual in both branches

- When you make a change in the master branch, update
  doc/org-manual.org accordingly.

- When you make a change in the maint branch, update doc/org.texi in
  maint and doc/org-manual.org when you merge maint into master.

* For Org contributors: preferred way of submitting patches
:PROPERTIES:
:CUSTOM_ID: patches
:END:

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs
Lisp coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be
used to make patches and send them via email -- this is perfectly fine
for major and minor changes.

When sending a patch (either using =git diff= or =git format-patch=)
please *always add a properly formatted Emacs ChangeLog entry*.  See
[[#commit-messages][this section]] for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes,
you might even want to work in several steps and send each commit
separately.  Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -a -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -a -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master                # Creates two patches

  ... Then two patches for your two commits are ready to be sent to
  the list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in
your email and 2) a ChangeLog entry in the commit message (see [[#commit-messages][this section]] on how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by
other people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog
entry to be applied.  If your patch looks good to you, it's always
better to send a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =https://code.orgmode.org/bzg/org-mode=.
   You can clone using any of the commands below.

   : git clone git@code.orgmode.org:bzg/org-mode.git
   : git clone https://code.orgmode.org/bzg/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the https url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/ or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new
features before sending the patch series to the mailing list, but the
patches remain the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
:PROPERTIES:
:CUSTOM_ID: commit-messages
:END:

We have decided to no longer keep a ChangeLog file to record changes
to individual functions.

A commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end and does
  not start with a star.  Generally, it starts with the filename that
  has been changed, followed by a colon.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start.  A ChangeLog entry
  looks like [[https://orgmode.org/cgit.cgi/org-mode.git/commit/?id%3Dd49957ef021e256f19092c907d127390d39ec1ed][this]]:

  : * org-timer.el (org-timer-cancel-timer, org-timer-stop): Enhance
  : message.
  : (org-timer-set-timer): Use the number of minutes in the Effort
  : property as the default timer value. Three prefix arguments will
  : ignore the Effort value property.

- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.

- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

- Variables and functions names are quoted like `this' (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  org-capture.el: Fix the case of using a template file

  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.

  ,* doc/org.texi (Capture): Document using a file for a template.

  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.

  Modified from a patch proposal by Johan Friis.

  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, the ChangeLog for such entries
are easily produced by pressing =C= in the diff listing.

Another option to produce the entries is to use `C-x 4 a' in the
changed function or in the diff listing.  This will create entries in
the ChangeLog file, and you can then cut and paste these to the commit
message and remove the indentation.

- Further reference: [[http://git.savannah.gnu.org/cgit/emacs.git/plain/CONTRIBUTE][Contribution guide from Emacs repo]]

* Copyrighted contributors to Org mode
:PROPERTIES:
:CUSTOM_ID: copyrighted-contributors
:END:

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Aaron Jensen
3. Abdó Roig-Maranges
4. Achim Gratz
5. Adam Elliott
6. Adam Porter
7. Adam Spiers
8. Alan Schmitt
9. Alex Branham
10. Alexey Lebedeff
11. Allen Li
12. Andreas Burtzlaff
13. Andreas Leha
14. Andrew Hyatt
15. Andrzej Lichnerowicz
16. Andy Steward
17. Anthony John Day
18. Anthony Lander
19. Arni Magnusson
20. Arun Isaac
21. Baoqiu Cui
22. Barry Leonard Gidden
23. Bastien Guerry
24. Benjamin Andresen
25. Bernd Grobauer
26. Bernt Hansen
27. Bjarte Johansen
28. Brian James Gough
29. Brice Waegenire
30. Carsten Dominik
31. Charles Berry
32. Charles Sebold
33. Christian Egli
34. Christian Garbs
35. Christian Moe
36. Christopher League
37. Christopher Miles Gray
38. Christopher Schmidt
39. Christopher Suckling
40. Clément Pit--Claudel
41. Dan Davison
42. Daniel M German
43. Daniel M. Hackney
44. David Arroyo Menéndez
45. David Maus
46. David O'Toole
47. Dieter Schoen
48. Dima Kogan
49. Dmitry Antipov
50. Don March
51. Emmanuel Charpentier
52. Eric Abrahamsen
53. Eric Schulte
54. Eric S. Fraga
55. Erik Hetzner
56. Erik Iverson
57. Ethan Ligon
58. Feng Shu
59. Florian Lindner
60. Francesco Pizzolante
61. Frederick Giasson
62. Gary Oberbrunner
63. George Kettleborough
64. Georg Lehner
65. Giovanni Ridolfi
66. Grégoire Jadi (aka Daimrod)
67. Gustav Wikström
68. Henning Dietmar Weiss
69. Henry Blevins
70. Ian Barton
71. Ian Dunn
72. Ian Kelling
73. Ilya Shlyakhter
74. Ippei Furuhashi
75. Jack Kamm
76. Jake Romer
77. James TD Smith
78. Jan Böcker
79. Jan Malakhovski
80. Jarmo Hurri
81. Jason Riedy
82. Jay Kamat
83. Jay Kerns
84. Jeffrey Ryan Horn
85. Jens Lechtenboerg
86. Joe Corneli
87. Joel Boehland
88. John Kitchin
89. John Wiegley
90. Jonas Bernoulli
91. Jonathan Leech-Pepin
92. Jon Snader
93. José L. Doménech
94. Juan Pechiar
95. Julian Gehring
96. Julien Barnier
97. Julien Danjou
98. Justin Gordon
99. Justus Piater
100. Karl Fogel
101. Kaushal Modi
102. Kevin Brubeck Unhammer
103. Kodi Arfer
104. Konstantin Antipin
105. Kyle Meyer
106. Lambda Coder
107. Lawrence Mitchell
108. Lele Gaifax
109. Lennart Borgman
110. Leonard Avery Randall
111. Le Wang
112. Luis Anaya
113. Lukasz Stelmach
114. Madan Ramakrishnan
115. Magnus Henoch
116. Manuel Giraud
117. Marcin Borkowski
118. Marco Wahl
119. Mark A. Hershberger
120. Martin Pohlack
121. Martyn Jago
122. Matt Lundin
123. Max Mikhanosha
124. Michael Albinus
125. Michael Brand
126. Michael Gauland
127. Michael Sperber
128. Miguel A. Figueroa-Villanueva
129. Mikael Fornius
130. Moritz Ulrich
131. Nathaniel Flath
132. Nathan Neff
133. Neil Jerram
134. Nicholas Dokos
135. Nicolas Berthier
136. Nicolas Dudebout
137. Nicolas Goaziou
138. Nicolas Richard
139. Niels Giessen
140. Nikolai Weibull
141. Noorul Islam K M
142. Oleh Krehel
143. Paul Sexton
144. Pedro Alexandre Marcelino Costa da Silva
145. Peter Jones
146. Phil Hudson
147. Philip Rooke
148. Phil Jackson
149. Pierre Téchoueyres
150. Pieter Praet
151. Piotr Zielinski
152. Puneeth Chaganti
153. Rafael Laboissière
154. Rainer M Krug
155. Rasmus Pank Roulund
156. Richard Kim
157. Richard Klinda
158. Richard Riley
159. Rick Frankel
160. Robert Michael Irelan
161. Rüdiger Sonderfeld
162. Russel Adams
163. Ryo Takaishi
164. Sacha Chua
165. Samuel Loury
166. Sebastian Reuße
167. Sebastian Rose
168. Sebastien Vauban
169. Sergey Litvinov
170. Seweryn Kokot
171. Simon Michael
172. Siraphob Phipathananunth
173. Stardiviner
174. Stephen Eglen
175. Steven Rémot
176. Suvayu Ali
177. Tassilo Horn
178. T.F. Torrey
179. Thibault Marin
180. Thierry Banel
181. Thomas Baumann
182. Thomas Holst
183. Thomas S. Dye
184. Thorsten Jolitz
185. Tim Burt
186. Tim Landscheidt
187. Titus von der Malsburg
188. Toby Cubitt
189. Tokuya Kameshima
190. Tomas Hlavaty
191. Tom Breton
192. Tony Day
193. Trevor Murphy
194. Ulf Stegemann
195. Vitalie Spinu
196. Vladimir Panteleev
197. Yann Hodique
198. Yasushi Shoji
199. Yoshinari Nomura
200. Yuri D. Lensky
201. Zhang Weize
202. Zhuo Qingliang (Killy Draw)

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Brian Carlson [2016-05-24 Tue]
- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603@oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Adam Aviv
2. Aliaksey Artamonau
3. Aman Yang
4. Andrew Burgess
5. Andrew Eggenberger
6. Andy Lutomirski
7. Anthony Cowley
8. Arun Persaud
9. Aurélien Aptel
10. Austin Walker
11. Axel Kielhorn
12. Brian Carlson
13. Christian Schwarzgruber
14. Chunyang Xu
15. Craig Tanis
16. Daniel Peres Gomez
17. Derek Feichtinger
18. Dima Gerasimov
19. Dominik Schrempf
20. Doro Rose
21. Eduardo Bellani
22. Eric Danan
23. Federico Beffa
24. Feng Zhou
25. Fernando Varesi
26. Florian Beck
27. Francesco Montanari
28. Galen Menzel
29. Georgiy Tugai
30. Gong Qijian
31. Gregor Zattler
32. Greg Tucker-Kellogg
33. Hiroshi Saito
34. Ivan Vilata i Balaguer
35. Jack Henahan
36. Jacob Gerlach
37. Jacob Matthews
38. Jakob Lombacher
39. Jan Seeger
40. Jason Furtney
41. Jeff Larson
42. Joe Hirn
43. John Foerch
44. Jonas Hörsch
45. Jon Miller
46. Joost Diepenmaat
47. Jose Robins
48. Kodi Arfer
49. Konstantin Kliakhandler
50. Leslie Harlley Watter
51. Leslie Watter
52. Lixin Chin
53. Luke Amdor
54. Marc Ihm
55. Mario Frasca
56. Mario Martelli
57. Marshall Flax
58. Martin Šlouf
59. Martin Vuk
60. Matthew Gidden
61. Matthew MacLean
62. Matt Price
63. Michaël Cadilhac
64. Michael O'Connor
65. Michael Strey
66. Michael Welle
67. Michael Weylandt
68. Mike McLean
69. Miro Bezjak
70. Moritz Kiefer
71. Muchenxuan Tong
72. Myles English
73. Myq Larson
74. Nathaniel Nicandro
75. Nick Gunn
76. Peter Feigl
77. Peter Moresi
78. Philip (Pip Cet)
79. Renato Ferreira
80. Renato Ferreira
81. Richard Hansen
82. Richard Lawrence
83. Richard Y. Kim (Kim)
84. Roberto Huelga
85. Robert P. Goldman
86. Roger Welsh
87. Ruben Maher
88. Sami Airaksinen
89. Saulius Menkevičius
90. Sebastien Le Maguer
91. Sergey Gordienko
92. Sigmund Tzeng
93. Stefan-W. Hahn
94. Stig Brautaset
95. Sylvain Chouleur
96. Tadashi Hirata
97. Teika Kazura
98. Thierry Pellé
99. Thomas Alexander Gerds
100. Thomas Rikl
101. Tobias Schlemmer
102. Tom Hinton
103. Vicente Vera Parra
104. Viktor Rosenfeld
105. Vladimir Lomov
106. Wojciech Gac
107. Xavier Martinez-Hidalgo
108. Xi Shen
109. York Zhao
110. Yue Zhu
111. Zane D. Purvis
112. Иван Трусков

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
