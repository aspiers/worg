#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) 
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions

Every contribution to Org is very welcome.  Here is a list of areas where
your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make sure
  you have read this section of Org's manual: [[http://orgmode.org/org.html#Feedback][Feedback]] You can also read
  this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *feature requests* -- Org is already mature, but new ideas
  keep popping up.  If you want to request a feature, it might be a good
  idea to have a look at the current [[http://orgmode.org/worg/org-issues.html][Issue tracking file]] which captures
  both bug reports and feature requests.  Or dig into the mailing list for
  possible previous discussions about your idea.  If you cannot find back
  your idea, formulate it as detailed as possible, if possible with
  examples, and send it to the mailing list.

- you can submit *patches* -- You can submit patches to the mailing list.
  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for details.

  If your patch is against a file that is part of Emacs, then your total
  contribution (all patches you submit) should change /less than 15 lines/
  (See the [[http://bzr.savannah.gnu.org/lh/emacs/trunk/annotate/head:/etc/CONTRIBUTE][etc/CONTRIBUTE file in GNU Emacs]].)  If you contribute more, you
  have to assign the copyright of your contribution to the Free Software
  Foundation (see below).
  
- you can submit Org *add-ons* -- there are many Org add-ons.  The best way
  is to submit your code to the mailing list to discuss it with people.  If
  it is useful, you might consider contributing it to the =CONTRIB/=
  directory in the git repository.

- you can submit material to the *Worg* website -- This website is made of
  Org files that you can contribute to.  Learn what Worg is [[file:worg-about.org][about]] and how
  to contribute to it [[file:worg-git.org][through git]].

* Copyright issues when contributing to Emacs org-mode

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[http://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
 ;; GNU Emacs is free software: you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation, either version 3 of the License, or
 ;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the repository
will be accepted, as well as very minor changes (so-called /tiny
changes/) to core files.  We will ask you to sign FSF papers at the
moment we attempt to move a =contrib/= file into the Org core, or into
Emacs.

* For Org developers
:PROPERTIES:
:CUSTOM_ID: devs
:END:

1. Send your public key to [[mailto:jasondunsmore%20AT%20gmail%20DOT%20com][Jason Dunsmore]] or Org's maintainer.

2. Wait for confirmation that your public key has been added to the server.

3. Clone =org-mode.git= repository like this:
   : ~$ git clone orgmode@orgmode.org:org-mode.git

4. Commit your changes.

5. Run =make test=

6. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch for
them.

* For Org contributors: preferred way of submitting patches

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs Lisp
coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be used
to make patches and send them via email -- this is perfectly fine for major
and minor changes.

When sending a patch (either using =git diff= or =git format-patch=) please
*always add a properly formatted Emacs ChangeLog entry*.  See [[id:c526dfd7-2b0c-4b66-9deb-6e442e48708c][this section]]
for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes, you
might even want to work in several steps and send each commit separately.
Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master             # Creates two patches

  ... Then two patches for your two commits are ready to be sent to the
  list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in your
email and 2) a ChangeLog entry in the commit message (see [[id:c526dfd7-2b0c-4b66-9deb-6e442e48708c][this section]] on
how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by other
people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog entry
to be applied.  If your patch looks good to you, it's always better to send
a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =http://orgmode.org/w/org-mode.git=.
   You can clone using any of the commands below.

   : git clone git://orgmode.org/org-mode.git
   : git clone http://orgmode.org/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the http url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/, /repo.or.cz/, or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories, in particular
   the org-mode master at /repo.or.cz/.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new features
before sending the patch series to the mailing list, but the patches remain
the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
  :PROPERTIES:
  :ID:       c526dfd7-2b0c-4b66-9deb-6e442e48708c
  :END:

We have decided to no longer keep a ChangeLog file to record changes to
individual functions.  In a modern version control system like git,
ChangeLog is duplicating information that should be in the commit message,
and it is the main cause of merge conflicts.

Instead, the change log entry should be part of the commit message.  A
commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of the
  overall change.  Line 1 does /not/ get a dot at the end and does not
  start with a star.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start, in a similar format as in
  the old ChangeLog files, but without the author information (which is
  part of the commit anyway).

- After the changelog, another empty line should come before any additional
  information that the committer wishes to provide in order to explain the
  patch.

- If the change is a minor change made by a committer without copyright
  assignment to the FSF, the commit message should also contain the cookie
  =TINYCHANGE= (anywhere in the message).  When we later produce the
  ChangeLog file for Emacs, the change will be marked appropriately.

- Variables and functions names are quoted like =`this'= (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  Capture: Fix the case of using a template file
      
  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.
  ,* doc/org.texi (Capture): Document using a file for a template.
      
  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.
  
  Modified from a patch proposal by Johan Friis.
  
  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, The ChangeLog-like such entries are
easily made by pressing =C= in the diff listing.  Another option to make
the entries is to use `C-x 4 a' in the changed function.  This will create
entries in the ChangeLog file, and you can then cut and paste these to the
commit message and remove the indentation.

* Copyrighted contributors to Org-mode

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Abdó Roig-Maranges
3. Achim Gratz
4. Adam Elliott
5. Adam Spiers
6. Alan Schmitt
7. Andreas Burtzlaff
8. Andreas Leha
9. Andrew Hyatt
10. Andrzej Lichnerowicz
11. Andy Steward
12. Anthony John Day
13. Anthony Lander
14. Baoqiu Cui
15. Barry Leonard Gidden
16. Bastien Guerry
17. Benjamin Andresen
18. Bernd Grobauer
19. Bernt Hansen
20. Brian James Gough
21. Carsten Dominik
22. Charles Sebold
23. Christian Egli
24. Christian Moe
25. Christopher League
26. Christopher Miles Gray
27. Christopher Schmidt
28. Christopher Suckling
29. Dan Davison
30. Daniel M German
31. Daniel M. Hackney
32. David Arroyo Menéndez
33. David Maus
34. David O'Toole
35. Dmitry Antipov
36. Eric Abrahamsen
37. Eric S. Fraga
38. Eric Schulte
39. Erik Iverson
40. Ethan Ligon
41. Feng Shu
42. Francesco Pizzolante
43. Gary Oberbrunner
44. George Kettleborough
45. Giovanni Ridolfi
46. Grégoire Jadi (aka Daimrod)
47. Henning Dietmar Weiss
48. Ian Barton
49. Ilya Shlyakhter
50. Ippei Furuhashi
51. James TD Smith
52. Jan Böcker
53. Jarmo Hurri
54. Jason Riedy
55. Jay Kerns
56. Jeffrey Ryan Horn
57. Joel Boehland
58. John Wiegley
59. Jonas Bernoulli
60. Jonathan Leech-Pepin
61. Juan Pechiar
62. Julian Gehring
63. Julien Barnier
64. Julien Danjou
65. Justus Piater
66. Konstantin Antipin
67. Lawrence Mitchell
68. Le Wang
69. Lennart Borgman
70. Luis Anaya
71. Lukasz Stelmach
72. Madan Ramakrishnan
73. Magnus Henoch
74. Manuel Giraud
75. Martin Pohlack
76. Martyn Jago
77. Matt Lundin
78. Max Mikhanosha
79. Michael Brand
80. Michael Gauland
81. Michael Sperber
82. Miguel A. Figueroa-Villanueva
83. Mikael Fornius
84. Moritz Ulrich
85. Nathan Neff
86. Nicholas Dokos
87. Nicolas Goaziou
88. Nicolas Richard
89. Niels Giessen
90. Noorul Islam K M
91. Paul Sexton
92. Peter Jones
93. Phil Jackson
94. Philip Rooke
95. Pieter Praet
96. Piotr Zielinski
97. Puneeth Chaganti
98. Rasmus Pank Roulund
99. Richard Klinda
100. Richard Riley
101. Rick Frankel
102. Russel Adams
103. Ryo Takaishi
104. Sacha Chua
105. Samuel Loury
106. Sebastian Rose
107. Sebastien Vauban
108. Sergey Litvinov
109. Seweryn Kokot
110. Stephen Eglen
111. Suvayu Ali
112. T.F. Torrey
113. Tassilo Horn
114. Thomas Baumann
115. Thomas Holst
116. Thomas S. Dye
117. Thorsten Jolitz
118. Tim Burt
119. Toby Cubitt
120. Tokuya Kameshima
121. Tom Breton
122. Tomas Hlavaty
123. Tony Day
124. Ulf Stegemann
125. Vitalie Spinu
126. Yann Hodique
127. Yasushi Shoji
128. Zhang Weize

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603%2540oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Andy Lutomirski
2. Aurélien Aptel
3. Gustav Wikström
4. Ivan Vilata i Balaguer
5. John Foerch
6. Kodi Arfer
7. Muchenxuan Tong
8. Myles English
9. Rafael Laboissiere
10. Robert P. Goldman
11. Yoshinari Nomura

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
