#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions

Every contribution to Org is very welcome.  Here is a list of areas
where your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make
  sure you have read this section of Org's manual: [[http://orgmode.org/org.html#Feedback][Feedback]] You can
  also read this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *feature requests* -- Org is already mature, but new
  ideas keep popping up.  If you want to request a feature, it might
  be a good idea to have a look at the current [[http://orgmode.org/worg/org-issues.html][Issue tracking file]]
  which captures both bug reports and feature requests.  Or dig into
  the mailing list for possible previous discussions about your idea.
  If you cannot find back your idea, formulate it as detailed as
  possible, if possible with examples, and send it to the mailing
  list.

- you can submit *patches* -- You can submit patches to the mailing
  list.  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for
  details.  You can run =make test= to check that your patch does
  not introduce new bugs.

  If your patch is against a file that is part of Emacs, then your
  total contribution (all patches you submit) should change /less than
  15 lines/ (See the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE file in GNU Emacs]].)  If you
  contribute more, you have to assign the copyright of your
  contribution to the Free Software Foundation (see below).

- you can submit Org *add-ons* -- there are many Org add-ons.
  - The best way is to submit your code to [[file:org-mailing-list.org][the mailing list]] to discuss
    it with people.
  - If it is useful, you might consider contributing it to the
    =lisp/contrib/= directory in the git repository. It will be
    reviewed, and if it passes, it will be included. Ask help from
    [[file:org-people.org][Eric Schulte]] for this step. The =lisp/contrib/= directory is
    somehow relaxed: it is not distributed with Emacs, and does not
    require a formal copyright assignment.
  - If you decide to sign the [[*Copyright issues when contributing to
    Emacs Org mode][assignment contract with the FSF]], we
    might include your contribution in the distribution, and then in
    GNU Emacs.

- you can submit material to the *Worg* website -- This website is
  made of Org files that you can contribute to.  Learn what Worg is
  [[file:worg-about.org][about]] and how to contribute to it [[file:worg-git.org][through git]].

* Copyright issues when contributing to Emacs Org mode

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[http://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
 ;; GNU Emacs is free software: you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation, either version 3 of the License, or
 ;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the
repository will be accepted, as well as very minor changes (so-called
/tiny changes/) to core files.  We will ask you to sign FSF papers at
the moment we attempt to move a =contrib/= file into the Org core, or
into Emacs.

* For Org developers
  :PROPERTIES:
  :CUSTOM_ID: devs
  :END:

1. Send your public key to [[mailto:bzgATgnuDOTorg][Bastien]]

2. Wait for confirmation that your public key has been added to the
   server.

3. Clone =org-mode.git= repository like this:
   : ~$ git clone orgmode@orgmode.org:org-mode.git

4. Commit your changes.

5. Run =make test=

6. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch for
them.

* For Org contributors: preferred way of submitting patches
:PROPERTIES:
:CUSTOM_ID: patches
:END:

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs
Lisp coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be
used to make patches and send them via email -- this is perfectly fine
for major and minor changes.

When sending a patch (either using =git diff= or =git format-patch=)
please *always add a properly formatted Emacs ChangeLog entry*.  See
[[id:c526dfd7-2b0c-4b66-9deb-6e442e48708c][this section]] for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes,
you might even want to work in several steps and send each commit
separately.  Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -a -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -a -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master                # Creates two patches

  ... Then two patches for your two commits are ready to be sent to the
  list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in
your email and 2) a ChangeLog entry in the commit message (see [[id:c526dfd7-2b0c-4b66-9deb-6e442e48708c][this
section]] on how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by
other people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog
entry to be applied.  If your patch looks good to you, it's always
better to send a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =http://orgmode.org/w/org-mode.git=.
   You can clone using any of the commands below.

   : git clone git://orgmode.org/org-mode.git
   : git clone http://orgmode.org/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the http url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/, /repo.or.cz/, or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories, in particular
   the org-mode master at /repo.or.cz/.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new
features before sending the patch series to the mailing list, but the
patches remain the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
  :PROPERTIES:
  :ID:       c526dfd7-2b0c-4b66-9deb-6e442e48708c
  :END:

We have decided to no longer keep a ChangeLog file to record changes
to individual functions.

A commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end and does
  not start with a star.  Generally, it starts with the filename that
  has been changed, followed by a colon.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start.  A ChangeLog entry
  looks like [[http://orgmode.org/cgit.cgi/org-mode.git/commit/?id%3Dd49957ef021e256f19092c907d127390d39ec1ed][this]]:

  : * org-timer.el (org-timer-cancel-timer, org-timer-stop): Enhance
  : message.
  : (org-timer-set-timer): Use the number of minutes in the Effort
  : property as the default timer value. Three prefix arguments will
  : ignore the Effort value property.

- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.

- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

- Variables and functions names are quoted like `this' (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  org-capture.el: Fix the case of using a template file

  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.

  ,* doc/org.texi (Capture): Document using a file for a template.

  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.

  Modified from a patch proposal by Johan Friis.

  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, the ChangeLog for such entries
are easily produced by pressing =C= in the diff listing.

Another option to produce the entries is to use `C-x 4 a' in the
changed function or in the diff listing.  This will create entries in
the ChangeLog file, and you can then cut and paste these to the commit
message and remove the indentation.

* Copyrighted contributors to Org mode

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Abdó Roig-Maranges
3. Achim Gratz
4. Adam Elliott
5. Adam Spiers
6. Alan Schmitt
7. Alexey Lebedeff
8. Andreas Burtzlaff
9. Andreas Leha
10. Andrew Hyatt
11. Andrzej Lichnerowicz
12. Andy Steward
13. Anthony John Day
14. Anthony Lander
15. Arni Magnusson
16. Arun Isaac
17. Baoqiu Cui
18. Barry Leonard Gidden
19. Bastien Guerry
20. Benjamin Andresen
21. Bernd Grobauer
22. Bernt Hansen
23. Brian James Gough
24. Brice Waegenire
25. Carsten Dominik
26. Charles Berry
27. Charles Sebold
28. Christian Egli
29. Christian Moe
30. Christopher League
31. Christopher Miles Gray
32. Christopher Schmidt
33. Christopher Suckling
34. Clément Pit--Claudel
35. Dan Davison
36. Daniel M German
37. Daniel M. Hackney
38. David Arroyo Menéndez
39. David Maus
40. David O'Toole
41. Dieter Schoen
42. Dima Kogan
43. Dmitry Antipov
44. Don March
45. Eric Abrahamsen
46. Eric S. Fraga
47. Eric Schulte
48. Erik Hetzner
49. Erik Iverson
50. Ethan Ligon
51. Feng Shu
52. Francesco Pizzolante
53. Gary Oberbrunner
54. Georg Lehner
55. George Kettleborough
56. Giovanni Ridolfi
57. Grégoire Jadi (aka Daimrod)
58. Gustav Wikström
59. Henning Dietmar Weiss
60. Ian Barton
61. Ian Kelling
62. Ilya Shlyakhter
63. Ippei Furuhashi
64. James TD Smith
65. Jan Böcker
66. Jan Malakhovski
67. Jarmo Hurri
68. Jason Riedy
69. Jay Kerns
70. Jeffrey Ryan Horn
71. Joe Corneli
72. Joel Boehland
73. John Kitchin
74. John Wiegley
75. Jon Snader
76. Jonas Bernoulli
77. Jonathan Leech-Pepin
78. Juan Pechiar
79. Julian Gehring
80. Julien Barnier
81. Julien Danjou
82. Justin Gordon
83. Justus Piater
84. Karl Fogel
85. Kaushal Modi
86. Kodi Arfer
87. Konstantin Antipin
88. Kyle Meyer
89. Lawrence Mitchell
90. Le Wang
91. Lele Gaifax
92. Lennart Borgman
93. Leonard Avery Randall
94. Luis Anaya
95. Lukasz Stelmach
96. Madan Ramakrishnan
97. Magnus Henoch
98. Manuel Giraud
99. Marcin Borkowski
100. Marco Wahl
101. Martin Pohlack
102. Martyn Jago
103. Matt Lundin
104. Max Mikhanosha
105. Michael Albinus
106. Michael Brand
107. Michael Gauland
108. Michael Sperber
109. Miguel A. Figueroa-Villanueva
110. Mikael Fornius
111. Moritz Ulrich
112. Nathan Neff
113. Nicholas Dokos
114. Nicolas Berthier
115. Nicolas Goaziou
116. Nicolas Richard
117. Niels Giessen
118. Nikolai Weibull
119. Noorul Islam K M
120. Oleh Krehel
121. Paul Sexton
122. Pedro Alexandre Marcelino Costa da Silva
123. Peter Jones
124. Phil Hudson
125. Phil Jackson
126. Philip Rooke
127. Pieter Praet
128. Piotr Zielinski
129. Puneeth Chaganti
130. Rafael Laboissière
131. Rainer M Krug
132. Rasmus Pank Roulund
133. Richard Kim
134. Richard Klinda
135. Richard Riley
136. Rick Frankel
137. Russel Adams
138. Ryo Takaishi
139. Rüdiger Sonderfeld
140. Sacha Chua
141. Samuel Loury
142. Sebastian Rose
143. Sebastien Vauban
144. Sergey Litvinov
145. Seweryn Kokot
146. Stephen Eglen
147. Steven Rémot
148. Suvayu Ali
149. T.F. Torrey
150. Tassilo Horn
151. Thierry Banel
152. Thomas Baumann
153. Thomas Holst
154. Thomas S. Dye
155. Thorsten Jolitz
156. Tim Burt
157. Titus von der Malsburg
158. Toby Cubitt
159. Tokuya Kameshima
160. Tom Breton
161. Tomas Hlavaty
162. Tony Day
163. Trevor Murphy
164. Ulf Stegemann
165. Vitalie Spinu
166. Yann Hodique
167. Yasushi Shoji
168. Yoshinari Nomura
169. Yuri D. Lensky
170. Zhang Weize
171. Zhuo Qingliang (Killy Draw)

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Brian Carlson [2016-05-24 Tue]
- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603@oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Aman Yang
2. Andrew Burgess
3. Andy Lutomirski
4. Anthony Cowley
5. Arun Persaud
6. Aurélien Aptel
7. Austin Walker
8. Brian Carlson
9. Chunyang Xu
10. Craig Tanis
11. Derek Feichtinger
12. Federico Beffa
13. Feng Zhou
14. Fernando Varesi
15. Florian Beck
16. Greg Tucker-Kellogg
17. Gregor Zattler
18. Hiroshi Saito
19. Ivan Vilata i Balaguer
20. Jacob Gerlach
21. Jacob Matthews
22. Jan Seeger
23. Jason Furtney
24. Joe Hirn
25. John Foerch
26. Jon Miller
27. Jonas Hörsch
28. Joost Diepenmaat
29. Kodi Arfer
30. Konstantin Kliakhandler
31. Leslie Harlley Watter
32. Luke Amdor
33. Mario Frasca
34. Matthew Gidden
35. Matthew MacLean
36. Michael O'Connor
37. Michael Strey
38. Michael Weylandt
39. Mike McLean
40. Miro Bezjak
41. Moritz Kiefer
42. Muchenxuan Tong
43. Myles English
44. Myq Larson
45. Nathaniel Flath
46. Nick Gunn
47. Peter Feigl
48. Peter Moresi
49. Philip (Pip Cet)
50. Richard Hansen
51. Richard Lawrence
52. Richard Y. Kim (Kim)
53. Robert P. Goldman
54. Roberto Huelga
55. Ruben Maher
56. Sami Airaksinen
57. Saulius Menkevičius
58. Sergey Gordienko
59. Stardiviner
60. Stefan-W. Hahn
61. Sylvain Chouleur
62. Teika Kazura
63. Thibault Marin
64. Thierry Pellé
65. Thomas Alexander Gerds
66. Tom Hinton
67. Vicente Vera Parra
68. Viktor Rosenfeld
69. Vladimir Lomov
70. Xi Shen
71. York Zhao
72. Zane D. Purvis

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
