#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions
:PROPERTIES:
:CUSTOM_ID: types-of-contributions
:END:

Every contribution to Org is very welcome.  Here is a list of areas
where your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make
  sure you have read this section of Org's manual: [[http://orgmode.org/org.html#Feedback][Feedback]] You can
  also read this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *feature requests* -- Org is already mature, but new
  ideas keep popping up.  If you want to request a feature, it might
  be a good idea to have a look at the current [[http://orgmode.org/worg/org-issues.html][Issue tracking file]]
  which captures both bug reports and feature requests.  Or dig into
  the mailing list for possible previous discussions about your idea.
  If you cannot find back your idea, formulate it as detailed as
  possible, if possible with examples, and send it to the mailing
  list.

- you can submit *patches* -- You can submit patches to the mailing
  list.  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for
  details.  You can run =make test= to check that your patch does
  not introduce new bugs.

  If your patch is against a file that is part of Emacs, then your
  total contribution (all patches you submit) should change /less than
  15 lines/ (See the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE file in GNU Emacs]].)  If you
  contribute more, you have to assign the copyright of your
  contribution to the Free Software Foundation (see below).

- you can submit Org *add-ons* -- there are many Org add-ons.
  - The best way is to submit your code to [[file:org-mailing-list.org][the mailing list]] to discuss
    it with people.
  - If it is useful, you might consider contributing it to the
    =lisp/contrib/= directory in the git repository. It will be
    reviewed, and if it passes, it will be included. Ask help from
    [[file:org-people.org][Eric Schulte]] for this step. The =lisp/contrib/= directory is
    somehow relaxed: it is not distributed with Emacs, and does not
    require a formal copyright assignment.
  - If you decide to sign the [[*Copyright issues when contributing to
    Emacs Org mode][assignment contract with the FSF]], we
    might include your contribution in the distribution, and then in
    GNU Emacs.

- you can submit material to the *Worg* website -- This website is
  made of Org files that you can contribute to.  Learn what Worg is
  [[file:worg-about.org][about]] and how to contribute to it [[file:worg-git.org][through git]].

* Copyright issues when contributing to Emacs Org mode
:PROPERTIES:
:CUSTOM_ID: copyright-issues
:END:

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[http://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
 ;; GNU Emacs is free software: you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation, either version 3 of the License, or
 ;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the
repository will be accepted, as well as very minor changes (so-called
/tiny changes/) to core files.  We will ask you to sign FSF papers at
the moment we attempt to move a =contrib/= file into the Org core, or
into Emacs.

* For Org developers
  :PROPERTIES:
  :CUSTOM_ID: devs
  :END:

1. Send your public key to [[mailto:bzgATgnuDOTorg][Bastien]]

2. Wait for confirmation that your public key has been added to the
   server.

3. Clone =org-mode.git= repository like this:
   : ~$ git clone orgmode@orgmode.org:org-mode.git

4. Commit your changes.

5. Run =make test=

6. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch for
them.

* For Org contributors: preferred way of submitting patches
:PROPERTIES:
:CUSTOM_ID: patches
:END:

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs
Lisp coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be
used to make patches and send them via email -- this is perfectly fine
for major and minor changes.

When sending a patch (either using =git diff= or =git format-patch=)
please *always add a properly formatted Emacs ChangeLog entry*.  See
[[#commit-messages][this section]] for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes,
you might even want to work in several steps and send each commit
separately.  Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -a -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -a -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master                # Creates two patches

  ... Then two patches for your two commits are ready to be sent to the
  list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in
your email and 2) a ChangeLog entry in the commit message (see [[#commit-messages][this section]] on how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by
other people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog
entry to be applied.  If your patch looks good to you, it's always
better to send a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =http://orgmode.org/w/org-mode.git=.
   You can clone using any of the commands below.

   : git clone git://orgmode.org/org-mode.git
   : git clone http://orgmode.org/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the http url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/, /repo.or.cz/, or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories, in particular
   the org-mode master at /repo.or.cz/.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new
features before sending the patch series to the mailing list, but the
patches remain the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
:PROPERTIES:
:CUSTOM_ID: commit-messages
:END:

We have decided to no longer keep a ChangeLog file to record changes
to individual functions.

A commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end and does
  not start with a star.  Generally, it starts with the filename that
  has been changed, followed by a colon.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start.  A ChangeLog entry
  looks like [[http://orgmode.org/cgit.cgi/org-mode.git/commit/?id%3Dd49957ef021e256f19092c907d127390d39ec1ed][this]]:

  : * org-timer.el (org-timer-cancel-timer, org-timer-stop): Enhance
  : message.
  : (org-timer-set-timer): Use the number of minutes in the Effort
  : property as the default timer value. Three prefix arguments will
  : ignore the Effort value property.

- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.

- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

- Variables and functions names are quoted like `this' (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  org-capture.el: Fix the case of using a template file

  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.

  ,* doc/org.texi (Capture): Document using a file for a template.

  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.

  Modified from a patch proposal by Johan Friis.

  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, the ChangeLog for such entries
are easily produced by pressing =C= in the diff listing.

Another option to produce the entries is to use `C-x 4 a' in the
changed function or in the diff listing.  This will create entries in
the ChangeLog file, and you can then cut and paste these to the commit
message and remove the indentation.

- Further reference: [[http://git.savannah.gnu.org/cgit/emacs.git/plain/CONTRIBUTE][Contribution guide from Emacs repo]]

* Copyrighted contributors to Org mode
:PROPERTIES:
:CUSTOM_ID: copyrighted-contributors
:END:

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Abdó Roig-Maranges
3. Achim Gratz
4. Adam Elliott
5. Adam Spiers
6. Alan Schmitt
7. Alexey Lebedeff
8. Andreas Burtzlaff
9. Andreas Leha
10. Andrew Hyatt
11. Andrzej Lichnerowicz
12. Andy Steward
13. Anthony John Day
14. Anthony Lander
15. Arni Magnusson
16. Arun Isaac
17. Baoqiu Cui
18. Barry Leonard Gidden
19. Bastien Guerry
20. Benjamin Andresen
21. Bernd Grobauer
22. Bernt Hansen
23. Brian James Gough
24. Brice Waegenire
25. Carsten Dominik
26. Charles Berry
27. Charles Sebold
28. Christian Egli
29. Christian Garbs
30. Christian Moe
31. Christopher League
32. Christopher Miles Gray
33. Christopher Schmidt
34. Christopher Suckling
35. Clément Pit--Claudel
36. Dan Davison
37. Daniel M German
38. Daniel M. Hackney
39. David Arroyo Menéndez
40. David Maus
41. David O'Toole
42. Dieter Schoen
43. Dima Kogan
44. Dmitry Antipov
45. Don March
46. Eric Abrahamsen
47. Eric S. Fraga
48. Eric Schulte
49. Erik Hetzner
50. Erik Iverson
51. Ethan Ligon
52. Feng Shu
53. Florian Lindner
54. Francesco Pizzolante
55. Frederick Giasson
56. Gary Oberbrunner
57. Georg Lehner
58. George Kettleborough
59. Giovanni Ridolfi
60. Grégoire Jadi (aka Daimrod)
61. Gustav Wikström
62. Henning Dietmar Weiss
63. Ian Barton
64. Ian Kelling
65. Ilya Shlyakhter
66. Ippei Furuhashi
67. Jake Romer
68. James TD Smith
69. Jan Böcker
70. Jan Malakhovski
71. Jarmo Hurri
72. Jason Riedy
73. Jay Kerns
74. Jeffrey Ryan Horn
75. Joe Corneli
76. Joel Boehland
77. John Kitchin
78. John Wiegley
79. Jon Snader
80. Jonas Bernoulli
81. Jonathan Leech-Pepin
82. José L. Doménech
83. Juan Pechiar
84. Julian Gehring
85. Julien Barnier
86. Julien Danjou
87. Justin Gordon
88. Justus Piater
89. Karl Fogel
90. Kaushal Modi
91. Kodi Arfer
92. Konstantin Antipin
93. Kyle Meyer
94. Lambda Coder
95. Lawrence Mitchell
96. Le Wang
97. Lele Gaifax
98. Lennart Borgman
99. Leonard Avery Randall
100. Luis Anaya
101. Lukasz Stelmach
102. Madan Ramakrishnan
103. Magnus Henoch
104. Manuel Giraud
105. Marcin Borkowski
106. Marco Wahl
107. Martin Pohlack
108. Martyn Jago
109. Matt Lundin
110. Max Mikhanosha
111. Michael Albinus
112. Michael Brand
113. Michael Gauland
114. Michael Sperber
115. Miguel A. Figueroa-Villanueva
116. Mikael Fornius
117. Moritz Ulrich
118. Nathan Neff
119. Nathaniel Flath
120. Nicholas Dokos
121. Nicolas Berthier
122. Nicolas Goaziou
123. Nicolas Richard
124. Niels Giessen
125. Nikolai Weibull
126. Noorul Islam K M
127. Oleh Krehel
128. Paul Sexton
129. Pedro Alexandre Marcelino Costa da Silva
130. Peter Jones
131. Phil Hudson
132. Phil Jackson
133. Philip Rooke
134. Pieter Praet
135. Piotr Zielinski
136. Puneeth Chaganti
137. Rafael Laboissière
138. Rainer M Krug
139. Rasmus Pank Roulund
140. Richard Kim
141. Richard Klinda
142. Richard Riley
143. Rick Frankel
144. Russel Adams
145. Ryo Takaishi
146. Rüdiger Sonderfeld
147. Sacha Chua
148. Samuel Loury
149. Sebastian Reuße
150. Sebastian Rose
151. Sebastien Vauban
152. Sergey Litvinov
153. Seweryn Kokot
154. Simon Michael
155. Stephen Eglen
156. Steven Rémot
157. Suvayu Ali
158. T.F. Torrey
159. Tassilo Horn
160. Thibault Marin
161. Thierry Banel
162. Thomas Baumann
163. Thomas Holst
164. Thomas S. Dye
165. Thorsten Jolitz
166. Tim Burt
167. Titus von der Malsburg
168. Toby Cubitt
169. Tokuya Kameshima
170. Tom Breton
171. Tomas Hlavaty
172. Tony Day
173. Trevor Murphy
174. Ulf Stegemann
175. Vitalie Spinu
176. Yann Hodique
177. Yasushi Shoji
178. Yoshinari Nomura
179. Yuri D. Lensky
180. Zhang Weize
181. Zhuo Qingliang (Killy Draw)

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Adam Porter [2017-08-08 Tue]
- Brian Carlson [2016-05-24 Tue]
- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603@oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Aaron Jensen
2. Adam Aviv
3. Alex Branham
4. Allen Li
5. Aman Yang
6. Andrew Burgess
7. Andy Lutomirski
8. Anthony Cowley
9. Arun Persaud
10. Aurélien Aptel
11. Austin Walker
12. Axel Kielhorn
13. Brian Carlson
14. Chunyang Xu
15. Craig Tanis
16. Derek Feichtinger
17. Eduardo Bellani
18. Eric Danan
19. Federico Beffa
20. Feng Zhou
21. Fernando Varesi
22. Florian Beck
23. Francesco Montanari
24. Greg Tucker-Kellogg
25. Gregor Zattler
26. Hiroshi Saito
27. Ivan Vilata i Balaguer
28. Jacob Gerlach
29. Jacob Matthews
30. Jakob Lombacher
31. Jan Seeger
32. Jan Seeger
33. Jason Furtney
34. Jay Kamat
35. Jeff Larson
36. Joe Hirn
37. John Foerch
38. Jon Miller
39. Jonas Hörsch
40. Joost Diepenmaat
41. Kodi Arfer
42. Konstantin Kliakhandler
43. Leslie Harlley Watter
44. Lixin Chin
45. Luke Amdor
46. Marc Ihm
47. Mario Frasca
48. Mario Martelli
49. Marshall Flax
50. Martin Vuk
51. Matt Price
52. Matthew Gidden
53. Matthew MacLean
54. Michael O'Connor
55. Michael Strey
56. Michael Welle
57. Michael Weylandt
58. Michaël Cadilhac
59. Mike McLean
60. Miro Bezjak
61. Moritz Kiefer
62. Muchenxuan Tong
63. Myles English
64. Myq Larson
65. Nathaniel Nicandro
66. Nick Gunn
67. Peter Feigl
68. Peter Moresi
69. Philip (Pip Cet)
70. Renato Ferreira
71. Richard Hansen
72. Richard Lawrence
73. Richard Y. Kim (Kim)
74. Robert P. Goldman
75. Roberto Huelga
76. Ruben Maher
77. Sami Airaksinen
78. Saulius Menkevičius
79. Sebastien Le Maguer
80. Sergey Gordienko
81. Stardiviner
82. Stefan-W. Hahn
83. Stig Brautaset
84. Sylvain Chouleur
85. Teika Kazura
86. Thierry Pellé
87. Thomas Alexander Gerds
88. Thomas Rikl
89. Tom Hinton
90. Vicente Vera Parra
91. Viktor Rosenfeld
92. Vladimir Lomov
93. Wojciech Gac
94. Xi Shen
95. York Zhao
96. Zane D. Purvis
97. Иван Трусков

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
