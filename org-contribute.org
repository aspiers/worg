#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions
:PROPERTIES:
:CUSTOM_ID: types-of-contributions
:END:

Every contribution to Org is very welcome.  Here is a list of areas
where your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make
  sure you have read this section of Org's manual: [[https://orgmode.org/org.html#Feedback][Feedback]] You can
  also read this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *feature requests* -- Org is already mature, but new
  ideas keep popping up.  If you want to request a feature, it might
  be a good idea to have a look at the current [[https://orgmode.org/worg/org-issues.html][Issue tracking file]]
  which captures both bug reports and feature requests.  Or dig into
  the mailing list for possible previous discussions about your idea.
  If you cannot find back your idea, formulate it as detailed as
  possible, if possible with examples, and send it to the mailing
  list.

- you can submit *patches* -- You can submit patches to the mailing
  list.  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for
  details.  You can run =make test= to check that your patch does
  not introduce new bugs.

  If your patch is against a file that is part of Emacs, then your
  total contribution (all patches you submit) should change /less than
  15 lines/ (See the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE file in GNU Emacs]].)  If you
  contribute more, you have to assign the copyright of your
  contribution to the Free Software Foundation (see below).

- you can submit Org *add-ons* -- there are many Org add-ons.
  - The best way is to submit your code to [[file:org-mailing-list.org][the mailing list]] to discuss
    it with people.
  - If it is useful, you might consider contributing it to the
    =lisp/contrib/= directory in the git repository. It will be
    reviewed, and if it passes, it will be included. Ask help from
    [[file:org-people.org][Eric Schulte]] for this step. The =lisp/contrib/= directory is
    somehow relaxed: it is not distributed with Emacs, and does not
    require a formal copyright assignment.
  - If you decide to sign the [[*Copyright issues when contributing to
    Emacs Org mode][assignment contract with the FSF]], we
    might include your contribution in the distribution, and then in
    GNU Emacs.

- you can submit material to the *Worg* website -- This website is
  made of Org files that you can contribute to.  Learn what Worg is
  [[file:worg-about.org][about]] and how to contribute to it [[file:worg-git.org][through git]].

* Copyright issues when contributing to Emacs Org mode
:PROPERTIES:
:CUSTOM_ID: copyright-issues
:END:

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[https://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
 ;; GNU Emacs is free software: you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation, either version 3 of the License, or
 ;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the
repository will be accepted, as well as very minor changes (so-called
/tiny changes/) to core files.  We will ask you to sign FSF papers at
the moment we attempt to move a =contrib/= file into the Org core, or
into Emacs.

* For Org developers
  :PROPERTIES:
  :CUSTOM_ID: devs
  :END:

1. Send your public key to [[mailto:bzgATgnuDOTorg][Bastien]]

2. Wait for confirmation that your public key has been added to the
   server.

3. Clone =org-mode.git= repository like this:
   : ~$ git clone orgmode@orgmode.org:org-mode.git

4. Commit your changes.

5. Run =make test=

6. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch for
them.

* For Org contributors: preferred way of submitting patches
:PROPERTIES:
:CUSTOM_ID: patches
:END:

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs
Lisp coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be
used to make patches and send them via email -- this is perfectly fine
for major and minor changes.

When sending a patch (either using =git diff= or =git format-patch=)
please *always add a properly formatted Emacs ChangeLog entry*.  See
[[#commit-messages][this section]] for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes,
you might even want to work in several steps and send each commit
separately.  Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -a -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -a -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master                # Creates two patches

  ... Then two patches for your two commits are ready to be sent to the
  list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in
your email and 2) a ChangeLog entry in the commit message (see [[#commit-messages][this section]] on how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by
other people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog
entry to be applied.  If your patch looks good to you, it's always
better to send a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =https://code.orgmode.org/bzg/org-mode=.
   You can clone using any of the commands below.

   : git clone git@code.orgmode.org:bzg/org-mode.git
   : git clone https://code.orgmode.org/bzg/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the https url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/ or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new
features before sending the patch series to the mailing list, but the
patches remain the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
:PROPERTIES:
:CUSTOM_ID: commit-messages
:END:

We have decided to no longer keep a ChangeLog file to record changes
to individual functions.

A commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end and does
  not start with a star.  Generally, it starts with the filename that
  has been changed, followed by a colon.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start.  A ChangeLog entry
  looks like [[https://orgmode.org/cgit.cgi/org-mode.git/commit/?id%3Dd49957ef021e256f19092c907d127390d39ec1ed][this]]:

  : * org-timer.el (org-timer-cancel-timer, org-timer-stop): Enhance
  : message.
  : (org-timer-set-timer): Use the number of minutes in the Effort
  : property as the default timer value. Three prefix arguments will
  : ignore the Effort value property.

- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.

- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

- Variables and functions names are quoted like `this' (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  org-capture.el: Fix the case of using a template file

  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.

  ,* doc/org.texi (Capture): Document using a file for a template.

  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.

  Modified from a patch proposal by Johan Friis.

  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, the ChangeLog for such entries
are easily produced by pressing =C= in the diff listing.

Another option to produce the entries is to use `C-x 4 a' in the
changed function or in the diff listing.  This will create entries in
the ChangeLog file, and you can then cut and paste these to the commit
message and remove the indentation.

- Further reference: [[http://git.savannah.gnu.org/cgit/emacs.git/plain/CONTRIBUTE][Contribution guide from Emacs repo]]

* Copyrighted contributors to Org mode
:PROPERTIES:
:CUSTOM_ID: copyrighted-contributors
:END:

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Abdó Roig-Maranges
3. Achim Gratz
4. Adam Elliott
5. Adam Porter
6. Adam Spiers
7. Alan Schmitt
8. Alex Branham
9. Alexey Lebedeff
10. Andreas Burtzlaff
11. Andreas Leha
12. Andrew Hyatt
13. Andrzej Lichnerowicz
14. Andy Steward
15. Anthony John Day
16. Anthony Lander
17. Arni Magnusson
18. Arun Isaac
19. Baoqiu Cui
20. Barry Leonard Gidden
21. Bastien Guerry
22. Benjamin Andresen
23. Bernd Grobauer
24. Bernt Hansen
25. Bjarte Johansen
26. Brian James Gough
27. Brice Waegenire
28. Carsten Dominik
29. Charles Berry
30. Charles Sebold
31. Christian Egli
32. Christian Garbs
33. Christian Moe
34. Christopher League
35. Christopher Miles Gray
36. Christopher Schmidt
37. Christopher Suckling
38. Clément Pit--Claudel
39. Dan Davison
40. Daniel M German
41. Daniel M. Hackney
42. David Arroyo Menéndez
43. David Maus
44. David O'Toole
45. Dieter Schoen
46. Dima Kogan
47. Dmitry Antipov
48. Don March
49. Eric Abrahamsen
50. Eric Schulte
51. Eric S. Fraga
52. Erik Hetzner
53. Erik Iverson
54. Ethan Ligon
55. Feng Shu
56. Florian Lindner
57. Francesco Pizzolante
58. Frederick Giasson
59. Gary Oberbrunner
60. George Kettleborough
61. Georg Lehner
62. Giovanni Ridolfi
63. Grégoire Jadi (aka Daimrod)
64. Gustav Wikström
65. Henning Dietmar Weiss
66. Ian Barton
67. Ian Dunn
68. Ian Kelling
69. Ilya Shlyakhter
70. Ippei Furuhashi
71. Jack Kamm
72. Jake Romer
73. James TD Smith
74. Jan Böcker
75. Jan Malakhovski
76. Jarmo Hurri
77. Jason Riedy
78. Jay Kamat
79. Jay Kerns
80. Jeffrey Ryan Horn
81. Joe Corneli
82. Joel Boehland
83. John Kitchin
84. John Wiegley
85. Jonas Bernoulli
86. Jonathan Leech-Pepin
87. Jon Snader
88. José L. Doménech
89. Juan Pechiar
90. Julian Gehring
91. Julien Barnier
92. Julien Danjou
93. Justin Gordon
94. Justus Piater
95. Karl Fogel
96. Kaushal Modi
97. Kodi Arfer
98. Konstantin Antipin
99. Kyle Meyer
100. Lambda Coder
101. Lawrence Mitchell
102. Lele Gaifax
103. Lennart Borgman
104. Leonard Avery Randall
105. Le Wang
106. Luis Anaya
107. Lukasz Stelmach
108. Madan Ramakrishnan
109. Magnus Henoch
110. Manuel Giraud
111. Marcin Borkowski
112. Marco Wahl
113. Martin Pohlack
114. Martyn Jago
115. Matt Lundin
116. Max Mikhanosha
117. Michael Albinus
118. Michael Brand
119. Michael Gauland
120. Michael Sperber
121. Miguel A. Figueroa-Villanueva
122. Mikael Fornius
123. Moritz Ulrich
124. Nathaniel Flath
125. Nathan Neff
126. Neil Jerram
127. Nicholas Dokos
128. Nicolas Berthier
129. Nicolas Dudebout
130. Nicolas Goaziou
131. Nicolas Richard
132. Niels Giessen
133. Nikolai Weibull
134. Noorul Islam K M
135. Oleh Krehel
136. Paul Sexton
137. Pedro Alexandre Marcelino Costa da Silva
138. Peter Jones
139. Phil Hudson
140. Philip Rooke
141. Phil Jackson
142. Pierre Téchoueyres
143. Pieter Praet
144. Piotr Zielinski
145. Puneeth Chaganti
146. Rafael Laboissière
147. Rainer M Krug
148. Rasmus Pank Roulund
149. Richard Kim
150. Richard Klinda
151. Richard Riley
152. Rick Frankel
153. Rüdiger Sonderfeld
154. Russel Adams
155. Ryo Takaishi
156. Sacha Chua
157. Samuel Loury
158. Sebastian Reuße
159. Sebastian Rose
160. Sebastien Vauban
161. Sergey Litvinov
162. Seweryn Kokot
163. Simon Michael
164. Stardiviner
165. Stephen Eglen
166. Steven Rémot
167. Suvayu Ali
168. Tassilo Horn
169. T.F. Torrey
170. Thibault Marin
171. Thierry Banel
172. Thomas Baumann
173. Thomas Holst
174. Thomas S. Dye
175. Thorsten Jolitz
176. Tim Burt
177. Tim Landscheidt
178. Titus von der Malsburg
179. Toby Cubitt
180. Tokuya Kameshima
181. Tomas Hlavaty
182. Tom Breton
183. Tony Day
184. Trevor Murphy
185. Ulf Stegemann
186. Vitalie Spinu
187. Vladimir Panteleev
188. Yann Hodique
189. Yasushi Shoji
190. Yoshinari Nomura
191. Yuri D. Lensky
192. Zhang Weize
193. Zhuo Qingliang (Killy Draw)

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Brian Carlson [2016-05-24 Tue]
- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603@oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Aaron Jensen
2. Adam Aviv
3. Aliaksey Artamonau
4. Allen Li
5. Aman Yang
6. Andrew Burgess
7. Andy Lutomirski
8. Anthony Cowley
9. Arun Persaud
10. Aurélien Aptel
11. Austin Walker
12. Axel Kielhorn
13. Brian Carlson
14. Chunyang Xu
15. Craig Tanis
16. Derek Feichtinger
17. Doro Rose
18. Eduardo Bellani
19. Eric Danan
20. Federico Beffa
21. Feng Zhou
22. Fernando Varesi
23. Florian Beck
24. Francesco Montanari
25. Galen Menzel
26. Georgiy Tugai
27. Gong Qijian
28. Gregor Zattler
29. Greg Tucker-Kellogg
30. Hiroshi Saito
31. Ivan Vilata i Balaguer
32. Jack Henahan
33. Jacob Gerlach
34. Jacob Matthews
35. Jakob Lombacher
36. Jan Seeger
37. Jan Seeger
38. Jason Furtney
39. Jeff Larson
40. Joe Hirn
41. John Foerch
42. Jonas Hörsch
43. Jon Miller
44. Joost Diepenmaat
45. Jose Robins
46. Kodi Arfer
47. Konstantin Kliakhandler
48. Leslie Harlley Watter
49. Lixin Chin
50. Luke Amdor
51. Marc Ihm
52. Mario Frasca
53. Mario Martelli
54. Marshall Flax
55. Martin Šlouf
56. Martin Vuk
57. Matthew Gidden
58. Matthew MacLean
59. Matt Price
60. Michaël Cadilhac
61. Michael O'Connor
62. Michael Strey
63. Michael Welle
64. Michael Weylandt
65. Mike McLean
66. Miro Bezjak
67. Moritz Kiefer
68. Muchenxuan Tong
69. Myles English
70. Myq Larson
71. Nathaniel Nicandro
72. Nick Gunn
73. Peter Feigl
74. Peter Moresi
75. Philip (Pip Cet)
76. Renato Ferreira
77. Richard Hansen
78. Richard Lawrence
79. Richard Y. Kim (Kim)
80. Roberto Huelga
81. Robert P. Goldman
82. Ruben Maher
83. Sami Airaksinen
84. Saulius Menkevičius
85. Sebastien Le Maguer
86. Sergey Gordienko
87. Stefan-W. Hahn
88. Stig Brautaset
89. Sylvain Chouleur
90. Teika Kazura
91. Thierry Pellé
92. Thomas Alexander Gerds
93. Thomas Rikl
94. Tom Hinton
95. Vicente Vera Parra
96. Viktor Rosenfeld
97. Vladimir Lomov
98. Wojciech Gac
99. Xavier Martinez-Hidalgo
100. Xi Shen
101. York Zhao
102. Zane D. Purvis
103. Иван Трусков

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
