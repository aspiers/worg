#+OPTIONS:    H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) 
#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions

Every contribution to Org is very welcome.  Here is a list of areas where
your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make sure
  you have read this section of Org's manual: [[http://orgmode.org/org.html#Feedback][Feedback]]  You can also read
  this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *feature requests* -- Org is already mature, but new ideas
  keep popping up.  If you want to request a feature, it might be a good
  idea to have a look at the current [[http://orgmode.org/worg/org-issues.html][Issue tracking file]] which captures
  both bug reports and feature requests.  Or dig into the mailing list for
  possible previous discussions about your idea.  If you cannot find back
  your idea, formulate it as detailed as possible, if possible with
  examples, and send it to the mailing list.

- you can submit *patches* -- You can submit patches to the mailing list.
  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for details.

  If your patch is against a file that is part of Emacs, then your total
  contribution (all patches you submit) should change /less than 15 lines/
  (See the [[http://bzr.savannah.gnu.org/lh/emacs/trunk/annotate/head:/etc/CONTRIBUTE][etc/CONTRIBUTE file in GNU Emacs]].)  If you contribute more, you
  have to assign the copyright of your contribution to the Free Software
  Foundation (see below).
  
- you can submit Org *add-ons* -- there are many Org add-ons.  The best way
  is to submit your code to the mailing list to discuss it with people.  If
  it is useful, you might consider contributing it to the =CONTRIB/=
  directory in the git repository.

- you can submit material to the *Worg* website -- This website is made of
  Org files that you can contribute to.  Learn what Worg is [[file:worg-about.org][about]] and how
  to contribute to it [[file:worg-git.org][through git]].

* Copyright issues when contributing to Emacs org-mode

Org is made of many files.  Most of them are also distributed as part of
GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to include
your works in GNU Emacs to the FSF.  For this you need to complete [[http://orgmode.org/request-assign-future.txt][this
form]], send it to [[mailto:assign@gnu.org][assign@gnu.org]], and tell the Org-mode maintainer when this
process is complete.  Some people consider this a hassle.  I don't want to
discuss this in detail here - there are some good reasons for getting the
copyright registered, an example is discussed in this [[http://twit.tv/floss117][FLOSS weekly podcast]].
Furthermore, by playing according to the Emacs rules, we gain the fantastic
advantage that every version of Emacs ships with Org-mode already fully
built in.  So please consider doing this - it makes our work as maintainers
so much easier, because we can then take your patches without any
additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

* For Org developers
:PROPERTIES:
:CUSTOM_ID: devs
:END:

1. Send your public key to [[mailto:emacs-orgmode%20AT%20dunsmor%20DOT%20com][Jason Dunsmore]].
2. Wait for confirmation that your public key has been added to the server.
3. Clone =org-mode.git= repository like this:
   : ~$ git clone orgmode@orgmode.org:org-mode.git
4. Commit your changes and push them.

If you are undertaking big changes, please create a dedicated branch for
them.

* For Org contributors: preferred way of submitting patches

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/elisp/html_node/Coding-Conventions.html][GNU Emacs Lisp
coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be used
to make patches and send them via email -- this is perfectly fine for minor
changes.

** Patches get caught on patchwork

As long as these patches are formatted properly, they will be automatically
registered at [[http://patchwork.newartisans.com/project/org-mode][John Wiegley's patchwork server]] and will then be accepted,
rejected, or sent back to the author with a request for modification.

In this context, "formatted properly" means that the patches are included
either plainly in the mail text, or as text attachments (mime-type text,
subtypes "x-patch", "x-diff", or "plain").  In particular, binary types or,
even worse, "application/octet-stream" (the asinine default of some mail
programs) are *not* going to be recognized.  Please find out how to
convince your mail program to send proper attachments.  Also, if you
include the patch inline, please make sure that your mail program does not
reformat it (although there are plenty of places further down the line
where that can happen, unfortunately). If you attach the patch, then
reformatting is not a problem.

** Sending quick fixes

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

** Sending commits

For more significant changes, you might want to work in several steps and
send each commit separately.  Here is the suggested workflow

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master             # Creates two patches

  ... Then two patches for your two commits are ready to be sent to the
  list and detected by the patchwork server.
#+end_quote

Write useful commit messages: unless your change is very small, please
provide 1) a reason for it in your email and 2) a ChangeLog entry in the
commit message.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =http://orgmode.org/w/org-mode.git=

2. Create a repository that can be publicly accessed, for example on
   /GitHub/, /repo.or.cz/, or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories, in particular
   the org-mode master at /repo.or.cz/.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

* Commit messages and ChangeLog entries

We have decided to no longer keep a ChangeLog file to record changes to
individual functions.  In a modern version control system like git,
ChangeLog is duplicating information that should be in the commit message,
and it is the main cause of merge conflicts.

Instead, the change log entry should be part of the commit message.  A
commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end.
- Line 2 is an empty line
- In line 3, the ChangeLog entry should start, in a similar format as
  in the old ChangeLog files, but without the author information
  (which is part of the commit anyway).
- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.
- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

Here is an example for such a message

#+begin_example
  Capture: Fix the case of using a template file
      
  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a string
  before calling `string-match'.
  (org-capture-templates): Fix customization type.
  ,* doc/org.texi (Capture): Document using a file for a template
      
  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.
  
  Modified from a patch proposal by Johan Friis.
  
  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, The ChangeLog-like such entries are
easily made by pressing =C= in the diff listing.  Another option to make
the entries is to use `C-x 4 a' in the changed function.  This will create
entries in the ChangeLog file, and you can then cut and paste these to the
commit message and remove the indentation.

* Copyrighted contributors to Org-mode

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Adam Elliott
2. Andreas Burtzlaff
3. Andy Steward
4. Anthony Lander
5. Baoqiu Cui
6. Barry Leonard Gidden
7. Bastien Guerry
8. Benjamin Andresen
9. Bernd Grobauer
10. Bernt Hansen
11. Brian James Gough
12. Carsten Dominik
13. Charles Sebold
14. Christian Egli
15. Christopher League
16. Christopher Miles Gray
17. Christopher Suckling
18. Dan Davison
19. Daniel M German
20. Daniel M. Hackney
21. David Maus
22. David O'Toole
23. Eric S. Fraga
24. Eric Schulte
25. Erik Iverson
26. Giovanni Ridolfi
27. Ian Barton
28. James TD Smith
29. Jan Böker
30. Jason Riedy
31. Jeffrey Ryan Horn
32. Joel Boehland
33. John Wiegley
34. Juan Pechiar
35. Julian Gehring
36. Julien Barnier
37. Julien Danjou
38. Konstantin Antipin
39. Lawrence Mitchell
40. Lennart Borgman
41. Lukasz Stelmach
42. Magnus Henoch
43. Manuel Giraud
44. Martin Pohlack
45. Martyn Jago
46. Matt Lundin
47. Michael Brand
48. Michael Gauland
49. Michael Sperber
50. Miguel A. Figueroa-Villanueva
51. Mikael Fornius
52. Nathan Neff
53. Nicolas Goaziou
54. Noorul Islam K M
55. Paul Sexton
56. Peter Jones
57. Phil Jackson
58. Philip Rooke
59. Piotr Zielinski
60. Puneeth Chaganti
61. Richard Klinda
62. Richard Riley
63. Ross Patterson
64. Russel Adams
65. Sacha Chua
66. Sebastian Rose
67. Sebastien Vauban
68. Seweryn Kokot
69. Stephen Eglen
70. Tassilo Horn
71. Thomas Baumann
72. Thomas S. Dye
73. Tokuya Kameshima
74. Tom Breton
75. Tomas Hlavaty
76. Ulf Stegemann
77. Zhang Weize

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

1. Chris Gray

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Robert P. Goldman
2. Andy Lutomirski
3. Ethan Ligon

(this list may be incomplete - please help to complete it)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
