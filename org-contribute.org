#+OPTIONS:    H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) 
#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      bzg AT altern DOT org
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions

Every contribution to Org is very welcome.  Here is a list of areas where
your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make sure
  you have read this section of Org's manual: [[http://orgmode.org/org.html#Feedback][Feedback]]

- you can submit *feature requests* -- Org is already mature, but new ideas
  keep popping up.  If you want to request a feature, it might be a good
  idea to have a look at the current [[http://orgmode.org/todo.html][TODO list]] of Org, or to dig into the
  mailing list for possible previous discussions about your idea.

- you can submit *patches* -- You can submit patches to the mailing list.

  If your patch is against a file that is part of Emacs, then it won't be
  taken unless it is /less than 10 lines/ or you granted the rights on your
  works to the Free Software Foundation, Inc.
  
  If your patch is against a file that is not part of Emacs, then it might
  be taken without worrying about its length, if the patch is good.

- you can submit Org *add-ons* -- there are many Org add-ons.  The best way
  is to submit your code to the mailing list to discuss it with people.  If
  it is useful, you might consider contributing it to the =CONTRIB/=
  directory in the git repository.

- you can submit material to the *Worg* website -- This website is made of
  Org files that you can contribute to.  Learn what Worg is [[file:worg-about.org][about]] and how
  to contribute to it [[file:worg-git.org][through git]].

* Contributing to Emacs org-mode

Org is made of several files.  Those who are part of GNU Emacs are
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to include
your works in GNU Emacs to the FSF.  For this you need to complete [[http://www.cognition.ens.fr/~guerry/u/request-assign-future.txt][this
form]] and send it to [[mailto:assign@gnu.org][assign@gnu.org]].

If you want to understand /why/, please read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets
copyright assignments from contributors?]]


* Preferred way of submitting patches

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing frame work to collaborate on a project.  Git
can be used to make patches and send them via email - this is fine for
minor changes.  More more significant contributions, the best
way to submit patches is through public branches of your repository
clone.


1. Clone our git repository at =http://repo.or.cz/w/org-mode.git=

2. Create a repository that can be publicly accessed, for example on
   /GitHub/, /repo.or.cz/, or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git push add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, give the branch a name
   that relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories, in particular
   the org-mode master at /repo.or.cz/.

6. Develop your feature on the topic branch.  It is very helpful if
   you can make sure that your branch will merge cleanly into whatever
   the current origin/master is.  There are two alternative ways to
   achieve this:

   - *either* test if you branch merges cleanly with

      : git checkout -b tmp origin/master^0
      : git merge NEWTOPIC
      : git checkout master
      : git branch -d tmp

      If there are conflicts, merge /origin/master/ into your topic branch
      and try to resolve the conflicts on your side.

   - *or* keep your branch on top of origin/master by regularly using 

      : git rebase origin/master
      
      to pull all the changes made in origin/master _underneath_ our
      own changes.

7. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and that I can
   take a look.

8. When the patch is accepted, I ask you to once again to make sure
   that it will cleanly apply.  When that is done, I will fetch your
   changes and merge them.  Minor conflicts, such they always arise in
   Emacs-style /ChangeLog/ files I can of course fix while I am doing
   the merge.

9. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC



* Current contributors

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

- Konstantin Antipin
- Ian Barton
- Thomas Baumann
- Tom Breton
- Baoqiu Cui
- Sacha Chua
- Dan Davison
- Carsten Dominik
- Miguel A. Figueroa-Villanueva
- Mikael Fornius
- Daniel M German
- Bastien Guerry
- Bernt Hansen
- Tomas Hlavaty
- Tassilo Horn
- Phil Jackson
- Peter Jones
- Tokuya Kameshima
- Christopher League
- Richard Klinda
- Ross Patterson
- Jason Riedy
- Philip Rooke
- Sebastian Rose
- Eric Schulte
- Charles Sebold
- James TD Smith
- Andy Steward
- Christopher Suckling
- David O'Toole
- John Wiegley
- Piotr Zielinski
- James TD Smith

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"
Last update: 2008-02-10 @ 16:12
#+END:
