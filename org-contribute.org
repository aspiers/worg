#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions
:PROPERTIES:
:CUSTOM_ID: types-of-contributions
:END:

Every contribution to Org is very welcome.  Here is a list of areas
where your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make
  sure you have read this section of Org's manual: [[https://orgmode.org/org.html#Feedback][Feedback]] You can
  also read this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *feature requests* -- Org is already mature, but new
  ideas keep popping up.  If you want to request a feature, it might
  be a good idea to have a look at the current [[https://orgmode.org/worg/org-issues.html][Issue tracking file]]
  which captures both bug reports and feature requests.  Or dig into
  the mailing list for possible previous discussions about your idea.
  If you cannot find back your idea, formulate it as detailed as
  possible, if possible with examples, and send it to the mailing
  list.

- you can submit *patches* -- You can submit patches to the mailing
  list.  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for
  details.  You can run =make test= to check that your patch does
  not introduce new bugs.

  If your patch is against a file that is part of Emacs, then your
  total contribution (all patches you submit) should change /less than
  15 lines/ (See the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE file in GNU Emacs]].)  If you
  contribute more, you have to assign the copyright of your
  contribution to the Free Software Foundation (see below).

- you can submit Org *add-ons* -- there are many Org add-ons.
  - The best way is to submit your code to [[file:org-mailing-list.org][the mailing list]] to discuss
    it with people.
  - If it is useful, you might consider contributing it to the
    =lisp/contrib/= directory in the git repository. It will be
    reviewed, and if it passes, it will be included. Ask help from
    [[file:org-people.org][Eric Schulte]] for this step. The =lisp/contrib/= directory is
    somehow relaxed: it is not distributed with Emacs, and does not
    require a formal copyright assignment.
  - If you decide to sign the [[*Copyright issues when contributing to
    Emacs Org mode][assignment contract with the FSF]], we
    might include your contribution in the distribution, and then in
    GNU Emacs.

- you can submit material to the *Worg* website -- This website is
  made of Org files that you can contribute to.  Learn what Worg is
  [[file:worg-about.org][about]] and how to contribute to it [[file:worg-git.org][through git]].

* Copyright issues when contributing to Emacs Org mode
:PROPERTIES:
:CUSTOM_ID: copyright-issues
:END:

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[https://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
 ;; GNU Emacs is free software: you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation, either version 3 of the License, or
 ;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the
repository will be accepted, as well as very minor changes (so-called
/tiny changes/) to core files.  We will ask you to sign FSF papers at
the moment we attempt to move a =contrib/= file into the Org core, or
into Emacs.

* For Org developers
  :PROPERTIES:
  :CUSTOM_ID: devs
  :END:

1. Send your public key to [[mailto:bzgATgnuDOTorg][Bastien]]

2. Wait for confirmation that your public key has been added to the
   server.

3. Clone =org-mode.git= repository like this:
   : ~$ git clone orgmode@orgmode.org:org-mode.git

4. Commit your changes.

5. Run =make test=

6. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch for
them.

* For Org contributors: preferred way of submitting patches
:PROPERTIES:
:CUSTOM_ID: patches
:END:

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs
Lisp coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be
used to make patches and send them via email -- this is perfectly fine
for major and minor changes.

When sending a patch (either using =git diff= or =git format-patch=)
please *always add a properly formatted Emacs ChangeLog entry*.  See
[[#commit-messages][this section]] for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes,
you might even want to work in several steps and send each commit
separately.  Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -a -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -a -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master                # Creates two patches

  ... Then two patches for your two commits are ready to be sent to the
  list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in
your email and 2) a ChangeLog entry in the commit message (see [[#commit-messages][this section]] on how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by
other people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog
entry to be applied.  If your patch looks good to you, it's always
better to send a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =https://code.orgmode.org/bzg/org-mode=.
   You can clone using any of the commands below.

   : git clone git@code.orgmode.org:bzg/org-mode.git
   : git clone https://code.orgmode.org/bzg/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the https url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/, /repo.or.cz/, or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories, in particular
   the org-mode master at /repo.or.cz/.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new
features before sending the patch series to the mailing list, but the
patches remain the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
:PROPERTIES:
:CUSTOM_ID: commit-messages
:END:

We have decided to no longer keep a ChangeLog file to record changes
to individual functions.

A commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end and does
  not start with a star.  Generally, it starts with the filename that
  has been changed, followed by a colon.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start.  A ChangeLog entry
  looks like [[https://orgmode.org/cgit.cgi/org-mode.git/commit/?id%3Dd49957ef021e256f19092c907d127390d39ec1ed][this]]:

  : * org-timer.el (org-timer-cancel-timer, org-timer-stop): Enhance
  : message.
  : (org-timer-set-timer): Use the number of minutes in the Effort
  : property as the default timer value. Three prefix arguments will
  : ignore the Effort value property.

- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.

- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

- Variables and functions names are quoted like `this' (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  org-capture.el: Fix the case of using a template file

  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.

  ,* doc/org.texi (Capture): Document using a file for a template.

  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.

  Modified from a patch proposal by Johan Friis.

  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, the ChangeLog for such entries
are easily produced by pressing =C= in the diff listing.

Another option to produce the entries is to use `C-x 4 a' in the
changed function or in the diff listing.  This will create entries in
the ChangeLog file, and you can then cut and paste these to the commit
message and remove the indentation.

- Further reference: [[http://git.savannah.gnu.org/cgit/emacs.git/plain/CONTRIBUTE][Contribution guide from Emacs repo]]

* Copyrighted contributors to Org mode
:PROPERTIES:
:CUSTOM_ID: copyrighted-contributors
:END:

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Abdó Roig-Maranges
3. Achim Gratz
4. Adam Elliott
5. Adam Porter
6. Adam Spiers
7. Alan Schmitt
8. Alex Branham
9. Alexey Lebedeff
10. Andreas Burtzlaff
11. Andreas Leha
12. Andrew Hyatt
13. Andrzej Lichnerowicz
14. Andy Steward
15. Anthony John Day
16. Anthony Lander
17. Arni Magnusson
18. Arun Isaac
19. Baoqiu Cui
20. Barry Leonard Gidden
21. Bastien Guerry
22. Benjamin Andresen
23. Bernd Grobauer
24. Bernt Hansen
25. Brian James Gough
26. Brice Waegenire
27. Carsten Dominik
28. Charles Berry
29. Charles Sebold
30. Christian Egli
31. Christian Garbs
32. Christian Moe
33. Christopher League
34. Christopher Miles Gray
35. Christopher Schmidt
36. Christopher Suckling
37. Clément Pit--Claudel
38. Dan Davison
39. Daniel M German
40. Daniel M. Hackney
41. David Arroyo Menéndez
42. David Maus
43. David O'Toole
44. Dieter Schoen
45. Dima Kogan
46. Dmitry Antipov
47. Don March
48. Eric Abrahamsen
49. Eric Schulte
50. Eric S. Fraga
51. Erik Hetzner
52. Erik Iverson
53. Ethan Ligon
54. Feng Shu
55. Florian Lindner
56. Francesco Pizzolante
57. Frederick Giasson
58. Gary Oberbrunner
59. George Kettleborough
60. Georg Lehner
61. Giovanni Ridolfi
62. Grégoire Jadi (aka Daimrod)
63. Gustav Wikström
64. Henning Dietmar Weiss
65. Ian Barton
66. Ian Dunn
67. Ian Kelling
68. Ilya Shlyakhter
69. Ippei Furuhashi
70. Jack Kamm
71. Jake Romer
72. James TD Smith
73. Jan Böcker
74. Jan Malakhovski
75. Jarmo Hurri
76. Jason Riedy
77. Jay Kamat
78. Jay Kerns
79. Jeffrey Ryan Horn
80. Joe Corneli
81. Joel Boehland
82. John Kitchin
83. John Wiegley
84. Jonas Bernoulli
85. Jonathan Leech-Pepin
86. Jon Snader
87. José L. Doménech
88. Juan Pechiar
89. Julian Gehring
90. Julien Barnier
91. Julien Danjou
92. Justin Gordon
93. Justus Piater
94. Karl Fogel
95. Kaushal Modi
96. Kodi Arfer
97. Konstantin Antipin
98. Kyle Meyer
99. Lambda Coder
100. Lawrence Mitchell
101. Lele Gaifax
102. Lennart Borgman
103. Leonard Avery Randall
104. Le Wang
105. Luis Anaya
106. Lukasz Stelmach
107. Madan Ramakrishnan
108. Magnus Henoch
109. Manuel Giraud
110. Marcin Borkowski
111. Marco Wahl
112. Martin Pohlack
113. Martyn Jago
114. Matt Lundin
115. Max Mikhanosha
116. Michael Albinus
117. Michael Brand
118. Michael Gauland
119. Michael Sperber
120. Miguel A. Figueroa-Villanueva
121. Mikael Fornius
122. Moritz Ulrich
123. Nathaniel Flath
124. Nathan Neff
125. Neil Jerram
126. Nicholas Dokos
127. Nicolas Berthier
128. Nicolas Dudebout
129. Nicolas Goaziou
130. Nicolas Richard
131. Niels Giessen
132. Nikolai Weibull
133. Noorul Islam K M
134. Oleh Krehel
135. Paul Sexton
136. Pedro Alexandre Marcelino Costa da Silva
137. Peter Jones
138. Phil Hudson
139. Philip Rooke
140. Phil Jackson
141. Pierre Téchoueyres
142. Pieter Praet
143. Piotr Zielinski
144. Puneeth Chaganti
145. Rafael Laboissière
146. Rainer M Krug
147. Rasmus Pank Roulund
148. Richard Kim
149. Richard Klinda
150. Richard Riley
151. Rick Frankel
152. Rüdiger Sonderfeld
153. Russel Adams
154. Ryo Takaishi
155. Sacha Chua
156. Samuel Loury
157. Sebastian Reuße
158. Sebastian Rose
159. Sebastien Vauban
160. Sergey Litvinov
161. Seweryn Kokot
162. Simon Michael
163. Stardiviner
164. Stephen Eglen
165. Steven Rémot
166. Suvayu Ali
167. Tassilo Horn
168. T.F. Torrey
169. Thibault Marin
170. Thierry Banel
171. Thomas Baumann
172. Thomas Holst
173. Thomas S. Dye
174. Thorsten Jolitz
175. Tim Burt
176. Tim Landscheidt
177. Titus von der Malsburg
178. Toby Cubitt
179. Tokuya Kameshima
180. Tomas Hlavaty
181. Tom Breton
182. Tony Day
183. Trevor Murphy
184. Ulf Stegemann
185. Vitalie Spinu
186. Vladimir Panteleev
187. Yann Hodique
188. Yasushi Shoji
189. Yoshinari Nomura
190. Yuri D. Lensky
191. Zhang Weize
192. Zhuo Qingliang (Killy Draw)

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Brian Carlson [2016-05-24 Tue]
- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603@oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Aaron Jensen
2. Adam Aviv
3. Aliaksey Artamonau
4. Allen Li
5. Aman Yang
6. Andrew Burgess
7. Andy Lutomirski
8. Anthony Cowley
9. Arun Persaud
10. Aurélien Aptel
11. Austin Walker
12. Axel Kielhorn
13. Brian Carlson
14. Chunyang Xu
15. Craig Tanis
16. Derek Feichtinger
17. Doro Rose
18. Eduardo Bellani
19. Eric Danan
20. Federico Beffa
21. Feng Zhou
22. Fernando Varesi
23. Florian Beck
24. Francesco Montanari
25. Galen Menzel
26. Georgiy Tugai
27. Gregor Zattler
28. Greg Tucker-Kellogg
29. Hiroshi Saito
30. Ivan Vilata i Balaguer
31. Jack Henahan
32. Jacob Gerlach
33. Jacob Matthews
34. Jakob Lombacher
35. Jan Seeger
36. Jan Seeger
37. Jason Furtney
38. Jeff Larson
39. Joe Hirn
40. John Foerch
41. Jonas Hörsch
42. Jon Miller
43. Joost Diepenmaat
44. Jose Robins
45. Kodi Arfer
46. Konstantin Kliakhandler
47. Leslie Harlley Watter
48. Lixin Chin
49. Luke Amdor
50. Marc Ihm
51. Mario Frasca
52. Mario Martelli
53. Marshall Flax
54. Martin Šlouf
55. Martin Vuk
56. Matthew Gidden
57. Matthew MacLean
58. Matt Price
59. Michaël Cadilhac
60. Michael O'Connor
61. Michael Strey
62. Michael Welle
63. Michael Weylandt
64. Mike McLean
65. Miro Bezjak
66. Moritz Kiefer
67. Muchenxuan Tong
68. Myles English
69. Myq Larson
70. Nathaniel Nicandro
71. Nick Gunn
72. Peter Feigl
73. Peter Moresi
74. Philip (Pip Cet)
75. Renato Ferreira
76. Richard Hansen
77. Richard Lawrence
78. Richard Y. Kim (Kim)
79. Roberto Huelga
80. Robert P. Goldman
81. Ruben Maher
82. Sami Airaksinen
83. Saulius Menkevičius
84. Sebastien Le Maguer
85. Sergey Gordienko
86. Stefan-W. Hahn
87. Stig Brautaset
88. Sylvain Chouleur
89. Teika Kazura
90. Thierry Pellé
91. Thomas Alexander Gerds
92. Thomas Rikl
93. Tom Hinton
94. Vicente Vera Parra
95. Viktor Rosenfeld
96. Vladimir Lomov
97. Wojciech Gac
98. Xavier Martinez-Hidalgo
99. Xi Shen
100. York Zhao
101. Zane D. Purvis
102. Иван Трусков

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
