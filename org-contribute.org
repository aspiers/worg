#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions
:PROPERTIES:
:CUSTOM_ID: types-of-contributions
:END:

Every contribution to Org is very welcome.  Here is a list of areas
where your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make
  sure you have read this section of Org's manual: [[http://orgmode.org/org.html#Feedback][Feedback]] You can
  also read this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *feature requests* -- Org is already mature, but new
  ideas keep popping up.  If you want to request a feature, it might
  be a good idea to have a look at the current [[http://orgmode.org/worg/org-issues.html][Issue tracking file]]
  which captures both bug reports and feature requests.  Or dig into
  the mailing list for possible previous discussions about your idea.
  If you cannot find back your idea, formulate it as detailed as
  possible, if possible with examples, and send it to the mailing
  list.

- you can submit *patches* -- You can submit patches to the mailing
  list.  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for
  details.  You can run =make test= to check that your patch does
  not introduce new bugs.

  If your patch is against a file that is part of Emacs, then your
  total contribution (all patches you submit) should change /less than
  15 lines/ (See the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE file in GNU Emacs]].)  If you
  contribute more, you have to assign the copyright of your
  contribution to the Free Software Foundation (see below).

- you can submit Org *add-ons* -- there are many Org add-ons.
  - The best way is to submit your code to [[file:org-mailing-list.org][the mailing list]] to discuss
    it with people.
  - If it is useful, you might consider contributing it to the
    =lisp/contrib/= directory in the git repository. It will be
    reviewed, and if it passes, it will be included. Ask help from
    [[file:org-people.org][Eric Schulte]] for this step. The =lisp/contrib/= directory is
    somehow relaxed: it is not distributed with Emacs, and does not
    require a formal copyright assignment.
  - If you decide to sign the [[*Copyright issues when contributing to
    Emacs Org mode][assignment contract with the FSF]], we
    might include your contribution in the distribution, and then in
    GNU Emacs.

- you can submit material to the *Worg* website -- This website is
  made of Org files that you can contribute to.  Learn what Worg is
  [[file:worg-about.org][about]] and how to contribute to it [[file:worg-git.org][through git]].

* Copyright issues when contributing to Emacs Org mode
:PROPERTIES:
:CUSTOM_ID: copyright-issues
:END:

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[http://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
 ;; GNU Emacs is free software: you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
 ;; the Free Software Foundation, either version 3 of the License, or
 ;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the
repository will be accepted, as well as very minor changes (so-called
/tiny changes/) to core files.  We will ask you to sign FSF papers at
the moment we attempt to move a =contrib/= file into the Org core, or
into Emacs.

* For Org developers
  :PROPERTIES:
  :CUSTOM_ID: devs
  :END:

1. Send your public key to [[mailto:bzgATgnuDOTorg][Bastien]]

2. Wait for confirmation that your public key has been added to the
   server.

3. Clone =org-mode.git= repository like this:
   : ~$ git clone orgmode@orgmode.org:org-mode.git

4. Commit your changes.

5. Run =make test=

6. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch for
them.

* For Org contributors: preferred way of submitting patches
:PROPERTIES:
:CUSTOM_ID: patches
:END:

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs
Lisp coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be
used to make patches and send them via email -- this is perfectly fine
for major and minor changes.

When sending a patch (either using =git diff= or =git format-patch=)
please *always add a properly formatted Emacs ChangeLog entry*.  See
[[#commit-messages][this section]] for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes,
you might even want to work in several steps and send each commit
separately.  Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -a -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -a -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master                # Creates two patches

  ... Then two patches for your two commits are ready to be sent to the
  list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in
your email and 2) a ChangeLog entry in the commit message (see [[#commit-messages][this section]] on how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by
other people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog
entry to be applied.  If your patch looks good to you, it's always
better to send a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =http://orgmode.org/w/org-mode.git=.
   You can clone using any of the commands below.

   : git clone git://orgmode.org/org-mode.git
   : git clone http://orgmode.org/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the http url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/, /repo.or.cz/, or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories, in particular
   the org-mode master at /repo.or.cz/.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new
features before sending the patch series to the mailing list, but the
patches remain the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
:PROPERTIES:
:CUSTOM_ID: commit-messages
:END:

We have decided to no longer keep a ChangeLog file to record changes
to individual functions.

A commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end and does
  not start with a star.  Generally, it starts with the filename that
  has been changed, followed by a colon.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start.  A ChangeLog entry
  looks like [[http://orgmode.org/cgit.cgi/org-mode.git/commit/?id%3Dd49957ef021e256f19092c907d127390d39ec1ed][this]]:

  : * org-timer.el (org-timer-cancel-timer, org-timer-stop): Enhance
  : message.
  : (org-timer-set-timer): Use the number of minutes in the Effort
  : property as the default timer value. Three prefix arguments will
  : ignore the Effort value property.

- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.

- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

- Variables and functions names are quoted like `this' (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  org-capture.el: Fix the case of using a template file

  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.

  ,* doc/org.texi (Capture): Document using a file for a template.

  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.

  Modified from a patch proposal by Johan Friis.

  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, the ChangeLog for such entries
are easily produced by pressing =C= in the diff listing.

Another option to produce the entries is to use `C-x 4 a' in the
changed function or in the diff listing.  This will create entries in
the ChangeLog file, and you can then cut and paste these to the commit
message and remove the indentation.

- Further reference: [[http://git.savannah.gnu.org/cgit/emacs.git/plain/CONTRIBUTE][Contribution guide from Emacs repo]]

* Copyrighted contributors to Org mode
:PROPERTIES:
:CUSTOM_ID: copyrighted-contributors
:END:

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Abdó Roig-Maranges
3. Achim Gratz
4. Adam Elliott
5. Adam Porter
6. Adam Spiers
7. Alan Schmitt
8. Alexey Lebedeff
9. Andreas Burtzlaff
10. Andreas Leha
11. Andrew Hyatt
12. Andrzej Lichnerowicz
13. Andy Steward
14. Anthony John Day
15. Anthony Lander
16. Arni Magnusson
17. Arun Isaac
18. Baoqiu Cui
19. Barry Leonard Gidden
20. Bastien Guerry
21. Benjamin Andresen
22. Bernd Grobauer
23. Bernt Hansen
24. Brian James Gough
25. Brice Waegenire
26. Carsten Dominik
27. Charles Berry
28. Charles Sebold
29. Christian Egli
30. Christian Garbs
31. Christian Moe
32. Christopher League
33. Christopher Miles Gray
34. Christopher Schmidt
35. Christopher Suckling
36. Clément Pit--Claudel
37. Dan Davison
38. Daniel M German
39. Daniel M. Hackney
40. David Arroyo Menéndez
41. David Maus
42. David O'Toole
43. Dieter Schoen
44. Dima Kogan
45. Dmitry Antipov
46. Don March
47. Eric Abrahamsen
48. Eric S. Fraga
49. Eric Schulte
50. Erik Hetzner
51. Erik Iverson
52. Ethan Ligon
53. Feng Shu
54. Florian Lindner
55. Francesco Pizzolante
56. Frederick Giasson
57. Gary Oberbrunner
58. Georg Lehner
59. George Kettleborough
60. Giovanni Ridolfi
61. Grégoire Jadi (aka Daimrod)
62. Gustav Wikström
63. Henning Dietmar Weiss
64. Ian Barton
65. Ian Kelling
66. Ilya Shlyakhter
67. Ippei Furuhashi
68. Jake Romer
69. James TD Smith
70. Jan Böcker
71. Jan Malakhovski
72. Jarmo Hurri
73. Jason Riedy
74. Jay Kamat
75. Jay Kerns
76. Jeffrey Ryan Horn
77. Joe Corneli
78. Joel Boehland
79. John Kitchin
80. John Wiegley
81. Jon Snader
82. Jonas Bernoulli
83. Jonathan Leech-Pepin
84. José L. Doménech
85. Juan Pechiar
86. Julian Gehring
87. Julien Barnier
88. Julien Danjou
89. Justin Gordon
90. Justus Piater
91. Karl Fogel
92. Kaushal Modi
93. Kodi Arfer
94. Konstantin Antipin
95. Kyle Meyer
96. Lambda Coder
97. Lawrence Mitchell
98. Le Wang
99. Lele Gaifax
100. Lennart Borgman
101. Leonard Avery Randall
102. Luis Anaya
103. Lukasz Stelmach
104. Madan Ramakrishnan
105. Magnus Henoch
106. Manuel Giraud
107. Marcin Borkowski
108. Marco Wahl
109. Martin Pohlack
110. Martyn Jago
111. Matt Lundin
112. Max Mikhanosha
113. Michael Albinus
114. Michael Brand
115. Michael Gauland
116. Michael Sperber
117. Miguel A. Figueroa-Villanueva
118. Mikael Fornius
119. Moritz Ulrich
120. Nathan Neff
121. Nathaniel Flath
122. Neil Jerram
123. Nicholas Dokos
124. Nicolas Berthier
125. Nicolas Goaziou
126. Nicolas Richard
127. Niels Giessen
128. Nikolai Weibull
129. Noorul Islam K M
130. Oleh Krehel
131. Paul Sexton
132. Pedro Alexandre Marcelino Costa da Silva
133. Peter Jones
134. Phil Hudson
135. Phil Jackson
136. Philip Rooke
137. Pieter Praet
138. Piotr Zielinski
139. Puneeth Chaganti
140. Rafael Laboissière
141. Rainer M Krug
142. Rasmus Pank Roulund
143. Richard Kim
144. Richard Klinda
145. Richard Riley
146. Rick Frankel
147. Russel Adams
148. Ryo Takaishi
149. Rüdiger Sonderfeld
150. Sacha Chua
151. Samuel Loury
152. Sebastian Reuße
153. Sebastian Rose
154. Sebastien Vauban
155. Sergey Litvinov
156. Seweryn Kokot
157. Simon Michael
158. Stephen Eglen
159. Steven Rémot
160. Suvayu Ali
161. T.F. Torrey
162. Tassilo Horn
163. Thibault Marin
164. Thierry Banel
165. Thomas Baumann
166. Thomas Holst
167. Thomas S. Dye
168. Thorsten Jolitz
169. Tim Burt
170. Titus von der Malsburg
171. Toby Cubitt
172. Tokuya Kameshima
173. Tom Breton
174. Tomas Hlavaty
175. Tony Day
176. Trevor Murphy
177. Ulf Stegemann
178. Vitalie Spinu
179. Yann Hodique
180. Yasushi Shoji
181. Yoshinari Nomura
182. Yuri D. Lensky
183. Zhang Weize
184. Zhuo Qingliang (Killy Draw)

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Brian Carlson [2016-05-24 Tue]
- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603@oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Aaron Jensen
2. Adam Aviv
3. Alex Branham
4. Allen Li
5. Aman Yang
6. Andrew Burgess
7. Andy Lutomirski
8. Anthony Cowley
9. Arun Persaud
10. Aurélien Aptel
11. Austin Walker
12. Axel Kielhorn
13. Brian Carlson
14. Chunyang Xu
15. Craig Tanis
16. Derek Feichtinger
17. Eduardo Bellani
18. Eric Danan
19. Federico Beffa
20. Feng Zhou
21. Fernando Varesi
22. Florian Beck
23. Francesco Montanari
24. Galen Menzel
25. Georgiy Tugai
26. Greg Tucker-Kellogg
27. Gregor Zattler
28. Hiroshi Saito
29. Ivan Vilata i Balaguer
30. Jacob Gerlach
31. Jacob Matthews
32. Jakob Lombacher
33. Jan Seeger
34. Jan Seeger
35. Jason Furtney
36. Jeff Larson
37. Joe Hirn
38. John Foerch
39. Jon Miller
40. Jonas Hörsch
41. Joost Diepenmaat
42. Kodi Arfer
43. Konstantin Kliakhandler
44. Leslie Harlley Watter
45. Lixin Chin
46. Luke Amdor
47. Marc Ihm
48. Mario Frasca
49. Mario Martelli
50. Marshall Flax
51. Martin Vuk
52. Martin Šlouf
53. Matt Price
54. Matthew Gidden
55. Matthew MacLean
56. Michael O'Connor
57. Michael Strey
58. Michael Welle
59. Michael Weylandt
60. Michaël Cadilhac
61. Mike McLean
62. Miro Bezjak
63. Moritz Kiefer
64. Muchenxuan Tong
65. Myles English
66. Myq Larson
67. Nathaniel Nicandro
68. Nick Gunn
69. Peter Feigl
70. Peter Moresi
71. Philip (Pip Cet)
72. Renato Ferreira
73. Richard Hansen
74. Richard Lawrence
75. Richard Y. Kim (Kim)
76. Robert P. Goldman
77. Roberto Huelga
78. Ruben Maher
79. Sami Airaksinen
80. Saulius Menkevičius
81. Sebastien Le Maguer
82. Sergey Gordienko
83. Stardiviner
84. Stefan-W. Hahn
85. Stig Brautaset
86. Sylvain Chouleur
87. Teika Kazura
88. Thierry Pellé
89. Thomas Alexander Gerds
90. Thomas Rikl
91. Tom Hinton
92. Vicente Vera Parra
93. Viktor Rosenfeld
94. Vladimir Lomov
95. Wojciech Gac
96. Xavier Martinez-Hidalgo
97. Xi Shen
98. York Zhao
99. Zane D. Purvis
100. Иван Трусков

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
