#+TITLE:      How to contribute to Org?
#+AUTHOR:     Worg people
#+EMAIL:      mdl AT imapmail DOT org
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

# This file is the default header for new Org files in Worg.  Feel free
# to tailor it to your needs.

[[file:index.org][{Back to Worg's index}]]

* Types of contributions
:PROPERTIES:
:CUSTOM_ID: types-of-contributions
:END:

Every contribution to Org is very welcome.  Here is a list of areas
where your contribution will be useful:

- you can submit *bug reports* -- Before sending a bug report, make sure
  you have read this section of Org's manual: [[https://orgmode.org/org.html#Feedback][Feedback]] You can also
  read this great text: "[[http://www.chiark.greenend.org.uk/~sgtatham/bugs.html][How to Send Bug Reports Effectively]]"

- you can submit *patches* -- You can submit patches to the mailing
  list.  See the [[For Org contributors: preferred way of submitting patches][Preferred way of submitting patches]] section for
  details.  You can run =make test= to check that your patch does not
  introduce new bugs.

  If your patch is against a file that is part of Emacs, then your
  total contribution (all patches you submit) should change /less than
  15 lines/ (See the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/CONTRIBUTE][CONTRIBUTE file in GNU Emacs]].)  If you contribute
  more, you have to assign the copyright of your contribution to the
  Free Software Foundation (see below).

- You can submit material to the *Worg* website -- This website is made
  of Org files that you can contribute to.  Learn what Worg is [[file:worg-about.org][about]]
  and how to contribute to it [[file:worg-git.org][through git]].

- You can submit *feature requests* -- Org is already mature, but new
  ideas keep popping up.  If you want to request a feature, it might
  be a good idea to have a look at the current [[https://orgmode.org/worg/org-issues.html][Issue tracking file]]
  which captures both bug reports and feature requests.  Or dig into
  the mailing list for possible previous discussions about your idea.
  If you cannot find back your idea, formulate it as detailed as
  possible, if possible with examples, and send it to the mailing
  list.

- You can submit Org *add-ons* -- there are many Org add-ons.
  - The best way is to submit your code to [[file:org-mailing-list.org][the mailing list]] to discuss
    it with people.
  - If it is useful, you might consider contributing it to the
    =lisp/contrib/= directory in the git repository. It will be
    reviewed, and if it passes, it will be included. Ask help from
    [[file:org-people.org][Eric Schulte]] for this step. The =lisp/contrib/= directory is somehow
    relaxed: it is not distributed with Emacs, and does not require a
    formal copyright assignment.
  - If you decide to sign the [[*Copyright issues when contributing to Emacs Org mode][assignment contract with the FSF]], we
    might include your contribution in the distribution, and then in
    GNU Emacs.

* Copyright issues when contributing to Emacs Org mode
:PROPERTIES:
:CUSTOM_ID: copyright-issues
:END:

Org is made of many files.  Most of them are also distributed as part
of GNU Emacs.  These files are called the /Org core/, and they are all
copyrighted by the [[http://www.fsf.org][Free Software Foundation, Inc]].  If you consider
contributing to these files, your first need to grant the right to
include your works in GNU Emacs to the FSF.  For this you need to
complete [[https://orgmode.org/request-assign-future.txt][this form]], and send it to [[mailto:assign@gnu.org][assign@gnu.org]].  The FSF will send
you the assignment contract that both you and the FSF will sign.
Please let the Org-mode maintainer know when this process is complete.
Some people consider this assignment process a hassle.  I don't want
to discuss this in detail here - there are some good reasons for
getting the copyright registered, an example is discussed in this
[[http://twit.tv/floss117][FLOSS weekly podcast]].  Furthermore, by playing according to the Emacs
rules, we gain the fantastic advantage that every version of Emacs
ships with Org-mode already fully built in.  So please consider doing
this - it makes our work as maintainers so much easier, because we can
then take your patches without any additional work.

If you want to learn more about /why/ copyright assignments are
collected, read this: [[http://www.gnu.org/licenses/why-assign.html][Why the FSF gets copyright assignments from
contributors?]]

By submitting patches to emacs-orgmode@gnu.org, or by pushing changes
to the Org-mode repository, you are placing these changes under the
same licensing terms as those under which GNU Emacs is published.

#+begin_example
;; GNU Emacs is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
#+end_example

If at the time you submit or push these changes you do have active
copyright assignment papers with the FSF, for future changes to either
Org-mode or to Emacs, this means that copyright to these changes is
automatically transferred to the FSF.  The Org-mode repository is seen
as upstream repository for Emacs, anything contained in it can
potentially end up in Emacs.  If you do not have signed papers with
the FSF, only changes to files in the =contrib/= part of the repository
will be accepted, as well as very minor changes (so-called /tiny
changes/) to core files.  We will ask you to sign FSF papers at the
moment we attempt to move a =contrib/= file into the Org core, or into
Emacs.

* For Org developers
  :PROPERTIES:
  :CUSTOM_ID: devs
  :END:

** Git branches

Please read [[https://code.orgmode.org/bzg/org-mode/src/master/README_maintainer][README_maintainer]] file within Org's repository.

** Pushing your first commit

1. Create an account on https://code.orgmode.org
2. Add your public key to the account
3. Ask [[mailto:bzgATgnuDOTorg][Bastien]] to be added as a collaborator on the repository
4. Clone =org-mode.git=: =~$ git clone git@code.orgmode.org:bzg/org-mode.git=
5. Commit your changes against the code and the documentation.
6. Run =make test=
7. If the tests pass, push your changes.

If you are undertaking big changes, please create a dedicated branch
and make sure you have a clean commit history before merging it into
the maint or master branch.

** Taking care of the manual in both branches

- When you make a change in the master branch, update
  doc/org-manual.org accordingly.

- When you make a change in the maint branch, update doc/org.texi in
  maint and doc/org-manual.org when you merge maint into master.

* For Org contributors: preferred way of submitting patches
:PROPERTIES:
:CUSTOM_ID: patches
:END:

** Coding conventions

Org is part of Emacs, so any contribution should follow the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][GNU Emacs
Lisp coding conventions]] described in Emacs manual.

** Sending patch with git

Org-mode is developed using /git/ as the version control system.  Git
provides an amazing framework to collaborate on a project.  Git can be
used to make patches and send them via email -- this is perfectly fine
for major and minor changes.

When sending a patch (either using =git diff= or =git format-patch=)
please *always add a properly formatted Emacs ChangeLog entry*.  See
[[#commit-messages][this section]] for details on how to create such a ChangeLog.

** Sending commits

For every patch you send, we suggest to use =git format-patch=.

This is easy for small patches and more consequent ones.  Sometimes,
you might even want to work in several steps and send each commit
separately.  Here is the suggested workflow:

#+begin_quote
:   ~$ git pull                 # make sure your repo is up to date
:   ~$ git branch my-changes    # create a new branch from master
:   ~$ git checkout my-changes  # switch to this new branch

  ... make some changes (1) ...

:   ~$ git commit -a -m "This is change (1)"  # Commit your change

  ... make another change (2) ...

:   ~$ git commit -a -m "This is change (2)"  # Commit your change
:   ~$ git format-patch master                # Creates two patches

  ... Then two patches for your two commits are ready to be sent to
  the list.
#+end_quote

Write useful commit messages: please provide 1) a reason for it in
your email and 2) a ChangeLog entry in the commit message (see [[#commit-messages][this section]] on how to format a ChangeLog entry.)

** Sending quick fixes for testing purpose

If you want to send a quick fix that needs to be further tested by
other people (before you submit a real patch), here is how you can do:

#+begin_quote
  This command will make a patch between the staging area (in your
  computer), and the file you modified:

  : git diff -p org-whatever.el > org-whatever.el.diff

  If you already committed your changes to your index (staging area), then
  you should compare against a particular branch (in this example,
  origin/master):

  : git diff -p origin/master org-whatever.el > org-whatever.el.diff

  You email the output to the mailing list, adding =[PATCH]= to the
  subject, and description of what you fixed or changed.
#+end_quote

Note that small patches sent like this still need to have a ChangeLog
entry to be applied.  If your patch looks good to you, it's always
better to send a patch through =git format-patch=.

** Sharing changes from a public branch

For more significant contributions, the best way to submit patches is
through public branches of your repository clone.

1. Clone our git repository at =https://code.orgmode.org/bzg/org-mode=.
   You can clone using any of the commands below.

   : git clone git@code.orgmode.org:bzg/org-mode.git
   : git clone https://code.orgmode.org/bzg/org-mode.git

   The url using the git protocol is preferred. If you are behind a
   firewall that blocks ~git://~, you can use the https url.

2. Create a repository that can be publicly accessed, for example on
   /GitHub/ or on your own server.

3. Push your topic branches (and optionally the master branch) to your
   public repository.

   Define a remote for your public repository you push topics to.

   : git remote add REMOTE URL-GOES-HERE

   Push branches to the remote

   : git push REMOTE BRANCH1 [BRANCH2 BRANCH3 ...]

   e.g.

   : git remote add github ssh://.../     # Done once to define the remote 'github'
   : git push github my-topic

4. Do your work on topic-specific branches, using a branch name that
   relates to what you are working on.

5. Often do

   : git remote update

   to pull commits from all defined remote repositories.

6. When you have something workable, publish the git path and branch
   name on the mailing list, so that people can test it and review
   your work.

7. After your topic has been merged to the project master branch you
   can delete the topic on your local and remote repositories.

   : git branch -d NEWTOPIC
   : git push REMOTE :NEWTOPIC

The instructions above are generally useful to let people test new
features before sending the patch series to the mailing list, but the
patches remain the preferred way of receiving contributions.

* Commit messages and ChangeLog entries
:PROPERTIES:
:CUSTOM_ID: commit-messages
:END:

We have decided to no longer keep a ChangeLog file to record changes
to individual functions.

A commit message should be constructed in the following way:

- Line 1 of the commit message should always be a short description of
  the overall change.  Line 1 does /not/ get a dot at the end and does
  not start with a star.  Generally, it starts with the filename that
  has been changed, followed by a colon.

- Line 2 is an empty line.

- In line 3, the ChangeLog entry should start.  A ChangeLog entry
  looks like [[https://orgmode.org/cgit.cgi/org-mode.git/commit/?id%3Dd49957ef021e256f19092c907d127390d39ec1ed][this]]:

  : * org-timer.el (org-timer-cancel-timer, org-timer-stop): Enhance
  : message.
  : (org-timer-set-timer): Use the number of minutes in the Effort
  : property as the default timer value. Three prefix arguments will
  : ignore the Effort value property.

- After the changelog, another empty line should come before any
  additional information that the committer wishes to provide in order
  to explain the patch.

- If the change is a minor change made by a committer without
  copyright assignment to the FSF, the commit message should also
  contain the cookie =TINYCHANGE= (anywhere in the message).  When we
  later produce the ChangeLog file for Emacs, the change will be
  marked appropriately.

- Variables and functions names are quoted like `this' (backquote and
  single quote).

- Sentences should be separated by two spaces.

- Sentences should start with an uppercase letter.

- Avoid the passive form: i.e., use "change" instead of "changed".

Here is an example for such a message:

#+begin_example
  org-capture.el: Fix the case of using a template file

  ,* lisp/org-capture.el (org-capture-set-plist): Make sure txt is a
  string before calling `string-match'.
  (org-capture-templates): Fix customization type.

  ,* doc/org.texi (Capture): Document using a file for a template.

  The problem here was that a wrong keyword was given in the
  customization type.  This let to a string-match against a list value.

  Modified from a patch proposal by Johan Friis.

  TINYCHANGE
#+end_example

If you are using /magit.el/ in Emacs, the ChangeLog for such entries
are easily produced by pressing =C= in the diff listing.

Another option to produce the entries is to use `C-x 4 a' in the
changed function or in the diff listing.  This will create entries in
the ChangeLog file, and you can then cut and paste these to the commit
message and remove the indentation.

- Further reference: [[http://git.savannah.gnu.org/cgit/emacs.git/plain/CONTRIBUTE][Contribution guide from Emacs repo]]

* Copyrighted contributors to Org mode
:PROPERTIES:
:CUSTOM_ID: copyrighted-contributors
:END:

Here is the list of people who have contributed actual code to the
Org-mode core.  Note that the manual contains a more extensive list
with acknowledgments, including contributed ideas!  The lists below
are mostly for house keeping, to help the maintainers keep track of
copyright issues.

** Current contributors
  :PROPERTIES:
  :CUSTOM_ID: contributors_with_fsf_papers
  :END:

Here is the list of people who signed the papers with the Free Software
Foundation and can now freely submit code to Org files that are included
within GNU Emacs:

1. Aaron Ecay
2. Aaron Jensen
3. Abdó Roig-Maranges
4. Achim Gratz
5. Adam Elliott
6. Adam Porter
7. Adam Spiers
8. Alan Schmitt
9. Alex Branham
10. Alexey Lebedeff
11. Andreas Burtzlaff
12. Andreas Leha
13. Andrew Hyatt
14. Andrzej Lichnerowicz
15. Andy Steward
16. Anthony John Day
17. Anthony Lander
18. Arni Magnusson
19. Arun Isaac
20. Baoqiu Cui
21. Barry Leonard Gidden
22. Bastien Guerry
23. Benjamin Andresen
24. Bernd Grobauer
25. Bernt Hansen
26. Bjarte Johansen
27. Brian James Gough
28. Brice Waegenire
29. Carsten Dominik
30. Charles Berry
31. Charles Sebold
32. Christian Egli
33. Christian Garbs
34. Christian Moe
35. Christopher League
36. Christopher Miles Gray
37. Christopher Schmidt
38. Christopher Suckling
39. Clément Pit--Claudel
40. Dan Davison
41. Daniel M German
42. Daniel M. Hackney
43. David Arroyo Menéndez
44. David Maus
45. David O'Toole
46. Dieter Schoen
47. Dima Kogan
48. Dmitry Antipov
49. Don March
50. Eric Abrahamsen
51. Eric Schulte
52. Eric S. Fraga
53. Erik Hetzner
54. Erik Iverson
55. Ethan Ligon
56. Feng Shu
57. Florian Lindner
58. Francesco Pizzolante
59. Frederick Giasson
60. Gary Oberbrunner
61. George Kettleborough
62. Georg Lehner
63. Giovanni Ridolfi
64. Grégoire Jadi (aka Daimrod)
65. Gustav Wikström
66. Henning Dietmar Weiss
67. Henry Blevins
68. Ian Barton
69. Ian Dunn
70. Ian Kelling
71. Ilya Shlyakhter
72. Ippei Furuhashi
73. Jack Kamm
74. Jake Romer
75. James TD Smith
76. Jan Böcker
77. Jan Malakhovski
78. Jarmo Hurri
79. Jason Riedy
80. Jay Kamat
81. Jay Kerns
82. Jeffrey Ryan Horn
83. Joe Corneli
84. Joel Boehland
85. John Kitchin
86. John Wiegley
87. Jonas Bernoulli
88. Jonathan Leech-Pepin
89. Jon Snader
90. José L. Doménech
91. Juan Pechiar
92. Julian Gehring
93. Julien Barnier
94. Julien Danjou
95. Justin Gordon
96. Justus Piater
97. Karl Fogel
98. Kaushal Modi
99. Kevin Brubeck Unhammer
100. Kodi Arfer
101. Konstantin Antipin
102. Kyle Meyer
103. Lambda Coder
104. Lawrence Mitchell
105. Lele Gaifax
106. Lennart Borgman
107. Leonard Avery Randall
108. Le Wang
109. Luis Anaya
110. Lukasz Stelmach
111. Madan Ramakrishnan
112. Magnus Henoch
113. Manuel Giraud
114. Marcin Borkowski
115. Marco Wahl
116. Mark A. Hershberger
117. Martin Pohlack
118. Martyn Jago
119. Matt Lundin
120. Max Mikhanosha
121. Michael Albinus
122. Michael Brand
123. Michael Gauland
124. Michael Sperber
125. Miguel A. Figueroa-Villanueva
126. Mikael Fornius
127. Moritz Ulrich
128. Nathaniel Flath
129. Nathan Neff
130. Neil Jerram
131. Nicholas Dokos
132. Nicolas Berthier
133. Nicolas Dudebout
134. Nicolas Goaziou
135. Nicolas Richard
136. Niels Giessen
137. Nikolai Weibull
138. Noorul Islam K M
139. Oleh Krehel
140. Paul Sexton
141. Pedro Alexandre Marcelino Costa da Silva
142. Peter Jones
143. Phil Hudson
144. Philip Rooke
145. Phil Jackson
146. Pierre Téchoueyres
147. Pieter Praet
148. Piotr Zielinski
149. Puneeth Chaganti
150. Rafael Laboissière
151. Rainer M Krug
152. Rasmus Pank Roulund
153. Richard Kim
154. Richard Klinda
155. Richard Riley
156. Rick Frankel
157. Robert Michael Irelan
158. Rüdiger Sonderfeld
159. Russel Adams
160. Ryo Takaishi
161. Sacha Chua
162. Samuel Loury
163. Sebastian Reuße
164. Sebastian Rose
165. Sebastien Vauban
166. Sergey Litvinov
167. Seweryn Kokot
168. Simon Michael
169. Siraphob Phipathananunth
170. Stardiviner
171. Stephen Eglen
172. Steven Rémot
173. Suvayu Ali
174. Tassilo Horn
175. T.F. Torrey
176. Thibault Marin
177. Thierry Banel
178. Thomas Baumann
179. Thomas Holst
180. Thomas S. Dye
181. Thorsten Jolitz
182. Tim Burt
183. Tim Landscheidt
184. Titus von der Malsburg
185. Toby Cubitt
186. Tokuya Kameshima
187. Tomas Hlavaty
188. Tom Breton
189. Tony Day
190. Trevor Murphy
191. Ulf Stegemann
192. Vitalie Spinu
193. Vladimir Panteleev
194. Yann Hodique
195. Yasushi Shoji
196. Yoshinari Nomura
197. Yuri D. Lensky
198. Zhang Weize
199. Zhuo Qingliang (Killy Draw)

** Processing

These people have been asked to sign the papers, and they are
currently considering it or a request is being processed by the FSF.

- Brian Carlson [2016-05-24 Tue]
- Bill Wishon
- Mats Kindahl (as of 2013-04-06) for [[http://mid.gmane.org/513BAB7D.1000603@oracle.com][this patch]]
- Georg Lehner (as of 2013-06-27)
- Kodi Arfer (as of 2013-06-29)

** Tiny Changes

These people have submitted tiny change patches that made it into Org
without FSF papers.  When they submit more, we need to get papers
eventually.  The limit is a cumulative change of 20 non-repetitive
change lines.  Details are given in [[http://www.gnu.org/prep/maintain/maintain.html#Legally-Significant ][this document]].

1. Adam Aviv
2. Aliaksey Artamonau
3. Allen Li
4. Aman Yang
5. Andrew Burgess
6. Andrew Eggenberger
7. Andy Lutomirski
8. Anthony Cowley
9. Arun Persaud
10. Aurélien Aptel
11. Austin Walker
12. Axel Kielhorn
13. Brian Carlson
14. Christian Schwarzgruber
15. Chunyang Xu
16. Craig Tanis
17. Daniel Peres Gomez
18. Derek Feichtinger
19. Dima Gerasimov
20. Dominik Schrempf
21. Doro Rose
22. Eduardo Bellani
23. Eric Danan
24. Federico Beffa
25. Feng Zhou
26. Fernando Varesi
27. Florian Beck
28. Francesco Montanari
29. Galen Menzel
30. Georgiy Tugai
31. Gong Qijian
32. Gregor Zattler
33. Greg Tucker-Kellogg
34. Hiroshi Saito
35. Ivan Vilata i Balaguer
36. Jack Henahan
37. Jacob Gerlach
38. Jacob Matthews
39. Jakob Lombacher
40. Jan Seeger
41. Jason Furtney
42. Jeff Larson
43. Joe Hirn
44. John Foerch
45. Jonas Hörsch
46. Jon Miller
47. Joost Diepenmaat
48. Jose Robins
49. Kodi Arfer
50. Konstantin Kliakhandler
51. Leslie Harlley Watter
52. Leslie Watter
53. Lixin Chin
54. Luke Amdor
55. Marc Ihm
56. Mario Frasca
57. Mario Martelli
58. Marshall Flax
59. Martin Šlouf
60. Martin Vuk
61. Matthew Gidden
62. Matthew MacLean
63. Matt Price
64. Michaël Cadilhac
65. Michael O'Connor
66. Michael Strey
67. Michael Welle
68. Michael Weylandt
69. Mike McLean
70. Miro Bezjak
71. Moritz Kiefer
72. Muchenxuan Tong
73. Myles English
74. Myq Larson
75. Nathaniel Nicandro
76. Nick Gunn
77. Peter Feigl
78. Peter Moresi
79. Philip (Pip Cet)
80. Renato Ferreira
81. Richard Hansen
82. Richard Lawrence
83. Richard Y. Kim (Kim)
84. Roberto Huelga
85. Robert P. Goldman
86. Roger Welsh
87. Ruben Maher
88. Sami Airaksinen
89. Saulius Menkevičius
90. Sebastien Le Maguer
91. Sergey Gordienko
92. Sigmund Tzeng
93. Stefan-W. Hahn
94. Stig Brautaset
95. Sylvain Chouleur
96. Tadashi Hirata
97. Teika Kazura
98. Thierry Pellé
99. Thomas Alexander Gerds
100. Thomas Rikl
101. Tobias Schlemmer
102. Tom Hinton
103. Vicente Vera Parra
104. Viktor Rosenfeld
105. Vladimir Lomov
106. Wojciech Gac
107. Xavier Martinez-Hidalgo
108. Xi Shen
109. York Zhao
110. Yue Zhu
111. Zane D. Purvis
112. Иван Трусков

(This list may be incomplete - please help completing it.)

** No FSF assignment

These people cannot or prefer to not sign the FSF copyright papers,
and we can only accept patches that do not change the core files (the
ones that are also in Emacs).

Luckily, this list is still empty.

#+BEGIN: timestamp :string "Last update: " :format "%Y-%m-%d @ %H:%M"

#+END:
