#+OPTIONS:    H:3 num:nil toc:1 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:nil skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) 
#+TITLE:      Org-babel: Uses
#+AUTHOR:     Thomas S. Dye
#+EMAIL:      tsd at tsdye dot com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>

[[file:index.org][{Back to Babel's index}]]

* Introduction
  Org-babel might be described as a literate meta-language programming
  environment for Emacs.  It leverages Org-mode for its user interface
  and its ability to export directly to HTML and LaTeX.  It extends
  Org-mode source code blocks by making them executable, with several
  options for handling the results of execution.  Org-babel is
  described by one of its authors as language agnostic; the source
  code blocks in a document can be written in a growing list of
  supported languages.  A document can contain source code blocks in
  as many languages as are needed to complete the task at hand, and
  the results of a source code block in one language can be passed to
  a source code block in another language.  All of this is
  accomplished with a simple syntax and a few easily mastered options.

  This combination of attributes opens up so many use options that the
  possibilities sometimes seem endless.  This document sets out some
  scenarios of Org-babel use.  It is designed to explore a few
  dimensions of Org-babel's use-space, with the hope that others might
  be inspired to explore and share other dimensions of that space.

  The following sections each describe a particular use scenario: the
  problem that it was designed to solve; its software requirements;
  its advantages and disadvantages compared to alternative approaches;
  and a toy example meant to illustrate the structure of the Org-mode
  file and Org-babel's place within it, and not to emulate a
  real-world application. Hopefully, Org-babel users who write in
  other supported languages can supply examples of other work-flows.

* [[file:examples/data-collection-analysis.org][Data Collection and Analysis]]
  This example uses Org-babel to automate a repeated data-collection
  and analysis task.  A Ruby code block is used to scrape data from
  the output of a computational experiment.  This data is then written
  to an Org-mode table.  A block of R code reads from this table and
  calculates lines of fit.  Finally a block of gnuplot code is used to
  graph the results of both the raw data and the R analysis.  By
  performing all of these steps within an Org-mode document working
  notes, discussion, and TODOs can be naturally interspersed with the
  code, and the results can easily be published to HTML or PDF for
  distribution.

* [[http://www.stats.ox.ac.uk/~davison/software/org-babel/teaching-material/drift.org.html][Teaching evolution using R]]
  This example is a tutorial on simulating evolution in R. It contains
  examples of diagrams generated with =ditaa=, LaTeX, and graphics
  generated with R.

  A good way to see how org-babel functions to create the tutorial is
  to view the [[http://www.stats.ox.ac.uk/~davison/software/org-babel/teaching-material/drift.org.html][htmlized org buffer]]. This also provides an example of
  how images and latex-generated mathematical notation can be viewed
  inline in emacs. The HTML export version is [[file:examples/drift.org][here]].

* [[file:examples/latex-form.org][A LaTeX Form]]
  This example uses Org-babel as a user interface for a LaTeX form
  that might be used by the members of an organization.  It uses the
  literate programming facility of Org-babel to isolate the user from
  the sometimes arcane LaTeX constructs needed to create a
  highly-structured form.  Org-babel can tangle multiple documents in
  a single Org-mode file, and this ability is used to create a
  distribution version of the form separate from one designed for the
  file cabinet.

* [[file:examples/short-report.org][A Standardized Short Report]]
  This example is similar to the previous one, but here the users are
  expected to write substantial content.  This type of workflow might
  be used by a small organization whose employees regularly produce
  standard documents and where the writing tasks for any one document
  are divided among the authors.  

  The HTML export facility of Org-mode is used to produce a guide to
  writing the standardized short report.  This HTML file can be used
  to train new authors.  The Org-mode content also supplies
  substantial direction to experienced authors as they write.
  Org-mode keywords and tags are used to keep track of writing
  assignments and progress.  Org-babel's literate programming facility
  makes it possible to present writing tasks to the authors in an order
  different from which they appear in the report.

* [[file:examples/research-project.org][A Research Project]]
  It is outrageous to think that an entire research project might fit
  in a single computer file.  Practically speaking, it probably isn't
  possible.  But the combination of Org-mode and Org-babel does make
  it possible for one file to hold many, many things useful to the researcher:
     - the project schedule; 
     - a daily log; 
     - notes; 
     - a facility to track data acquisition graphically; 
     - a complete specification of the steps taken in data analysis; 
     - the two presentation products typically produced by researchers---an article
       for print publication and a digital slide show; 
     - comments; 
     - metadata;
     - etc.
  
  When the project is finished and the Org-mode file is complete, one
  call to =org-babel-tangle= produces the LaTeX source files for the
  print publication and the Beamer slide show.  Exporting the Org-mode
  file, say with =C-c, C-e h=, produces an HTML file that meets most,
  if not all, the requirements for a piece of reproducible research.

  Equally outrageous---the one Org-mode file is easy to
  set-up, use, and maintain.  A modicum of organization, along with some
  judicious use of keywords and tags, and perhaps a custom agenda item
  or two, makes it easy to keep track of progress and to get where you
  want to be with no hassle.

  More outrageous---the project data can be augmented or
  corrected at any point and these changes will be reflected
  everywhere---in the graphics, the slides, the text of the article,
  the metadata, etc.  One can work with great confidence, knowing that
  mistakes of logic, analysis, and execution are very likely to be
  recorded in the Org-mode file.  Fixing an error where it occurs, and
  only there, propagates the fix throughout the project.  As a result,
  the researcher spends time thinking about the research, rather than
  its organization across multiple directories, files, and
  applications.  What fun!
  
