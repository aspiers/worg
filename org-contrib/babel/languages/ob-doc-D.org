#+OPTIONS:    H:3 num:nil toc:2 \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      D Source Code Blocks in Org Mode
#+AUTHOR:     Thierry Banel
#+EMAIL:      tbanelwebmin[at]free[dot]fr
#+LANGUAGE:   en
#+HTML_HEAD:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:    ../languages.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXCLUDE_TAGS: noexport

#+name: banner
#+begin_html
  <div id="subtitle" style="float: center; text-align: center;">
  <p>
  Org Mode support for <a href="http://dlang.org/">D</a>
  </p>
  <p>
  <a href="http://dlang.org/">
  <img src="http://dlang.org/images/dlogo.png"/>
  </a>
  </p>
  </div>
#+end_html

* Template Checklist [12/12] 					   :noexport:
  - [X] Revise #+TITLE:
  - [X] Indicate #+AUTHOR:
  - [X] Add #+EMAIL:
  - [X] Revise banner source block [3/3]
    - [X] Add link to a useful language web site
    - [X] Replace "Language" with language name
    - [X] Find a suitable graphic and use it to link to the language
      web site
  - [X] Write an [[Introduction]]
  - [X] Describe [[Requirements%20and%20Setup][Requirements and Setup]]
  - [X] Replace "Language" with language name in [[Org%20Mode%20Features%20for%20Language%20Source%20Code%20Blocks][Org Mode Features for Language Source Code Blocks]]
  - [X] Describe [[Header%20Arguments][Header Arguments]]
  - [X] Describe support for [[Sessions]]
  - [X] Describe [[Result%20Types][Result Types]]
  - [X] Describe [[Other]] differences from supported languages
  - [X] Provide brief [[Examples%20of%20Use][Examples of Use]]
* Introduction
[[http://dlang.org/][D]] is a C++-like language made by [[http://dlang.org/][Digital Mars]].
It features:
  - C++ syntax
  - Built-in garbage collector
  - Strong type system
  - Meta-programming
  - Seamless assembler support
  - Usable as a scripting language
  - C binary compatibility
  - and much more.

The scripting feature of [[http://dlang.org/][D]] is leveraged in Org mode.
Basically, we call [[http://dlang.org/rdmd.html][=rdmd=]] instead of the =dmd= compiler.
This transparently compiles, caches, and run the script.

D may be used like many other script languages (Perl, Awk, Emacs Lisp,
etc.) to process data within Org files, without worrying about memory
management, with the help of a strong type system, and enjoying the
speed of a compiled language.

* Requirements and Setup

  1. The D runtime must be installed on your platform.
   Look at http://dlang.org/ for downloading and instructions.
   Eventually, the =dmd= and =rdmd= compilers must be in the =PATH=.
   A separate =d-mode.el= package is available, for syntax higlighting.
   It is not required.

  2. Add =ob-D.el= in the =lisp/org/= source tree.
   For now, this file is attached at the end of this page.

  3. In the =org.el= file, find a line which says:
                : (const :tag "C" C)
   add a similar line for D:
  		: (const :tag "D" D)

  4. byte-compile the 2 modified =*.el=

  5. customize the variable =org-babel-load-languages= enabling D
     - either through =M-x customize-variable=
     (you may need a restart of Emacs prior to customization)
     - or in your =.emacs=

* Org Mode Features for D Source Code Blocks
** Header Arguments
  - =:results output= ::
    (only output presently)
  - =:var VARIABLE=VALUE= ::
    A global D variable named VARIABLE will be declared
    and initialized with VALUE
    Possible types for VARIABLE may be:
      : int, double, string, string[][]
    The later type, =string[][]=, is used for variables storing
    Org tables
  - =:import package= ::
    An import statement will be declared in the D source
    before the source code

** Sessions
   There is no support for sessions

** Result Types
   Presently, only output result is supported
   =:results output=

** Other
   D support is quite similar to C and C++ support.

   One difference though, is that in D compilation is cached. Only
   the first run incures compile time, up to the next change in the
   source.

* Examples of Use
** Hello World
Here is Hello World!

#+name: d-hello
#+begin_src D :exports results
  import std.stdio;
  writefln ("Hello World!");
#+end_src

This source code block:

#+begin_example
#+begin_src D
   import std.stdio;
   writefln ("Hello World!");
#+end_src
#+end_example

yields this result:

#+results: d-hello
Hello World!

** Process an Org Mode Table
We take an Org mode table as input, process it, and output
a new Org mode table.

This table will be input in the D script, and iterated row by row:

#+tblname: somedata
| nb | sqr | noise |
|----+-----+-------|
|  0 |   0 |  0.23 |
|  1 |   1 |  1.31 |
|  2 |   4 |  4.61 |
|  3 |   9 |  9.05 |
|  4 |  16 | 16.55 |

#+name: d-table
#+header: :exports results
#+begin_src D :results output :var somedata=somedata :var TT="321" :var QQ=3.14
  import std.stdio;
  import std.conv;

  void main()
  {
    foreach (i, row; somedata) {
      writef ("|%2s ", i);
      foreach (cell; row)
        writef ("| %5s | %5s ", cell, 1000*to!real(cell));
      writefln ("| %7s |", to!real(TT)*to!real(QQ));
    }
  }
#+end_src

#+begin_example
#+begin_src D :results output :var somedata=somedata :var TT="321" :var QQ=3.14
  import std.stdio;
  import std.conv;

  void main()
  {
    foreach (i, row; somedata) {
      writef ("|%2s ", i);
      foreach (cell; row)
        writef ("| %5s | %5s ", cell, 1000*to!real(cell));
      writefln ("| %7s |", to!real(TT)*to!real(QQ));
    }
  }
#+end_src
#+end_example

yields this result:

#+results: d-table
| 0 | 0 |    0 |  0 |     0 |  0.23 |   230 | 1007.94 |
| 1 | 1 | 1000 |  1 |  1000 |  1.31 |  1310 | 1007.94 |
| 2 | 2 | 2000 |  4 |  4000 |  4.61 |  4610 | 1007.94 |
| 3 | 3 | 3000 |  9 |  9000 |  9.05 |  9050 | 1007.94 |
| 4 | 4 | 4000 | 16 | 16000 | 16.55 | 16550 | 1007.94 |

* Source file
C, C++, and D are quite similar languages.
Thus, it make sense to merge all supports in a single, easy to maintain,
lisp source file, named =ob-C.el=
