#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Org-babel-doc-LaTeX
#+AUTHOR:     Tom Dye
#+EMAIL:      tsd at tsdye dot com
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>

#+begin_html
  <div id="subtitle" style="float: center; text-align: center;">
  <p>
  Org-babel support for LaTeX
  </p>
  <p>
  </div>
#+end_html

* Notes                                                            :noexport:
** Queries
** Comments

* Requirements
**  [[http://www.gnu.org/software/auctex/][AucTeX]]
   Strongly recommended for editing .tex files.
*** Installation using  [[http://github.com/eschulte/emacs-starter-kit/tree/master][Literate Emacs Starter Kit]]
**** Configure Makefile and Install AucTeX
     - specify the lispdir in .emacs.d and texmf in the local TDS tree
       - ./configure --with-lispdir=HOME/.emacs.d/src
         --with-texmf-dir=TEXMF
     - make
     - sudo make install (note that the success line might scroll off the
       screen)
**** Create or Edit starter-kit-latex.org
     - Add any or all of the following sub-trees to a file named
       starter-kit-latex.org in .emacs.d.
     - AucTeX is a must.  It provides very many functions that make
       editing LaTeX source a breeze.
     - Preview LaTeX attempts to give a WYSIWYG experience in an Emacs
       buffer.  
     - RefTeX has been bundled with Emacs for a long time.  It is
       indispensable for multi-file documents; adding citations,
       labels and cross-references; and indexing.
       
***** Load AucTeX
#+begin_src emacs-lisp 
(load "auctex.el" nil t t)
#+end_src

***** Load Preview LaTeX
#+begin_src emacs-lisp 
(load "preview-latex.el" nil t t)
#+end_src

***** Load RefTeX

#+begin_src emacs-lisp 
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
#+end_src
**** Modify starter-kit.org
     - Add the following sub-tree to starter-kit.org, at Implementation
       / Language/Mode Specific Files.
***** Starter kit LaTeX
      Located in [[file:starter-kit-latex.org][start-kit-latex]]

#+begin_src emacs-lisp 
(starter-kit-load "starter-kit-latex.org")    
#+end_src

**** Recommended RefTeX Setting
     - It is helpful to name a default bibliography when editing
       source code in Org-babel, since the LaTeX source code block
       being edited probably doesn't include the \bibliography{}
       command that RefTeX uses to find bibliographic database(s).


#+begin_src emacs-lisp 
  (setq reftex-default-bibliography
        (quote
         ("tsd.bib" "local.bib")))       
#+end_src

* Configuration in Org-babel
   - Add LaTeX to a list of languages that raise noweb-type errors.
   - The following is an example from a system also using R and python
     source code blocks in Org-babel.  You will need to edit the last
     argument to reflect the languages you use in Org-babel.

#+begin_src emacs-lisp 
  (setq org-babel-noweb-error-langs '("R" "python" "latex"))
#+end_src

* Language-specific Conventions
  - Org-babel returns raw LaTeX code on evaluation, unless a =:file=
    header argument is present.
  - The default value for the =:exports= header argument is =results=.
  - The default value for the =:results= header argument is =latex=.
* Additions to Org-babel
  - Org-babel's LaTeX support uses the =:file= and =:buffer= header
    arguments in language-specific ways.  It adds three header
    arguments: =:pdfheight=,  =:pdfwidth=, and =:packages=.
** Header Arguments
  - The =:file= header argument accepts a file name ending in =.png=
    or =.pdf=.
  - When =:file FILENAME.png= is set, =:buffer no= specifies that
    buffer colors won't be used in the =.png= file.
  - When =:file FILENAME.pdf= is set, =:pdfheight= and =:pdfwidth=
    header arguments can be used to specify the size of the pdf
    image.  These arguments take LaTeX lengths, e.g., =1in=, =6em=, =48pt=, etc.
  - The =:packages= header argument temporarily adds one or more
    packages to =org-export-latex-packages-alist=.  It accepts an
    assoc-list that can be appended to
    =org-export-latex-packages-alist=.  An example is given below. 
  - LaTeX source code blocks do not support the =:session= header argument.
** Examples of Use
*** Display the LaTeX logo in the Emacs buffer

: #+begin_src latex :file latex-logo.png
:   \LaTeX
: #+end_src

#+begin_src latex :file latex-logo.png :exports none
  \LaTeX
#+end_src

*** Generate a complex figure

    - This example uses the excellent [[http://sourceforge.net/projects/pgf/][pgf/tikz]] package

: #+begin_src latex :file fsa.pdf :packages '(("" "tikz")) :pdfwidth 3in :pdfheight 3in
:   % Define block styles
:   \usetikzlibrary{shapes,arrows}
:   \tikzstyle{astate} = [circle, draw, text centered, font=\footnotesize, fill=blue!25]
:   \tikzstyle{rstate} = [circle, draw, text centered, font=\footnotesize, fill=red!25]
: 
:   \begin{tikzpicture}[->,>=stealth', shorten >=1pt, auto, node distance=2.8cm, semithick]
:     \node [astate] (1) at (0,0) {1};
:     \node [astate] (2) at (1,0) {2};
:     \node [rstate] (3) at (2,0) {3};
:     \path (1) edge [bend left] node {b} (2)
:           (2) edge node {b} (3)
:           (2) edge [bend left] node {a} (1)
:           (3) edge [loop above] node {(a, b)} (3);
:   \end{tikzpicture}
: #+end_src


* Common Idioms
  - Note that Org-mode can export its outline structure to LaTeX,
    yielding a serviceable document.
  - LaTeX source code blocks in Org-babel are useful if: 
    - you want to use the Org-mode file as a meta-document about the
      writing of a LaTeX document;

: Don't end the optional argument to \caption{} with a period.
: #+begin_src latex :exports code
:   \begin{figure}[htb!]
:     \includegraphics{my_fig}
:     \caption[A test caption]{A test caption.}
:     \label{fig:test-caption}
:   \end{figure}
: #+end_src

    - you want to create multiple LaTeX documents from a single
      Org-mode file.
: #+srcname: first-document :tangle first-document.tex
: #+begin_src latex 
:   \documentclass{article}
:   \begin{document}
:   The first document.
:   \end{document}
: #+end_src
: #+srcname: second-document :tangle second-document.tex
: #+begin_src latex 
:   \documentclass{book}
:   \begin{document}
:   The second document.
:   \end{document}
: #+end_src

