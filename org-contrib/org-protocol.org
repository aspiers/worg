#+TITLE:     org-protocol.el -- Intercept calls from emacsclient to trigger custom actions
#+OPTIONS:   ^:{} author:nil
#+STARTUP: odd


org-protocol intercepts calls from emacsclient to trigger custom actions without
external dependencies. Only one protocol has to be configured with your external
applications or the operating system, to trigger an arbitrary number of custom
actions. Just register your custom sub-protocol and handler with the variable
`org-protocol-protocol-alist'.


* About org-protocol.el

  =org-protocol.el= is based on code and ideas from [[file:./org-annotation-helper.org][org-annotation-helper.el]] and
  =org-browser-url.el=.

  =org-protocol= scanns the list of filenames passed to the emacs-server for
  "=org-protocol:/sub-protocol:/=" and triggers actions assossiated with
  =sub-protocol= through the custom variable =org-protocol-protocol-alist=.

  It comes with three predefined handlers:
    - =org-protocol-store-link= ::
      triggered through the sub-protocol "=store-link=". Stores an Org-link and
      pushes the URL to the =kill-ring=.
    - =org-protocol-remember= ::
      Fill a remember buffer with informations gathered somewhere else. This one
      is triggered through the "=remember=" sub-protocol.
    - =org-protocol-open-source= ::
      "=open-source=". Maps URLs to local filenames. Use this to open sources of
      already published contents in emacs for editing.

  =org-protocol= helps creating [[file:../org-tutorials/org-protocol-custom-handler.org][custom handlers]] and so called =org-protocol-projects=.


* Installation

  - To load org-protocol.el add the following to your =.emacs=:

    : (server-start)
    : (add-to-list 'load-path "~/path/to/org/protocol/")
    : (require 'org-protocol)


* Browser / system setup

  Windows users proceed to the section [[windows-setup][Windows]].

# <<firefox-setup>>
*** Firefox

  As of March 2009 Firefox users follow the steps documented on
  http://kb.mozillazine.org/Register_protocol. Here is a summary:

  1. Type "=about:config=" into the location bar and press enter.
  2. Click "/I'll be careful, I promise!/" to continue.
  3. Right-click on the grid
  4. Choose "/New/" -> "/String/" from the context menu.
  5. Enter "=network.protocol-handler.app.org-protocol=" as the properties name.
  6. Click "/OK/".
  7. Leave the value blank.
  8. Next time you try to open a location "=org-protocol://...=" FF will ask you for
     the program to use. Enter the path to emacsclient.

# <<opera-setup>>
*** Opera

  Opera setup is described here:
  http://www.opera.com/support/kb/view/535/.

  To set up opera for use with org-protocol, follow these steps:

  1. Choose "/Tools/" -> "/Prefences/" from the menu.
  2. Select the tab "/Advanced/".
  3. Choose "/Programs/" from the list on the left.
  4. Now click the button "/Add/" on the very right.
  5. In the new dialog window, enter "=org-protocol=" as "/Protocol/", choose the
     radio button "/Open with other application/" and enter the path to
     emacsclient.

# <<windows-setup>>
*** Windows setup

  Windows users may register the "=org-protocol=" once for all by adjusting the
  following to their facts, save it as *.reg file and double-click it. This
  worked for me on Windows-XP Professional and the emasc23 from ourcomments.org
  ([[http://ourcomments.org/cgi-bin/emacsw32-dl-latest.pl]]). I'm no Windows user
  though and enhancements are more than welcome (org-mode mailinglist). The
  original file is from http://kb.mozillazine.org/Register_protocol.

#+begin_example
REGEDIT4

[HKEY_CLASSES_ROOT\org-protocol]
@="URL:Org Protocol"
"URL Protocol"=""
[HKEY_CLASSES_ROOT\org-protocol\shell]
[HKEY_CLASSES_ROOT\org-protocol\shell\open]
[HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
@="\"C:\\Programme\\Emacs\\emacs\\bin\\emacsclientw.exe\" \"%1\""
#+end_example

# <<test-org-protocol>>
*** A little testfile

    Here is a little testfile. Just save it, open it and click the links.

#+begin_src html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
   <title>Bli</title>
   <script type="text/javascript">
   <!--/*--><![CDATA[/*><!--*/
   function makeUrl() {
     return encodeURIComponent(location.href)+
            '/'+encodeURIComponent(document.title)+
            '/'+encodeURIComponent(window.getSelection());
   }
   function storeLink() {
     document.location.href='org-protocol://store-link://'+makeUrl();
   }
   function remember() {
     document.location.href='org-protocol://remember://'+makeUrl();
   }
   /*]]>*///-->
   </script>
  </head>
<body>
 <ul>
  <li><a href="javascript:storeLink();">Org store-link</a></li>
  <li><a href="javascript:remember();">Org remember</a></li>
 </ul>
</body>
</html>
#+end_src


* The default handler functions

  The three standard handlers all use a similar scheme. The description here is
  somewhat browser centric because that's where these handlers will used
  mostly.

  Here is the URL to use as "/Location/" for browser bookmarks (please remove the
  line breaks):

  : location.href='org-protocol://sub-protocol://'+
  :       encodeURIComponent(location.href)+'/'+
  :       encodeURIComponent(document.title)+'/'+
  :       encodeURIComponent(window.getSelection())

  This URL could be used for all three standard handlers in
  =org-protocol.el=. Some of the values will be ignored (e.g. =store-link:/= will
  use the URL and title only).

  emacsclient compresses double and tripple slashes to one. That's why it
  doesn't really matter how many slashes succeed the scheme part of the URL,
  also known as /protocol/.

*** Links and bookmarks: =org-protocol-store-link=

    =org-store-link= stores an Org-link insertable through =M-x org-insert-link= and
    pushes the URL found on the =kill-ring= for yanking (=C-y=). The sub-protocol
    used is "=store-link=":

    : emacsclient org-protocol:/store-link:/URL/TITLE

    will store this Org-link:

#+begin_example
[[URL][TITLE]]
#+end_example

    In addition, =URL= will be pushed on the =kill-ring= for yanking. You will have
    to encode =URL= and/or =TITLE= if they contain slashes, and probably quote those
    for the shell.

    If more than two fields of data (seperated by '=/=') are submitted, all but
    the first two will be discarded.


*** Note taking and citations: =org-protocol-remember=

    This one is triggered through the sub-protocol "=remember=" and consumes up to
    three data fields:

    : emacsclient org-protocol:/remember:/URL/TITLE/BODY

    will pop up an /*Remember*/ buffer and fill the template with the data
    submitted. The result depends on the template used:

    | Field | Template-escape filled | Description                                                                   |
    |-------+------------------------+-------------------------------------------------------------------------------|
    | =URL=   | =%c %x %:link=           | URL part of a link. The last one is the pure =URL=.                             |
    | =TITLE= | =%c %x %:description=    | Description part of a link. Please use the last one to access =TITLE= only.     |
    | =BODY=  | =%i=                     | Initial content, =BODY= in this example (e.g. selection in your browser window) |

    As you can see from this table, there is more than one way to use =URL= and
    =TITLE= because =org-protocol-remember= creates an Org-link from both of them
    and kills it.

    You may read more about templates and their special escape characters in the
    [[http://orgmode.org/manual/Remember-templates.html#Remember-templates][Org-mode manual]].

    Note, that this one, as opposed to the other two standard handlers, does not
    mix with more parameters to emacsclient. All parameters but the
    #'=org-protocol://org-remember://...=' one will be discarded.

***** Which remember template is used?

      You don't need to setup a remember template to use =org-protocol-remember=,
      since Org-mode provides a default template for those cases. But, for
      historical reasons, if a template with the template char '=?w=' is defined,
      this one will be choosen by default. This is to make bookmarks used for
      [[file:./org-annotation-helper.el][org-annotation-helper]] work without changing the template.

      The problem with this solution would be, that only one template can be
      used with the fuction. Luckily, =org-protocol-remember= understands a
      slightly extended syntax to choose between several templates: If the first
      field of the data submitted is exactly one character in length, this
      character will be used to select the template.

      Here we choose to use the '=?x=' template:

      : emacsclient org-protocol:/remember:/x/URL/TITLE/BODY


*** Edit published content: =org-protocol-open-source=

    This one was designed to help with opening sources for editing when
    browsing in the first place. =org-protocol-open-source= uses the custom
    variable =org-protocol-project-alist= to map URLs to (local) filenames.

    Let's take http://orgmode.org/worg/ as our example.

    Our intention is to click a bookmark (or link) to open the source of the
    published file we are reading in our favourite editor. The bookmark-URL
    above could be used again. But since =org-protocol-open-source= regards the
    first field only, this here will do:

    : location.href='org-protocol://open-source://'+encodeURIComponent(location.href)

    To open files publihed on Worg locally, =org-protocol-project-alist= should
    look like this (you may skip the second project):

#+begin_src emacs-lisp
(setq org-protocol-project-alist
      '(("Worg"
         :base-url "http://orgmode.org/worg/"
         :working-directory "/home/user/worg/"
         :online-suffix ".html"
         :working-suffix ".org")
        ("My local Org-notes"
         :base-url "http://localhost/org/"
         :working-directory "/home/user/org/"
         :online-suffix ".php"
         :working-suffix ".org")))
#+end_src

    If you're now browsing http://orgmode.org/worg/org-tutorials/org-protocol.el
    and find a typo or have an idea how to enhance the documentation, simply
    click the bookmark and start editing.

    There are to functions to help you filling =org-protocol-project-alist= with
    valid contents. First of which is =org-protocol-create= that guides you
    through the process. If you're editing an Org-mode file that is part of a
    publishing project in =org-publish-project-alist=, try

    : M-x org-protocol-create-for-org RET
