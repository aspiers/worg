#+TITLE:   org-protocol.el -- Intercept calls from emacsclient to trigger custom actions
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc ^:{} author:nil
#+STARTUP: odd
#+STYLE:   <script type="text/javascript">
#+STYLE:   <!--/*--><![CDATA[/*><!--*/
#+STYLE:   function makeUrl() {
#+STYLE:     return encodeURIComponent(location.href)+
#+STYLE:            '/'+encodeURIComponent(document.title)+
#+STYLE:            '/'+encodeURIComponent(window.getSelection());
#+STYLE:   }
#+STYLE:   function storeLink() {
#+STYLE:     document.location.href='org-protocol://store-link://'+makeUrl();
#+STYLE:   }
#+STYLE:   function remember() {
#+STYLE:     document.location.href='org-protocol://remember://'+makeUrl();
#+STYLE:   }
#+STYLE:   /*]]>*///-->
#+STYLE:   </script>

[[file:index.org][{Back to Worg's contibutions index}]]

org-protocol intercepts calls from emacsclient to trigger custom actions without
external dependencies. Only one protocol has to be configured with your external
applications or the operating system, to trigger an arbitrary number of custom
actions. Just register your custom sub-protocol and handler with the variable
`org-protocol-protocol-alist'.

# <<about>>
* About org-protocol.el

  =org-protocol.el= is based on code and ideas from [[file:./org-annotation-helper.org][org-annotation-helper.el]] and
  =org-browser-url.el=.

  "=org-protocol:/sub-protocol:/=" triggers actions assossiated with =sub-protocol=
  through the custom variable =org-protocol-protocol-alist=.

  It comes with three predefined handlers:
    - =org-protocol-store-link= ::
      triggered through the sub-protocol "=store-link=". Stores an Org-link and
      pushes the URL to the =kill-ring=.
    - =org-protocol-remember= ::
      Fill a remember buffer with informations gathered somewhere else. This one
      is triggered through the "=remember=" sub-protocol.
    - =org-protocol-open-source= ::
      "=open-source=". Maps URLs to local filenames. Use this to open sources of
      already published contents in emacs for editing.

  =org-protocol= helps creating custom handlers [[file:../org-tutorials/org-protocol-custom-handler.org][(tutorial)]] and so called
  =org-protocol-projects=.


# <<installation>>
* Installation

  - To load org-protocol.el add the following to your =.emacs=:

    : (server-start)
    : (add-to-list 'load-path "~/path/to/org/protocol/")
    : (require 'org-protocol)

* Browser / system setup

  Windows users proceed to the section [[windows-setup][Windows]].

# <<firefox-setup>>
*** Firefox

  As of March 2009 Firefox users follow the steps documented on
  http://kb.mozillazine.org/Register_protocol. Here is a summary:

  1. Type "=about:config=" into the location bar and press enter.
  2. Click "/I'll be careful, I promise!/" to continue.
  3. Right-click on the grid
  4. Choose "/New/" -> "/String/" from the context menu.
  5. Enter "=network.protocol-handler.app.org-protocol=" as the properties name.
  6. Click "/OK/".
  7. Leave the value blank.
  8. Next time you try to open a location "=org-protocol://...=" FF will ask you for
     the program to use. Enter the path to emacsclient.

*** Acrobat Reader
    :PROPERTIES:
    :CUSTOM_ID: acrobat-reader-setup
    :END:

    Adapted from [[http://article.gmane.org/gmane.emacs.orgmode/6810]]

    You place a javascript file for each menu entry in
    =~/.adobe/Acrobat/<VERSION>/JavaScripts= on unix-like systems or
    =c:/Program Files/Adobe/Acrobat <VERSION>/Reader/Javascripts/= on
    Windows, or wherever your Adobe Reader Installation might look for
    javascript.

    The examples given here will place new menu entries in the "Tools"
    menu, after restarting Adobe Reader.

***** org-store-link.js
: // from http://article.gmane.org/gmane.emacs.orgmode/6810
: app.addMenuItem({cName:"org-store-link", cParent:"Tools",
:    cExec:"app.launchURL('org-protocol://store-link://' + encodeURIComponent(this.URL) + '/' + encodeURIComponent(this.info.Title));"});

***** org-remember.js
: // from http://article.gmane.org/gmane.emacs.orgmode/6810
: app.addMenuItem({cName:"org-remember", cParent:"Tools",
:    cExec:"app.launchURL('org-protocol://remember://' + encodeURIComponent(this.URL) + '/' + encodeURIComponent(this.info.Title) + '/');"});


# <<opera-setup>>
*** Opera

  Opera setup is described here:
  http://www.opera.com/support/kb/view/535/.

  To set up opera for use with org-protocol, follow these steps:

  1. Choose "/Tools/" -> "/Prefences/" from the menu.
  2. Select the tab "/Advanced/".
  3. Choose "/Programs/" from the list on the left.
  4. Now click the button "/Add/" on the very right.
  5. In the new dialog window, enter "=org-protocol=" as "/Protocol/", choose the
     radio button "/Open with other application/" and enter the path to
     emacsclient.

# <<windows-setup>>
*** Windows setup

  Windows users may register the "=org-protocol=" once for all by adjusting the
  following to their facts, save it as *.reg file and double-click it. This
  worked for me on Windows-XP Professional and the emasc23 from ourcomments.org
  ([[http://ourcomments.org/cgi-bin/emacsw32-dl-latest.pl]]). I'm no Windows user
  though and enhancements are more than welcome on the org-mode mailinglist. The
  original file is from http://kb.mozillazine.org/Register_protocol.

#+begin_example
REGEDIT4

[HKEY_CLASSES_ROOT\org-protocol]
@="URL:Org Protocol"
"URL Protocol"=""
[HKEY_CLASSES_ROOT\org-protocol\shell]
[HKEY_CLASSES_ROOT\org-protocol\shell\open]
[HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
@="\"C:\\Programme\\Emacs\\emacs\\bin\\emacsclientw.exe\" \"%1\""
#+end_example


# <<test-org-protocol>>
*** Verify the installation

    After your protocol is registered with your browse/OS, these links here
    should work. Click on them and see if emacs reacts:

#+begin_html
 <ul>
  <li><a href="javascript:storeLink();">Org store-link</a></li>
  <li><a href="javascript:remember();">Org remember (select some text please)</a></li>
 </ul>
#+end_html


# <<default-location>>
* Using org-protocol

  To actually use org-protocol add a bookmark to Firefox or opera.

  Here is the URL to use as "/Location/" for browser bookmarks. Just remove the
  line breaks and replace "=sub-protocol=" with the real sub-protocol to use:

  : javascript:location.href='org-protocol://sub-protocol://'+
  :       encodeURIComponent(location.href)+'/'+
  :       encodeURIComponent(document.title)+'/'+
  :       encodeURIComponent(window.getSelection())

  This URL may be used for all three standard handlers in =org-protocol.el=. Some
  of the values will be ignored (e.g. =store-link:/= will use the URL and title
  only).

# <<org-protocol-store-link>>
* Links and bookmarks: =org-protocol-store-link=

  =org-store-link= stores an Org-link insertable through =M-x org-insert-link= and
  pushes the URL found on the =kill-ring= for yanking (=C-y=). The sub-protocol used
  is "=store-link=":

  : emacsclient org-protocol:/store-link:/URL/TITLE

  will store this Org-link:

#+begin_example
[[URL][TITLE]]
#+end_example

  In addition, =URL= will be pushed on the =kill-ring= for yanking ('=C-y='). You will
  have to encode =URL= and/or =TITLE= if they contain slashes, and probably quote
  those for the shell.

  To use this feature, add a bookmark with an arbitrary name (e.g.
  "/Org: store-link/") and enter this as "=Location=":

  : javascript:location.href='org-protocol://store-link://'+encodeURIComponent(location.href)


# <<org-protocol-remember>>
* Note taking and citations: =org-protocol-remember=

  This one is triggered through the sub-protocol "=remember=" and consumes up to
  three data fields:

  : emacsclient org-protocol:/remember:/URL/TITLE/BODY

  will pop up an /*Remember*/ buffer and fill the template with the data
  submitted.

  To use this feature, add a bookmark with an arbitrary name (e.g.
  "/Org: remember/") and enter this as "=Location=":

  : javascript:location.href='org-protocol://remember://'+
  :       encodeURIComponent(location.href)+'/'+
  :       encodeURIComponent(document.title)+'/'+
  :       encodeURIComponent(window.getSelection())

  The result depends on the template used. See [[example-template][An example remember template]]
  further down.

  Note, that this one, as opposed to the other two standard handlers, does not
  mix with more parameters to emacsclient. All parameters but the
  #'=org-protocol://org-remember://...=' one will be discarded.

*** Which remember template is used?

    You don't need to setup a remember template to use =org-protocol-remember=,
    since Org-mode provides a default template for those cases. But, for
    historical reasons, if a template with the template char '=?w=' is defined,
    this one will be choosen by default. This is to make bookmarks used for
    [[file:./org-annotation-helper.el][org-annotation-helper]] work without changing the template.

    The problem with this solution would be, that only one template can be used
    with the fuction. Luckily, =org-protocol-remember= understands a slightly
    extended syntax to choose between several templates: If the first field of
    the data submitted is exactly one character in length, this character will
    be used to select the template.

    Here we choose to use the '=?x=' template:

    : emacsclient org-protocol:/remember:/x/URL/TITLE/BODY

    And, again, as bookmark location:
    : javascript:location.href='org-protocol://remember://x/'+
    :       encodeURIComponent(location.href)+'/'+
    :       encodeURIComponent(document.title)+'/'+
    :       encodeURIComponent(window.getSelection())

# <<example-template>>
*** An example remember template

#+begin_src emacs-lisp
(setq org-remember-templates
      '((?w "* %^{Title}\n\n  Source: %u, %c\n\n  %i" nil "Notes")))
#+end_src

    - '=?w=' :: makes this one the default template used for
              "=org-protocol://remember://=" URLs.
    - '=%c=' :: will be replaced by an Org-link pointing to the location of the
             page you have been visiting when clicking on the link. The page
             title will be the links description.
    - '=%i=' :: will be replaced by the selected text in your browser window if
              any.

    In addition, you may use the following placeholders in your template:

    | Placeholders  | Replacement               |
    |---------------+---------------------------|
    | =%:link=        | URL of the web-page       |
    | =%:description= | The title of the web-page |
    | =%:initial=     | Selected text.            |

    You may read more about templates and their special escape characters in the
    [[http://orgmode.org/manual/Remember-templates.html#Remember-templates][Org-mode manual]].


# <<org-protocol-remember>>
* Edit published content: =org-protocol-open-source=

  This one was designed to help with opening sources for editing when browsing
  in the first place. =org-protocol-open-source= uses the custom variable
  =org-protocol-project-alist= to map URLs to (local) filenames.

  Let's take http://orgmode.org/worg/ as our example.

  Our intention is to click a bookmark (or link) to open the source of the
  published file we are reading in our favourite editor. The bookmark-URL above
  could be used again. But since =org-protocol-open-source= regards the first
  field only, this here will do:

  : javascript:location.href='org-protocol://open-source://'+encodeURIComponent(location.href)

  To open files publihed on Worg locally, =org-protocol-project-alist= should look
  like this (you may skip the second project):

#+begin_src emacs-lisp
(setq org-protocol-project-alist
      '(("Worg"
         :base-url "http://orgmode.org/worg/"
         :working-directory "/home/user/worg/"
         :online-suffix ".html"
         :working-suffix ".org")
        ("My local Org-notes"
         :base-url "http://localhost/org/"
         :working-directory "/home/user/org/"
         :online-suffix ".php"
         :working-suffix ".org")))
#+end_src

  If you're now browsing http://orgmode.org/worg/org-tutorials/org-protocol.php
  and find a typo or have an idea how to enhance the documentation, simply click
  the bookmark and start editing.

  There are to functions to help you filling =org-protocol-project-alist= with
  valid contents. First of which is =org-protocol-create= that guides you through
  the process. If you're editing an Org-mode file that is part of a publishing
  project in =org-publish-project-alist=, try

  : M-x org-protocol-create-for-org RET
* Other browsers
#<<conkeror-setup>>
*** Conkeror setup

Setting up org-protocol in [[http://conkeror.org/][Conkeror]] (an emacs inspired Mozilla web
browser) requires a slightly different method. You may simply add the
following snippets of code to your .conkerorrc file.[fn:tassilosblog]

For org-store-link, add the following to .conkerorrc:

: function org_store_link (url, title, window) {
:     var cmd_str = 'emacsclient \"org-protocol://store-link://'+url+'/'+title+'\"';
:     if (window != null) {
: 	window.minibuffer.message('Issuing ' + cmd_str);
:     }
:     shell_command_blind(cmd_str);
: }
:
: interactive("org-store-link", "Stores [[url][title]] as org link and copies url to emacs kill ring",
: 	    function (I) {
: 		org_store_link(encodeURIComponent(I.buffer.display_URI_string), encodeURIComponent(I.buffer.document.title), I.window);
: 	    });

For org-remember, use the following:

: function org_remember (url, title, selection, window) {
:     var cmd_str = 'emacsclient \"org-protocol://remember://'+url+'/'+title+'/'+selection+'\"';
:     if (window != null) {
: 	window.minibuffer.message('Issuing ' + cmd_str);
:     }
:     shell_command_blind(cmd_str);
: }
:
: interactive("org-remember", "Clip url, title, and selection to remember via org-protocol",
: 	    function (I) {
: 		org_remember(encodeURIComponent(I.buffer.display_URI_string), encodeURIComponent(I.buffer.document.title), encodeURIComponent(I.buffer.top_frame.getSelection()), I.window);
: 	    });

Now, you should be able to invoke the commands from within conkeror
with =M-x org-store-link= and =M-x org-remember=.

Or, if you'd like your familiar emacs keybindings, you can add the
following to your .conkerorrc:

: define_key(content_buffer_normal_keymap, "C-c r", "org-remember");
: define_key(content_buffer_normal_keymap, "C-c l", "org-store-link");

[fn:tassilosblog] Adapted from Tassilo Horn's blog, "Calling
org-remember from inside conkeror," November 14, 2008.
http://tsdh.wordpress.com/2008/11/14/calling-org-remember-from-inside-conkeror/
