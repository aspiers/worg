#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate hideblocks
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+TITLE:      Bugpile
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tj[at]data-driven[dot]de
#+LANGUAGE:   en
#+STYLE:      <style type="text/css">#outline-container-introduction{ clear:both; }</style>
#+LINK_UP:  index.html
#+LINK_HOME:  http://orgmode.org/worg/
#+EXPORT_EXCLUDE_TAGS: noexport


# #+name: banner
# #+begin_html
#   <div id="subtitle" style="float: center; text-align: center;">
#   <p>
#   Bugpile - the Org-mode bugtracker  <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2012">GSoC 2012</a>
#   </p>
#   <p>
#   <a
#   href="http://www.google-melange.com/gsoc/homepage/google/gsoc2012"/>
# <img src="../../../images/gsoc/DSCI0279_60pc.png"  alt="Beach, Books
#   and Beer"/>
#   </a>
#   </p>
#   </div>
# #+end_html

/A bugtracker for GNU Emacs Org-mode/
/written in Org-mode and Picolisp/

* Bugtrackers in general
** The importance of bugtrackers 

The following quote from [[http://www.joelonsoftware.com/articles/fog0000000043.html][Joel Spolsky]] emphases the importance of
bugtrackers for good software development:

#+BEGIN_QUOTE
: Do you have a bug database?
: 
: I don't care what you say. If you are developing code, even on a team
: of one, without an organized database listing all known bugs in the
: code, you are going to ship low quality code. Lots of programmers
: think they can hold the bug list in their heads. Nonsense. I can't
: remember more than two or three bugs at a time, and the next morning,
: or in the rush of shipping, they are forgotten. You absolutely have to
: keep track of bugs formally.
: 
: Bug databases can be complicated or simple. A minimal useful bug
: database must include the following data for every bug:
: 
:   - complete steps to reproduce the bug
:   - expected behavior
:   - observed (buggy) behavior
:   - who it's assigned to
:   - whether it has been fixed or not
: 
: If the complexity of bug tracking software is the only thing stopping
: you from tracking your bugs, just make a simple 5 column table with
: these crucial fields and start using it.
#+END_QUOTE

** Elements of a good bug report

Again citing [[http://www.joelonsoftware.com/articles/fog0000000029.html][Joel Spolsky]], here are the three fundamental elements of
a good bug report:

#+BEGIN_QUOTE
: It's pretty easy to remember the rule for a good bug report. Every
: good bug report needs exactly three things.
: 
:  1. Steps to reproduce,
:  2. What you expected to see, and
:  3. What you saw instead.
#+END_QUOTE

# ** The design of bugtrackers

** Popular free bugtrackers

From the many free bugtrackers available, two will probably be of
special importance for the bugpile project:

- bugzilla :: a feature-rich, established and well documented
              [[http://www.bugzilla.org/][bugtracker]].
- flyspray :: an uncomplicated, web-based [[http://flyspray.org/][bug tracking system]], used
              bei ArchLinux.

* Bugpile 
** Fundamental design decisions  
In the very beginning, a few fundamental decisions about the
characteristics of bugpile were taken:

 - bugtracker only :: bugpile is for bugtracking only,
      project-planning or other related functionality is not included. 
 - power-users first :: bugpile is a bugtracker tailor-made for emacs
      users. The bugpile-mode for emacs is considered the main
      interface to the application. 
 - emacs- & web-interface :: besides being focussed on power-users,
      a web-interface for bugpile is considered indispensable. It
      doesn't need to offer all the functionality of the emacs-mode.

