#+TITLE: Documentation for Org hooks, commands and options
#+AUTHOR: Bastien
#+DESCRIPTION: List of all hooks, commands and options
#+KEYWORDS: Org hooks, commands and options
#+OPTIONS:    H:3 num:nil toc:t \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc

* Definitions

This page lists *all hooks, commands and options* of Org 9.0.9.

- *Hooks* :: are options containing functions to be run before or after a
             function.  For example, =org-mode-hook= can contain a list of
             functions to be called after org-mode is turned on.

- *Commands* :: are interactive functions that the user can run with =M-x
                command RET=.  Most commands have an associated keybinding,
                indicated here. Users can bind command to his preferred
                keybinding.

- *Options* :: are variables that the user can set through the =customize=
               interface. Calling =M-x customize-variable RET= then
               completing over availables options will open the custom
               interface, which makes it easy to set an option.

These are the main "internals" that the uesr may want to know about, and we
list them here for further reference.  E.g. You can safely create links to
=https://orgmode.org/worg/doc.html#org-agenda= to refer to the documentation
of the =org-agenda= command.

On top of these symbols, there are other non-interactive /functions/ and
/variables/.  You can get more documentation about them with =C-h f org-
TAB= and =C-h v org- TAB= respectively.

* Hooks
  :PROPERTIES:
  :CUSTOM_ID: hooks
  :END:

** org-checkbox-statistics-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-checkbox-statistics-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-checkbox-statistics-hook&sr=1][Find modifications in git logs]]

: Hook that is run whenever Org thinks checkbox statistics should be updated.
: This hook runs even if checkbox rule in
: `org-list-automatic-rules' does not apply, so it can be used to
: implement alternative ways of collecting statistics
: information.

** org-todo-setup-filter-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-setup-filter-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-setup-filter-hook&sr=1][Find modifications in git logs]]

: Hook for functions that pre-filter todo specs.
: Each function takes a todo spec and returns either nil or the spec
: transformed into canonical form.

** org-timer-continue-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-continue-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-continue-hook&sr=1][Find modifications in git logs]]

: Hook run after relative or countdown timer is continued.

** org-clock-in-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-in-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-in-hook&sr=1][Find modifications in git logs]]

: Hook run when starting the clock.

** org-clock-before-select-task-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-before-select-task-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-before-select-task-hook&sr=1][Find modifications in git logs]]

: Hook called in task selection just before prompting the user.

** org-property-allowed-value-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-mode-off-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-property-allowed-value-functions&sr=1][Find modifications in git logs]]

: Hook for functions supplying allowed values for a specific property.
: The functions must take a single argument, the name of the property, and
: return a flat list of allowed values.  If ":ETC" is one of
: the values, this means that these values are intended as defaults for
: completion, but that other values should be allowed too.
: The functions must return nil if they are not responsible for this
: property.

** org-after-todo-state-change-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-after-todo-state-change-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-after-todo-state-change-hook&sr=1][Find modifications in git logs]]

: Hook which is run after the state of a TODO item was changed.
: The new state (a string with a TODO keyword, or nil) is available in the
: Lisp variable `org-state'.

** org-capture-prepare-finalize-hook =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-prepare-finalize-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-prepare-finalize-hook&sr=1][Find modifications in git logs]]

: Hook that is run before the finalization starts.
: The capture buffer is current and still narrowed.

** org-timer-stop-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-stop-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-stop-hook&sr=1][Find modifications in git logs]]

: Hook run before relative or countdown timer is stopped.

** org-metaleft-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-metaleft-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metaleft-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-left'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-export-filter-bold-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: orgstruct-mode-off-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-bold-functions&sr=1][Find modifications in git logs]]

: List of functions applied to transcoded bold text.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-before-parsing-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-mode-on-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-before-parsing-hook&sr=1][Find modifications in git logs]]

: Hook run before parsing an export buffer.
: 
: This is run after include keywords and macros have been expanded
: and Babel code blocks executed, on a copy of the original buffer
: being exported.  Visibility and narrowing are preserved.  Point
: is at the beginning of the buffer.
: 
: Every function in this hook will be called with one argument: the
: back-end currently used, as a symbol.

** org-feed-before-adding-hook =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-before-adding-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-before-adding-hook&sr=1][Find modifications in git logs]]

: Hook that is run before adding new feed items to a file.
: You might want to commit the file in its current state to version control,
: for example.

** org-export-filter-diary-sexp-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-diary-sexp-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-diary-sexp-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded diary-sexp.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-after-todo-statistics-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-after-todo-statistics-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-after-todo-statistics-hook&sr=1][Find modifications in git logs]]

: Hook that is called after a TODO statistics cookie has been updated.
: Each function is called with two arguments: the number of not-done entries
: and the number of done entries.
: 
: For example, the following function, when added to this hook, will switch
: an entry to DONE when all children are done, and back to TODO when new
: entries are set to a TODO status.  Note that this hook is only called
: when there is a statistics cookie in the headline!
: 
:  (defun org-summary-todo (n-done n-not-done)
:    "Switch entry to DONE when all subentries are done, to TODO otherwise."
:    (let (org-log-done org-log-states)   ; turn off logging
:      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
: 

** org-export-filter-export-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-export-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-export-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded export-block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-babel-after-execute-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-after-execute-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-after-execute-hook&sr=1][Find modifications in git logs]]

: Hook for functions to be called after `org-babel-execute-src-block'

** org-icalendar-after-save-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-after-save-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-after-save-hook&sr=1][Find modifications in git logs]]

: Hook run after an iCalendar file has been saved.
: This hook is run with the name of the file as argument.  A good
: way to use this is to tell a desktop calendar application to
: re-read the iCalendar file.

** org-metaright-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-metaright-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metaright-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-right'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-cycle-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-hook
   :END:
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-hook&sr=1][Find modifications in git logs]]

: Hook that is run after `org-cycle' has changed the buffer visibility.
: The function(s) in this hook must accept a single argument which indicates
: the new state that was set by the most recent `org-cycle' command.  The
: argument is a symbol.  After a global state change, it can have the values
: `overview', `contents', or `all'.  After a local state change, it can have
: the values `folded', `children', or `subtree'.

** org-export-filter-subscript-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-subscript-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-subscript-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded subscript.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-entity-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-entity-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-entity-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded entity.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-after-sorting-entries-or-items-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-after-sorting-entries-or-items-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-after-sorting-entries-or-items-hook&sr=1][Find modifications in git logs]]

: Hook that is run after a bunch of entries or items have been sorted.
: When children are sorted, the cursor is in the parent line when this
: hook gets called.  When a region or a plain list is sorted, the cursor
: will be in the first entry of the sorted region/list.

** org-timer-done-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-done-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-done-hook&sr=1][Find modifications in git logs]]

: Hook run after countdown timer reaches zero.

** org-shiftmetaup-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetaup-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetaup-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-S-up'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-tab-after-check-for-table-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-tab-after-check-for-table-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tab-after-check-for-table-hook&sr=1][Find modifications in git logs]]

: Hook for functions to attach themselves to TAB.
: See `org-ctrl-c-ctrl-c-hook' for more information.
: This hook runs after it has been established that the cursor is not in a
: table, but before checking if the cursor is in a headline or if global cycling
: should be done.
: If any function in this hook returns t, not other actions like visibility
: cycling will be done.

** org-open-at-point-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-open-at-point-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-at-point-functions&sr=1][Find modifications in git logs]]

: Hook that is run when following a link at point.
: 
: Functions in this hook must return t if they identify and follow
: a link at point.  If they don't find anything interesting at point,
: they must return nil.

** org-property-changed-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-property-changed-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-property-changed-functions&sr=1][Find modifications in git logs]]

: Hook called when the value of a property has changed.
: Each hook function should accept two arguments, the name of the property
: and the new value.

** orgstruct-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: orgstruct-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgstruct-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `orgstruct-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-mobile-pre-push-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-pre-push-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-pre-push-hook&sr=1][Find modifications in git logs]]

: Hook run before running `org-mobile-push'.
: This could be used to clean up `org-mobile-directory', for example to
: remove files that used to be included in the agenda but no longer are.
: The presence of such files would not really be a problem, but after time
: they may accumulate.

** org-export-filter-link-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-link-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-link-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded link.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-shiftright-final-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftright-final-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftright-final-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-right'.
: This one runs after all other options except shift-select have been excluded.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-capture-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `org-capture-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-mobile-post-pull-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-src-mode-off-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-post-pull-hook&sr=1][Find modifications in git logs]]

: Hook run after running `org-mobile-pull', only if new items were found.
: If Emacs does not have direct write access to the WebDAV directory used
: by the mobile device, this hook should be used to copy the emptied
: capture file `mobileorg.org' back to the WebDAV directory, for example
: using `rsync' or `scp'.

** org-table-follow-field-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-table-follow-field-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-follow-field-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `org-table-follow-field-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-export-filter-underline-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-underline-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-underline-functions&sr=1][Find modifications in git logs]]

: List of functions applied to transcoded underline text.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-target-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-mode-off-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-target-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded target.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-shiftdown-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftdown-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftdown-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-down'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-ctrl-c-ctrl-c-final-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-ctrl-c-ctrl-c-final-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctrl-c-ctrl-c-final-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `C-c C-c'.
: 
: This can be used to add additional functionality to the C-c C-c
: key which executes context-dependent commands.  This hook is run
: after any other test, while `org-ctrl-c-ctrl-c-hook' is run
: before the first test.
: 
: Each function will be called with no arguments.  The function
: must check if the context is appropriate for it to act.  If yes,
: it should do its thing and then return a non-nil value.  If the
: context is wrong, just do nothing and return nil.

** org-archive-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-hook&sr=1][Find modifications in git logs]]

: Hook run after successfully archiving a subtree.
: Hook functions are called with point on the subtree in the
: original file.  At this stage, the subtree has been added to the
: archive location, but not yet deleted from the original file.

** org-shiftleft-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftleft-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftleft-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-left'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-todo-get-default-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-get-default-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-get-default-hook&sr=1][Find modifications in git logs]]

: Hook for functions that get a default item for todo.
: Each function takes arguments (NEW-MARK OLD-MARK) and returns either
: nil or a string to be used for the todo mark.

** org-export-filter-body-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-body-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-body-functions&sr=1][Find modifications in git logs]]

: List of functions applied to transcoded body.
: Each filter is called with three arguments: a string which
: contains no Org syntax, the back-end, as a symbol, and the
: communication channel, as a plist.  It must return a string or
: nil.

** org-clock-cancel-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-cancel-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-cancel-hook&sr=1][Find modifications in git logs]]

: Hook run when canceling the current clock.

** org-open-link-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-open-link-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-link-functions&sr=1][Find modifications in git logs]]

: Hook for functions finding a plain text link.
: These functions must take a single argument, the link content.
: They will be called for links that look like [[link text][description]]
: when LINK TEXT does not have a protocol like "http:" and does not look
: like a filename (e.g. "./blue.png").
: 
: These functions will be called *before* Org attempts to resolve the
: link by doing text searches in the current buffer - so if you want a
: link "[[target]]" to still find "<<target>>", your function should
: handle this as a special case.
: 
: When the function does handle the link, it must return a non-nil value.
: If it decides that it is not responsible for this link, it must return
: nil to indicate that that Org can continue with other options like
: exact and fuzzy text search.

** org-export-filter-code-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-code-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-code-functions&sr=1][Find modifications in git logs]]

: List of functions applied to transcoded code text.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-shiftmetaright-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetaright-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetaright-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-S-right'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-export-filter-keyword-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-keyword-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-keyword-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded keyword.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-paragraph-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-paragraph-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-paragraph-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded paragraph.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-horizontal-rule-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-horizontal-rule-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-horizontal-rule-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded horizontal-rule.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-property-drawer-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-property-drawer-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-property-drawer-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded property-drawer.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-shiftup-final-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftup-final-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftup-final-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-up'.
: This one runs after all other options except shift-select have been excluded.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-export-filter-inline-src-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-inline-src-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-inline-src-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded inline-src-block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-stack-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-mode-off-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-stack-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering Org-Stack mode.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-shiftright-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftright-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftright-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-right'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-agenda-before-write-hook =(quote (org-agenda-add-entry-t...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-before-write-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-before-write-hook&sr=1][Find modifications in git logs]]

: Hook run in a temporary buffer before writing the agenda to an export file.
: A useful function for this hook is `org-agenda-add-entry-text'.

** org-export-filter-italic-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-italic-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-italic-functions&sr=1][Find modifications in git logs]]

: List of functions applied to transcoded italic text.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-babel-pre-tangle-hook =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-pre-tangle-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-pre-tangle-hook&sr=1][Find modifications in git logs]]

: Hook run at the beginning of `org-babel-tangle'.

** org-export-filter-plain-text-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-plain-text-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-plain-text-functions&sr=1][Find modifications in git logs]]

: List of functions applied to plain text.
: Each filter is called with three arguments: a string which
: contains no Org syntax, the back-end, as a symbol, and the
: communication channel, as a plist.  It must return a string or
: nil.

** org-agenda-after-show-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-after-show-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-after-show-hook&sr=1][Find modifications in git logs]]

: Normal hook run after an item has been shown from the agenda.
: Point is in the buffer where the item originated.

** org-timer-start-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-start-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-start-hook&sr=1][Find modifications in git logs]]

: Hook run after relative timer is started.

** org-shiftleft-final-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftleft-final-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftleft-final-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-left'.
: This one runs after all other options except shift-select have been excluded.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-agenda-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after `org-agenda-mode' is turned on.
: The buffer is still writable when this hook is called.

** org-occur-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-occur-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-occur-hook&sr=1][Find modifications in git logs]]

: Hook that is run after `org-occur' has constructed a sparse tree.
: This can be used to recenter the window to show as much of the structure
: as possible.

** org-agenda-cleanup-fancy-diary-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-cleanup-fancy-diary-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-cleanup-fancy-diary-hook&sr=1][Find modifications in git logs]]

: Hook run when the fancy diary buffer is cleaned up.

** org-export-filter-item-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-item-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-item-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded item.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-inlinetask-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-table-follow-field-mode-off-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-inlinetask-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded inlinetask.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-mode-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-mode-on-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering Org mode.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-clock-in-prepare-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-in-prepare-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-in-prepare-hook&sr=1][Find modifications in git logs]]

: Hook run when preparing the clock.
: This hook is run before anything happens to the task that
: you want to clock in.  For example, you can use this hook
: to add an effort property.

** org-export-filter-headline-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-headline-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-headline-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded headline.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-timer-set-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-set-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-set-hook&sr=1][Find modifications in git logs]]

: Hook run after countdown timer is set.

** org-export-filter-table-cell-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-table-cell-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-table-cell-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded table-cell.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-speed-command-hook =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-speed-command-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-speed-command-hook&sr=1][Find modifications in git logs]]

: Hook for activating speed commands at strategic locations.
: Hook functions are called in sequence until a valid handler is
: found.
: 
: Each hook takes a single argument, a user-pressed command key
: which is also a `self-insert-command' from the global map.
: 
: Within the hook, examine the cursor position and the command key
: and return nil or a valid handler as appropriate.  Handler could
: be one of an interactive command, a function, or a form.
: 
: Set `org-use-speed-commands' to non-nil value to enable this
: hook.  The default setting is `org-speed-command-activate'.

** org-metaup-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-metaup-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metaup-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-up'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-ctrl-c-ctrl-c-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-ctrl-c-ctrl-c-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctrl-c-ctrl-c-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `C-c C-c'.
: 
: This can be used to add additional functionality to the C-c C-c
: key which executes context-dependent commands.  This hook is run
: before any other test, while `org-ctrl-c-ctrl-c-final-hook' is
: run after the last test.
: 
: Each function will be called with no arguments.  The function
: must check if the context is appropriate for it to act.  If yes,
: it should do its thing and then return a non-nil value.  If the
: context is wrong, just do nothing and return nil.

** orgtbl-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `orgtbl-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-load-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-load-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-load-hook&sr=1][Find modifications in git logs]]

: Hook that is run after org.el has been loaded.

** org-todo-statistics-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-statistics-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-statistics-hook&sr=1][Find modifications in git logs]]

: Hook that is run whenever Org thinks TODO statistics should be updated.
: This hook runs even if there is no statistics cookie present, in which case
: `org-after-todo-statistics-hook' would not run.

** org-pre-cycle-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-pre-cycle-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-pre-cycle-hook&sr=1][Find modifications in git logs]]

: Hook that is run before visibility cycling is happening.
: The function(s) in this hook must accept a single argument which indicates
: the new state that will be set right after running this hook.  The
: argument is a symbol.  Before a global state change, it can have the values
: `overview', `content', or `all'.  Before a local state change, it can have
: the values `folded', `children', or `subtree'.

** org-export-filter-planning-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-planning-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-planning-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded planning.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-options-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-options-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-options-functions&sr=1][Find modifications in git logs]]

: List of functions applied to the export options.
: Each filter is called with two arguments: the export options, as
: a plist, and the back-end, as a symbol.  It must return
: a property list containing export options.

** orgstruct-setup-hook =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-cdlatex-mode-off-hook
   :END:
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgstruct-setup-hook&sr=1][Find modifications in git logs]]

: Hook run after orgstruct-mode-map is filled.

** org-capture-after-finalize-hook =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-after-finalize-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-after-finalize-hook&sr=1][Find modifications in git logs]]

: Hook that is run right after a capture process is finalized.
: Suitable for window cleanup.

** org-mobile-before-process-capture-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-before-process-capture-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-before-process-capture-hook&sr=1][Find modifications in git logs]]

: Hook that is run after content was moved to `org-mobile-inbox-for-pull'.
: The inbox file is visited by the current buffer, and the buffer is
: narrowed to the newly captured data.

** org-export-filter-statistics-cookie-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-statistics-cookie-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-statistics-cookie-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded statistics-cookie.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-dynamic-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-dynamic-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-dynamic-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded dynamic-block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-quote-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-quote-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-quote-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded quote block.
: Each filter is called with three arguments: the transcoded quote
: data, as a string, the back-end, as a symbol, and the
: communication channel, as a plist.  It must return a string or
: nil.

** org-mobile-post-push-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-post-push-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-post-push-hook&sr=1][Find modifications in git logs]]

: Hook run after running `org-mobile-push'.
: If Emacs does not have direct write access to the WebDAV directory used
: by the mobile device, this hook should be used to copy all files from the
: local staging directory `org-mobile-directory' to the WebDAV directory,
: for example using `rsync' or `scp'.

** org-export-before-processing-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-before-processing-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-before-processing-hook&sr=1][Find modifications in git logs]]

: Hook run at the beginning of the export process.
: 
: This is run before include keywords and macros are expanded and
: Babel code blocks executed, on a copy of the original buffer
: being exported.  Visibility and narrowing are preserved.  Point
: is at the beginning of the buffer.
: 
: Every function in this hook will be called with one argument: the
: back-end currently used, as a symbol.

** org-export-filter-clock-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-clock-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-clock-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded clock.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-superscript-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-superscript-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-superscript-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded superscript.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-verbatim-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-verbatim-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-verbatim-functions&sr=1][Find modifications in git logs]]

: List of functions applied to transcoded verbatim text.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-radio-target-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-radio-target-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-radio-target-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded radio-target.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-footnote-definition-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-footnote-definition-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-footnote-definition-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded footnote-definition.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-cdlatex-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-cdlatex-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cdlatex-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `org-cdlatex-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-export-filter-center-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-center-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-center-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded center block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-plain-list-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-plain-list-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-plain-list-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded plain-list.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-strike-through-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-strike-through-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-strike-through-functions&sr=1][Find modifications in git logs]]

: List of functions applied to transcoded strike-through text.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-parse-tree-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-parse-tree-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-parse-tree-functions&sr=1][Find modifications in git logs]]

: List of functions applied to the parsed tree.
: Each filter is called with three arguments: the parse tree, as
: returned by `org-element-parse-buffer', the back-end, as
: a symbol, and the communication channel, as a plist.  It must
: return the modified parse tree to transcode.

** org-publish-after-publishing-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-after-publishing-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-after-publishing-hook&sr=1][Find modifications in git logs]]

: Hook run each time a file is published.
: Every function in this hook will be called with two arguments:
: the name of the original file and the name of the file
: produced.

** org-clock-out-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-out-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-out-hook&sr=1][Find modifications in git logs]]

: Hook run when stopping the current clock.

** org-follow-link-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cdlatex-mode-on-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-follow-link-hook&sr=1][Find modifications in git logs]]

: Hook that is run after a link has been followed.

** org-metareturn-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-metareturn-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metareturn-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-RET'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-after-demote-entry-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-after-demote-entry-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-after-demote-entry-hook&sr=1][Find modifications in git logs]]

: Hook run after an entry has been demoted.
: The cursor will be at the beginning of the entry.
: When a subtree is being demoted, the hook will be called for each node.

** org-shiftdown-final-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftdown-final-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftdown-final-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-down'.
: This one runs after all other options except shift-select have been excluded.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-export-filter-table-row-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-table-row-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-table-row-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded table-row.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-beamer-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `org-beamer-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-after-promote-entry-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-store-link-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-after-promote-entry-hook&sr=1][Find modifications in git logs]]

: Hook run after an entry has been promoted.
: The cursor will be at the beginning of the entry.
: When a subtree is being promoted, the hook will be called for each node.

** org-after-tags-change-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-after-tags-change-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-after-tags-change-hook&sr=1][Find modifications in git logs]]

: Hook that is run after the tags in a line have changed.

** org-after-refile-insert-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-after-refile-insert-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-after-refile-insert-hook&sr=1][Find modifications in git logs]]

: Hook run after `org-refile' has inserted its stuff at the new location.
: Note that this is still *before* the stuff will be removed from
: the *old* location.

** org-export-filter-drawer-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-drawer-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-drawer-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded drawer.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-example-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-mode-off-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-example-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded example-block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-capture-before-finalize-hook =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-before-finalize-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-before-finalize-hook&sr=1][Find modifications in git logs]]

: Hook that is run right before a capture process is finalized.
: The capture buffer is still current when this hook runs and it is
: widened to the entire buffer.

** org-execute-file-search-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-execute-file-search-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-execute-file-search-functions&sr=1][Find modifications in git logs]]

: List of functions to execute a file search triggered by a link.
: 
: Functions added to this hook must accept a single argument, the
: search string that was part of the file link, the part after the
: double colon.  The function must first check if it would like to
: handle this search, for example by checking the `major-mode' or
: the file extension.  If it decides not to handle this search, it
: should just return nil to give other functions a chance.  If it
: does handle the search, it must return a non-nil value to keep
: other functions from trying.
: 
: Each function can access the current prefix argument through the
: variable `current-prefix-arg'.  Note that a single prefix is used
: to force opening a link in Emacs, so it may be good to only use a
: numeric or double prefix to guide the search function.
: 
: In case this is needed, a function in this hook can also restore
: the window configuration before `org-open-at-point' was called using:
: 
:     (set-window-configuration org-window-config-before-follow-link)

** org-export-filter-export-snippet-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-export-snippet-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-export-snippet-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded export-snippet.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-timer-pause-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-pause-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-pause-hook&sr=1][Find modifications in git logs]]

: Hook run before relative or countdown timer is paused.

** org-agenda-bulk-custom-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-custom-functions
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-custom-functions&sr=1][Find modifications in git logs]]

: Alist of characters and custom functions for bulk actions.
: For example, this value makes those two functions available:
: 
:   \='((?R set-category)
:     (?C bulk-cut))
: 
: With selected entries in an agenda buffer, `B R' will call
: the custom function `set-category' on the selected entries.
: Note that functions in this alist don't need to be quoted.

** org-export-filter-babel-call-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-babel-call-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-babel-call-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded babel-call.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-reveal-start-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-reveal-start-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-reveal-start-hook&sr=1][Find modifications in git logs]]

: Hook run before revealing a location.

** org-export-filter-latex-fragment-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-latex-fragment-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-latex-fragment-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded latex-fragment.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-latex-environment-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-latex-environment-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-latex-environment-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded latex-environment.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-tab-after-check-for-cycling-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-tab-after-check-for-cycling-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tab-after-check-for-cycling-hook&sr=1][Find modifications in git logs]]

: Hook for functions to attach themselves to TAB.
: See `org-ctrl-c-ctrl-c-hook' for more information.
: This hook runs after it has been established that not table field motion and
: not visibility should be done because of current context.  This is probably
: the place where a package like yasnippets can hook in.

** org-log-buffer-setup-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-buffer-setup-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-buffer-setup-hook&sr=1][Find modifications in git logs]]

: Hook that is run after an Org log buffer is created.

** org-babel-tangle-body-hook =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-body-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-body-hook&sr=1][Find modifications in git logs]]

: Hook run over the contents of each code block body.

** org-export-filter-timestamp-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-timestamp-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-timestamp-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded timestamp.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-fixed-width-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-fixed-width-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-fixed-width-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded fixed-width.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-insert-heading-hook =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-heading-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-heading-hook&sr=1][Find modifications in git logs]]

: Hook being run after inserting a new heading.

** org-shiftmetadown-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetadown-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetadown-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-S-down'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-shiftup-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftup-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftup-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `S-up'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-shiftmetaleft-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetaleft-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetaleft-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-S-left'.
: See `org-ctrl-c-ctrl-c-hook' for more information.

** org-lint--report-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-lint--report-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-lint.el;hb=HEAD][org-lint.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lint--report-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering OrgLint mode.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-ctags-open-link-functions =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-open-link-functions
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-open-link-functions&sr=1][Find modifications in git logs]]

: List of functions to be prepended to ORG-OPEN-LINK-FUNCTIONS when ORG-CTAGS is active.

** org-babel-post-tangle-hook =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-post-tangle-hook
   :END:
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-post-tangle-hook&sr=1][Find modifications in git logs]]

: Hook run in code files tangled by `org-babel-tangle'.

** org-tab-first-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-tab-first-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tab-first-hook&sr=1][Find modifications in git logs]]

: Hook for functions to attach themselves to TAB.
: See `org-ctrl-c-ctrl-c-hook' for more information.
: This hook runs as the first action when TAB is pressed, even before
: `org-cycle' messes around with the `outline-regexp' to cater for
: inline tasks and plain list item folding.
: If any function in this hook returns t, any other actions that
: would have been caused by TAB (such as table field motion or visibility
: cycling) will not occur.

** org-agenda-finalize-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-finalize-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-finalize-hook&sr=1][Find modifications in git logs]]

: Hook run just before displaying an agenda buffer.
: The buffer is still writable when the hook is called.
: 
: You can modify some of the buffer substrings but you should be
: extra careful not to modify the text properties of the agenda
: headlines as the agenda display heavily relies on them.

** org-clock-goto-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-goto-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-goto-hook&sr=1][Find modifications in git logs]]

: Hook run when selecting the currently clocked-in entry.

** orgtbl-after-send-table-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-after-send-table-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-after-send-table-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching to `C-c C-c', if the table is sent.
: This can be used to add additional functionality after the table is sent
: to the receiver position, otherwise, if table is not sent, the functions
: are not run.

** org-export-filter-footnote-reference-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-footnote-reference-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-footnote-reference-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded footnote-reference.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-line-break-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-line-break-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-line-break-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded line-break.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-inline-babel-call-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-inline-babel-call-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-inline-babel-call-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded inline-babel-call.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-font-lock-set-keywords-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-font-lock-set-keywords-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-font-lock-set-keywords-hook&sr=1][Find modifications in git logs]]

: Functions that can manipulate `org-font-lock-extra-keywords'.
: This is called after `org-font-lock-extra-keywords' is defined, but before
: it is installed to be used by font lock.  This can be useful if something
: needs to be inserted at a specific position in the font-lock sequence.

** org-mobile-pre-pull-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-pre-pull-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-pre-pull-hook&sr=1][Find modifications in git logs]]

: Hook run before executing `org-mobile-pull'.
: If Emacs does not have direct write access to the WebDAV directory used
: by the mobile device, this hook should be used to copy the capture file
: `mobileorg.org' from the WebDAV location to the local staging
: directory `org-mobile-directory'.

** org-font-lock-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-font-lock-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-font-lock-hook&sr=1][Find modifications in git logs]]

: Functions to be called for special font lock stuff.

** org-export-filter-final-output-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: orgstruct-mode-on-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-final-output-functions&sr=1][Find modifications in git logs]]

: List of functions applied to the transcoded string.
: Each filter is called with three arguments: the full transcoded
: string, the back-end, as a symbol, and the communication channel,
: as a plist.  It must return a string that will be used as the
: final export output.

** org-indent-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-indent.el;hb=HEAD][org-indent.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `org-indent-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-export-filter-special-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-special-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-special-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded special block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-table-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-table-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-table-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded table.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-feed-after-adding-hook =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-after-adding-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-after-adding-hook&sr=1][Find modifications in git logs]]

: Hook that is run after new items have been added to a file.
: Depending on `org-feed-save-after-adding', the buffer will already
: have been saved.

** org-trigger-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-trigger-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-trigger-hook&sr=1][Find modifications in git logs]]

: Hook for functions that are triggered by a state change.
: 
: Each function gets as its single argument a property list with at
: least the following elements:
: 
:  (:type type-of-change :position pos-at-entry-start
:   :from old-state :to new-state)
: 
: Depending on the type, more properties may be present.
: 
: This mechanism is currently implemented for:
: 
: TODO state changes
: ------------------
: :type  todo-state-change
: :from  previous state (keyword as a string), or nil, or a symbol
:        `todo' or `done', to indicate the general type of state.
: :to    new state, like in :from

** org-blocker-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-apply-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-blocker-hook&sr=1][Find modifications in git logs]]

: Hook for functions that are allowed to block a state change.
: 
: Functions in this hook should not modify the buffer.
: Each function gets as its single argument a property list,
: see `org-trigger-hook' for more information about this list.
: 
: If any of the functions in this hook returns nil, the state change
: is blocked.

** org-export-filter-src-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-src-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-src-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded src-block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-tab-before-tab-emulation-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-J-interleave-echos-except-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tab-before-tab-emulation-hook&sr=1][Find modifications in git logs]]

: Hook for functions to attach themselves to TAB.
: See `org-ctrl-c-ctrl-c-hook' for more information.
: This hook runs after every other options for TAB have been exhausted, but
: before indentation and 	 insertion takes place.

** org-export-filter-node-property-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-node-property-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-node-property-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded node-property.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-agenda-entry-text-cleanup-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-entry-text-cleanup-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-entry-text-cleanup-hook&sr=1][Find modifications in git logs]]

: Hook that is run after basic cleanup of entry text to be shown in agenda.
: This cleanup is done in a temporary buffer, so the function may inspect and
: change the entire buffer.
: Some default stuff like drawers and scheduling/deadline dates will already
: have been removed when this is called, as will any matches for regular
: expressions listed in `org-agenda-entry-text-exclude-regexps'.

** org-create-file-search-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-create-file-search-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-create-file-search-functions&sr=1][Find modifications in git logs]]

: List of functions to construct the right search string for a file link.
: These functions are called in turn with point at the location to
: which the link should point.
: 
: A function in the hook should first test if it would like to
: handle this file type, for example by checking the `major-mode'
: or the file extension.  If it decides not to handle this file, it
: should just return nil to give other functions a chance.  If it
: does handle the file, it must return the search string to be used
: when following the link.  The search string will be part of the
: file link, given after a double colon, and `org-open-at-point'
: will automatically search for it.  If special measures must be
: taken to make the search successful, another function should be
: added to the companion hook `org-execute-file-search-functions',
: which see.
: 
: A function in this hook may also use `setq' to set the variable
: `description' to provide a suggestion for the descriptive text to
: be used for this link when it gets inserted into an Org buffer
: with \[org-insert-link].

** org-src-mode-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-src-mode-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-mode-hook&sr=1][Find modifications in git logs]]

: Hook run after entering or leaving `org-src-mode'.
: No problems result if this variable is not bound.
: `add-hook' automatically binds it.  (This is true for all hook variables.)

** org-export-filter-section-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-section-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-section-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded section.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-export-filter-verse-block-functions =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-export-filter-verse-block-functions
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-filter-verse-block-functions&sr=1][Find modifications in git logs]]

: List of functions applied to a transcoded verse block.
: Each filter is called with three arguments: the transcoded data,
: as a string, the back-end, as a symbol, and the communication
: channel, as a plist.  It must return a string or nil.

** org-metadown-hook =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-metadown-hook
   :END:
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metadown-hook&sr=1][Find modifications in git logs]]

: Hook for functions attaching themselves to `M-down'.
: See `org-ctrl-c-ctrl-c-hook' for more information.
* Commands
  :PROPERTIES:
  :CUSTOM_ID: commands
  :END:

** org-agenda-previous-date-line =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-previous-date-line
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-previous-date-line&sr=1][Find modifications in git logs]]

: Jump to the previous line indicating a date in agenda buffer.
** org-table-previous-field
   :PROPERTIES:
   :CUSTOM_ID: org-table-previous-field
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-previous-field&sr=1][Find modifications in git logs]]

: Go to the previous field in the table.
: Before doing so, re-align the table if necessary.
** org-time-stamp-inactive =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-time-stamp-inactive
   :END:

- *Access:* ~C-c !, <menu-bar> <Org> <Dates and Scheduling> <Timestamp (inactive)>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-time-stamp-inactive&sr=1][Find modifications in git logs]]

: Insert an inactive time stamp.
: An inactive time stamp is enclosed in square brackets instead of angle
: brackets.  It is inactive in the sense that it does not trigger agenda entries,
: does not link to the calendar and cannot be changed with the S-cursor keys.
: So these are more for recording a certain time/date.
** org-edit-latex-environment
   :PROPERTIES:
   :CUSTOM_ID: org-edit-latex-environment
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-latex-environment&sr=1][Find modifications in git logs]]

: Edit LaTeX environment at point.
: 
: The LaTeX environment is copied into a new buffer.  Major mode is
: set to the one associated to "latex" in ‘org-src-lang-modes’,
: or to ‘latex-mode’ if there is none.
: 
: When done, exit with ‘C-c '’.  The edited text will then replace
: the LaTeX environment in the Org mode buffer.
** org-table-move-column-left
   :PROPERTIES:
   :CUSTOM_ID: org-table-move-column-left
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-move-column-left&sr=1][Find modifications in git logs]]

: Move column to the left.
** org-switchb =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-switchb
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-switchb&sr=1][Find modifications in git logs]]

: Switch between Org buffers.
: 
: With ‘C-u’ prefix, restrict available buffers to files.
: 
: With ‘C-u C-u’ prefix, restrict available buffers to agenda files.
** org-do-demote
   :PROPERTIES:
   :CUSTOM_ID: org-do-demote
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-do-demote&sr=1][Find modifications in git logs]]

: Demote the current heading lower down the tree.
: If the region is active in ‘transient-mark-mode’, demote all
: headings in the region.
** org-attach-reveal =(&optional if-exists)=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-reveal
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-reveal&sr=1][Find modifications in git logs]]

: Show the attachment directory of the current task.
: This will attempt to use an external program to show the directory.
** org-lint--show-source
   :PROPERTIES:
   :CUSTOM_ID: org-lint--show-source
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-lint.el;hb=HEAD][org-lint.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lint--show-source&sr=1][Find modifications in git logs]]

: Show source line that generated the report at point.
** org-toggle-archive-tag =(&optional find-done)=
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-archive-tag
   :END:

- *Access:* ~C-c C-x a, <menu-bar> <Org> <Archive> <Toggle ARCHIVE tag>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-archive-tag&sr=1][Find modifications in git logs]]

: Toggle the archive tag for the current headline.
: With prefix ARG, check all children of current headline and offer tagging
: the children that do not contain any open TODO items.
** org-plot/collect-options =(&optional params)=
   :PROPERTIES:
   :CUSTOM_ID: org-plot/collect-options
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-plot.el;hb=HEAD][org-plot.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-plot/collect-options&sr=1][Find modifications in git logs]]

: Collect options from an org-plot ‘#+Plot:’ line.
: Accepts an optional property list PARAMS, to which the options
: will be added.  Returns the resulting property list.
** org-babel-lob-ingest =(&optional file)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lob-ingest
   :END:

- *Access:* ~C-c C-v i~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lob.el;hb=HEAD][ob-lob.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lob-ingest&sr=1][Find modifications in git logs]]

: Add all named source blocks defined in FILE to ‘org-babel-library-of-babel’.
** org-columns-delete
   :PROPERTIES:
   :CUSTOM_ID: org-columns-delete
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-delete&sr=1][Find modifications in git logs]]

: Delete the column at point from columns view.
** org-beginning-of-item
   :PROPERTIES:
   :CUSTOM_ID: org-beginning-of-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beginning-of-item&sr=1][Find modifications in git logs]]

: Go to the beginning of the current item.
: Throw an error when not in a list.
** org-property-action
   :PROPERTIES:
   :CUSTOM_ID: org-property-action
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-property-action&sr=1][Find modifications in git logs]]

: Do an action on properties.
** org-eww-copy-for-org-mode
   :PROPERTIES:
   :CUSTOM_ID: org-eww-copy-for-org-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-eww.el;hb=HEAD][org-eww.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-eww-copy-for-org-mode&sr=1][Find modifications in git logs]]

: Copy current buffer content or active region with ‘org-mode’ style links.
: This will encode ‘link-title’ and ‘link-location’ with
: ‘org-make-link-string’, and insert the transformed test into the kill ring,
: so that it can be yanked into an Org mode buffer with links working correctly.
: 
: Further lines starting with a star get quoted with a comma to keep
: the structure of the Org file.
** org-drag-line-backward =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-drag-line-backward
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-drag-line-backward&sr=1][Find modifications in git logs]]

: Drag the line at point ARG lines backward.
** org-agenda-filter-by-top-headline =(strip)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-filter-by-top-headline
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-filter-by-top-headline&sr=1][Find modifications in git logs]]

: Keep only those lines that are descendants from the same top headline.
: The top headline is that of the current line.
** org-cdlatex-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-cdlatex-mode
   :END:

- *Access:* ~<menu-bar> <Org> <LaTeX> <Org CDLaTeX mode>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cdlatex-mode&sr=1][Find modifications in git logs]]

: Toggle the minor ‘org-cdlatex-mode’.
: This mode supports entering LaTeX environment and math in LaTeX fragments
: in Org mode.
: key             binding
: ---             -------
: 
: C-c		Prefix Command
: '		org-cdlatex-math-modify
: ^ .. _		org-cdlatex-underscore-caret
: `		cdlatex-math-symbol
: 
: C-c {		org-cdlatex-environment-indent
: 
: 
** org-babel-examplify-region =(beg end &optional results-switches inline)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-examplify-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-examplify-region&sr=1][Find modifications in git logs]]

: Comment out region using the inline ‘==’ or ‘: ’ org example quote.
** org-agenda-undo
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-undo
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-undo&sr=1][Find modifications in git logs]]

: Undo a remote editing step in the agenda.
: This undoes changes both in the agenda buffer and in the remote buffer
: that have been changed along.
** org-end-of-item
   :PROPERTIES:
   :CUSTOM_ID: org-end-of-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-end-of-item&sr=1][Find modifications in git logs]]

: Go to the end of the current item.
: Throw an error when not in a list.
** org-timer-set-timer =(&optional opt)=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-set-timer
   :END:

- *Access:* ~C-c C-x ;~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-set-timer&sr=1][Find modifications in git logs]]

: Prompt for a duration in minutes or hh:mm:ss and set a timer.
: 
: If ‘org-timer-default-timer’ is not "0", suggest this value as
: the default duration for the timer.  If a timer is already set,
: prompt the user if she wants to replace it.
: 
: Called with a numeric prefix argument, use this numeric value as
: the duration of the timer in minutes.
: 
: Called with a ‘C-u’ prefix arguments, use ‘org-timer-default-timer’
: without prompting the user for a duration.
: 
: With two ‘C-u’ prefix arguments, use ‘org-timer-default-timer’
: without prompting the user for a duration and automatically
: replace any running timer.
: 
: By default, the timer duration will be set to the number of
: minutes in the Effort property, if any.  You can ignore this by
: using three ‘C-u’ prefix arguments.
** org-md-export-as-markdown =(&optional async subtreep visible-only)=
   :PROPERTIES:
   :CUSTOM_ID: org-md-export-as-markdown
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-md.el;hb=HEAD][ox-md.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-md-export-as-markdown&sr=1][Find modifications in git logs]]

: Export current buffer to a Markdown buffer.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: Export is done in a buffer named "*Org MD Export*", which will
: be displayed when ‘org-export-show-temporary-export-buffer’ is
: non-nil.
** org-agenda-clockreport-mode
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-clockreport-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-clockreport-mode&sr=1][Find modifications in git logs]]

: Toggle clocktable mode in an agenda buffer.
** org-shiftcontrolright
   :PROPERTIES:
   :CUSTOM_ID: org-shiftcontrolright
   :END:

- *Access:* ~<C-S-right>, <menu-bar> <Org> <TODO Lists> <Select keyword> <Next keyword set>, <menu-bar> <Org> <TODO Lists> <Select keyword> <Previous keyword set>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftcontrolright&sr=1][Find modifications in git logs]]

: Switch to next TODO set.
** org-schedule =(arg &optional time)=
   :PROPERTIES:
   :CUSTOM_ID: org-schedule
   :END:

- *Access:* ~C-c C-s, <menu-bar> <Org> <Dates and Scheduling> <Schedule Item>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-schedule&sr=1][Find modifications in git logs]]

: Insert the SCHEDULED: string with a timestamp to schedule a TODO item.
: With one universal prefix argument, remove any scheduling date from the item.
: With two universal prefix arguments, prompt for a delay cookie.
: With argument TIME, scheduled at the corresponding date.  TIME can
: either be an Org date like "2011-07-24" or a delta like "+2d".
** org-agenda-set-effort
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-set-effort
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-set-effort&sr=1][Find modifications in git logs]]

: Set the effort property for the current headline.
** org-table-fedit-abort
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-abort
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-abort&sr=1][Find modifications in git logs]]

: Abort editing formulas, without installing the changes.
** org-agenda-toggle-deadlines
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-toggle-deadlines
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-toggle-deadlines&sr=1][Find modifications in git logs]]

: Toggle inclusion of entries with a deadline in an agenda buffer.
** org-babel-screen-test
   :PROPERTIES:
   :CUSTOM_ID: org-babel-screen-test
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-screen.el;hb=HEAD][ob-screen.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-screen-test&sr=1][Find modifications in git logs]]

: Test if the default setup works.
: The terminal should shortly flicker.
** org-agenda-execute =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-execute
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-execute&sr=1][Find modifications in git logs]]

: Execute another agenda command, keeping same window.
: So this is just a shortcut for ‘C-c a’, available
: in the agenda.
** org-convert-to-odd-levels
   :PROPERTIES:
   :CUSTOM_ID: org-convert-to-odd-levels
   :END:

- *Access:* ~<menu-bar> <Org> <Edit Structure> <Convert to odd levels>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-convert-to-odd-levels&sr=1][Find modifications in git logs]]

: Convert an Org file with all levels allowed to one with odd levels.
: This will leave level 1 alone, convert level 2 to level 3, level 3 to
: level 5 etc.
** org-table-convert
   :PROPERTIES:
   :CUSTOM_ID: org-table-convert
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-convert&sr=1][Find modifications in git logs]]

: Convert from ‘org-mode’ table to table.el and back.
: Obviously, this only works within limits.  When an Org table is converted
: to table.el, all horizontal separator lines get lost, because table.el uses
: these as cell boundaries and has no notion of horizontal lines.  A table.el
: table can be converted to an Org table only if it does not do row or column
: spanning.  Multiline cells will become multiple cells.  Beware, Org mode
: does not test if the table can be successfully converted - it blindly
: applies a recipe that works for simple tables.
** org-table-create-or-convert-from-region =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-create-or-convert-from-region
   :END:

- *Access:* ~C-c |~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-create-or-convert-from-region&sr=1][Find modifications in git logs]]

: Convert region to table, or create an empty table.
: If there is an active region, convert it to a table, using the function
: ‘org-table-convert-region’.  See the documentation of that function
: to learn how the prefix argument is interpreted to determine the field
: separator.
: If there is no such region, create an empty table with ‘org-table-create’.
** org-plot/gnuplot-to-grid-data =(table data-file params)=
   :PROPERTIES:
   :CUSTOM_ID: org-plot/gnuplot-to-grid-data
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-plot.el;hb=HEAD][org-plot.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-plot/gnuplot-to-grid-data&sr=1][Find modifications in git logs]]

: Export the data in TABLE to DATA-FILE for gnuplot.
: This means in a format appropriate for grid plotting by gnuplot.
: PARAMS specifies which columns of TABLE should be plotted as independent
: and dependant variables.
** org-columns-set-tags-or-toggle =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-set-tags-or-toggle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-set-tags-or-toggle&sr=1][Find modifications in git logs]]

: Toggle checkbox at point, or set tags for current headline.
** org-table-delete-column
   :PROPERTIES:
   :CUSTOM_ID: org-table-delete-column
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-delete-column&sr=1][Find modifications in git logs]]

: Delete a column from the table.
** org-agenda-show-clocking-issues
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-clocking-issues
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-clocking-issues&sr=1][Find modifications in git logs]]

: Add overlays, showing issues with clocking.
: See also the user option ‘org-agenda-clock-consistency-checks’.
** org-babel-tangle =(&optional arg target-file lang)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle
   :END:

- *Access:* ~C-c C-v t, C-c C-v C-t~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle&sr=1][Find modifications in git logs]]

: Write code blocks to source-specific files.
: Extract the bodies of all source code blocks from the current
: file into their own source-specific files.
: With one universal prefix argument, only tangle the block at point.
: When two universal prefix arguments, only tangle blocks for the
: tangle file of the block at point.
: Optional argument TARGET-FILE can be used to specify a default
: export file for all source blocks.  Optional argument LANG can be
: used to limit the exported source code blocks by language.
** org-babel-shell-initialize
   :PROPERTIES:
   :CUSTOM_ID: org-babel-shell-initialize
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-shell.el;hb=HEAD][ob-shell.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-shell-initialize&sr=1][Find modifications in git logs]]

: Define execution functions associated to shell names.
: This function has to be called whenever ‘org-babel-shell-names’
: is modified outside the Customize interface.
** org-agenda-archive-default-with-confirmation
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-archive-default-with-confirmation
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-archive-default-with-confirmation&sr=1][Find modifications in git logs]]

: Archive the entry or subtree belonging to the current agenda entry.
** org-agenda-remove-restriction-lock =(&optional noupdate)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-remove-restriction-lock
   :END:

- *Access:* ~C-c C-x >~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-remove-restriction-lock&sr=1][Find modifications in git logs]]

: Remove the agenda restriction lock.
** org-icalendar-export-to-ics =(&optional async subtreep visible-only body-only)=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-export-to-ics
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-export-to-ics&sr=1][Find modifications in git logs]]

: Export current buffer to an iCalendar file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "BEGIN:VCALENDAR" and "END:VCALENDAR".
: 
: Return ICS file name.
** org-bibtex =(filename)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex&sr=1][Find modifications in git logs]]

: Export each headline in the current file to a bibtex entry.
: Headlines are exported using ‘org-bibtex-headline’.
** org-table-blank-field
   :PROPERTIES:
   :CUSTOM_ID: org-table-blank-field
   :END:

- *Access:* ~C-c SPC, <menu-bar> <Tbl> <Blank Field>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-blank-field&sr=1][Find modifications in git logs]]

: Blank the current table field or active region.
** org-src-associate-babel-session =(info)=
   :PROPERTIES:
   :CUSTOM_ID: org-src-associate-babel-session
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-associate-babel-session&sr=1][Find modifications in git logs]]

: Associate edit buffer with comint session.
** org-ctrl-c-minus
   :PROPERTIES:
   :CUSTOM_ID: org-ctrl-c-minus
   :END:

- *Access:* ~C-c -, <menu-bar> <Tbl> <Row> <Insert Hline>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctrl-c-minus&sr=1][Find modifications in git logs]]

: Insert separator line in table or modify bullet status of line.
: Also turns a plain line or a region of lines into list items.
: Calls ‘org-table-insert-hline’, ‘org-toggle-item’, or
: ‘org-cycle-list-bullet’, depending on context.
** org-update-checkbox-count =(&optional all)=
   :PROPERTIES:
   :CUSTOM_ID: org-update-checkbox-count
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-update-checkbox-count&sr=1][Find modifications in git logs]]

: Update the checkbox statistics in the current section.
: 
: This will find all statistic cookies like [57%] and [6/12] and
: update them with the current numbers.
: 
: With optional prefix argument ALL, do this for the whole buffer.
** org-agenda-redo =(&optional all)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-redo
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-redo&sr=1][Find modifications in git logs]]

: Rebuild possibly ALL agenda view(s) in the current buffer.
** org-agenda-show-tags
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-tags
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-tags&sr=1][Find modifications in git logs]]

: Show the tags applicable to the current item.
** org-agenda-manipulate-query-add-re
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-manipulate-query-add-re
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-manipulate-query-add-re&sr=1][Find modifications in git logs]]

: Manipulate the query by adding a search regexp with positive selection.
: Positive selection means the regexp must match for selection of an entry.
** org-attach-sync
   :PROPERTIES:
   :CUSTOM_ID: org-attach-sync
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-sync&sr=1][Find modifications in git logs]]

: Synchronize the current tasks with its attachments.
: This can be used after files have been added externally.
** org-babel-view-src-block-info
   :PROPERTIES:
   :CUSTOM_ID: org-babel-view-src-block-info
   :END:

- *Access:* ~C-c C-v I, C-c C-v TAB~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-view-src-block-info&sr=1][Find modifications in git logs]]

: Display information on the current source block.
: This includes header arguments, language and name, and is largely
: a window into the ‘org-babel-get-src-block-info’ function.
** org-table-current-column
   :PROPERTIES:
   :CUSTOM_ID: org-table-current-column
   :END:

- *Access:* ~<menu-bar> <Tbl> <Calculate> <Which Column?>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-current-column&sr=1][Find modifications in git logs]]

: Find out which column we are in.
** org-toggle-tags-groups
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-tags-groups
   :END:

- *Access:* ~C-c C-x q~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-tags-groups&sr=1][Find modifications in git logs]]

: Toggle support for group tags.
: Support for group tags is controlled by the option
: ‘org-group-tags’, which is non-nil by default.
** org-agenda-quit
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-quit
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-quit&sr=1][Find modifications in git logs]]

: Exit the agenda.
: 
: When ‘org-agenda-sticky’ is non-nil, bury the agenda buffer
: instead of killing it.
: 
: When ‘org-agenda-restore-windows-after-quit’ is non-nil, restore
: the pre-agenda window configuration.
: 
: When column view is active, exit column view instead of the
: agenda.
** org-timer-stop
   :PROPERTIES:
   :CUSTOM_ID: org-timer-stop
   :END:

- *Access:* ~C-c C-x _~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-stop&sr=1][Find modifications in git logs]]

: Stop the relative or countdown timer.
** org-babel-insert-header-arg =(&optional header-arg value)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-insert-header-arg
   :END:

- *Access:* ~C-c C-v j, C-c C-v C-j~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-insert-header-arg&sr=1][Find modifications in git logs]]

: Insert a header argument selecting from lists of common args and values.
** org-clock-cancel
   :PROPERTIES:
   :CUSTOM_ID: org-clock-cancel
   :END:

- *Access:* ~C-c C-x C-q, <menu-bar> <Org> <Logging work> <Clock cancel>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-cancel&sr=1][Find modifications in git logs]]

: Cancel the running clock by removing the start timestamp.
** org-agenda-log-mode =(&optional special)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-log-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-log-mode&sr=1][Find modifications in git logs]]

: Toggle log mode in an agenda buffer.
: 
: With argument SPECIAL, show all possible log items, not only the ones
: configured in ‘org-agenda-log-mode-items’.
: 
: With a ‘C-u C-u’ prefix, show *only* log items, nothing else.
** org-reset-checkbox-state-subtree
   :PROPERTIES:
   :CUSTOM_ID: org-reset-checkbox-state-subtree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-reset-checkbox-state-subtree&sr=1][Find modifications in git logs]]

: Reset all checkboxes in an entry subtree.
** org-property-next-allowed-value =(&optional previous)=
   :PROPERTIES:
   :CUSTOM_ID: org-property-next-allowed-value
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-property-next-allowed-value&sr=1][Find modifications in git logs]]

: Switch to the next allowed value for this property.
** orgtbl-insert-radio-table
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-insert-radio-table
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-insert-radio-table&sr=1][Find modifications in git logs]]

: Insert a radio table template appropriate for this major mode.
** org-table-insert-hline =(&optional above)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-insert-hline
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-insert-hline&sr=1][Find modifications in git logs]]

: Insert a horizontal-line below the current line into the table.
: With prefix ABOVE, insert above the current line.
** org-todo =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-todo
   :END:

- *Access:* ~C-c C-t, <menu-bar> <Org> <TODO Lists> <TODO/DONE/->~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo&sr=1][Find modifications in git logs]]

: Change the TODO state of an item.
: 
: The state of an item is given by a keyword at the start of the heading,
: like
:      *** TODO Write paper
:      *** DONE Call mom
: 
: The different keywords are specified in the variable ‘org-todo-keywords’.
: By default the available states are "TODO" and "DONE".  So, for this
: example: when the item starts with TODO, it is changed to DONE.
: When it starts with DONE, the DONE is removed.  And when neither TODO nor
: DONE are present, add TODO at the beginning of the heading.
: 
: With ‘C-u’ prefix ARG, use completion to determine the new state.
: With numeric prefix ARG, switch to that state.
: With a ‘C-u C-u’ prefix, switch to the next set of TODO keywords (nextset).
: With a ‘C-u C-u C-u’ prefix, circumvent any state blocking.
: With a numeric prefix arg of 0, inhibit note taking for the change.
: With a numeric prefix arg of -1, cancel repeater to allow marking as DONE.
: 
: When called through ELisp, arg is also interpreted in the following way:
: ‘none’        -> empty state
: ""            -> switch to empty state
: ‘done’        -> switch to DONE
: ‘nextset’     -> switch to the next set of keywords
: ‘previousset’ -> switch to the previous set of keywords
: "WAITING"     -> switch to the specified keyword, but only if it
:                  really is a member of ‘org-todo-keywords’.
** org-set-tags-to =(data)=
   :PROPERTIES:
   :CUSTOM_ID: org-set-tags-to
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-set-tags-to&sr=1][Find modifications in git logs]]

: Set the tags of the current entry to DATA, replacing the current tags.
: DATA may be a tags string like :aa:bb:cc:, or a list of tags.
: If DATA is nil or the empty string, any tags will be removed.
** org-agenda-goto-date =(span)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-goto-date
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-goto-date&sr=1][Find modifications in git logs]]

: Jump to DATE in agenda.
** org-preview-latex-fragment =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-preview-latex-fragment
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-preview-latex-fragment&sr=1][Find modifications in git logs]]

: Preview the LaTeX fragment at point, or all locally or globally.
: 
: If the cursor is on a LaTeX fragment, create the image and overlay
: it over the source code, if there is none.  Remove it otherwise.
: If there is no fragment at point, display all fragments in the
: current section.
: 
: With prefix ARG, preview or clear image for all fragments in the
: current subtree or in the whole buffer when used before the first
: headline.  With a prefix ARG ‘C-u C-u’ preview or clear images
: for all fragments in the buffer.
** org-table-fedit-menu =(event)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-menu
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-menu&sr=1][Find modifications in git logs]]

: Org Edit Formulas Menu
** org-table-move-row-down
   :PROPERTIES:
   :CUSTOM_ID: org-table-move-row-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-move-row-down&sr=1][Find modifications in git logs]]

: Move table row down.
** org-archive-set-tag
   :PROPERTIES:
   :CUSTOM_ID: org-archive-set-tag
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-set-tag&sr=1][Find modifications in git logs]]

: Set the ARCHIVE tag.
** org-info =(&optional node)=
   :PROPERTIES:
   :CUSTOM_ID: org-info
   :END:

- *Access:* ~<menu-bar> <Org> <Documentation> <Info Documentation>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-info&sr=1][Find modifications in git logs]]

: Read documentation for Org in the info system.
: With optional NODE, go directly to that node.
** org-goto-right
   :PROPERTIES:
   :CUSTOM_ID: org-goto-right
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-right&sr=1][Find modifications in git logs]]

: Finish ‘org-goto’ by going to the new location.
** org-sort-list =(&optional with-case sorting-type getkey-func compare-func interactive?)=
   :PROPERTIES:
   :CUSTOM_ID: org-sort-list
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sort-list&sr=1][Find modifications in git logs]]

: Sort list items.
: The cursor may be at any item of the list that should be sorted.
: Sublists are not sorted.  Checkboxes, if any, are ignored.
: 
: Sorting can be alphabetically, numerically, by date/time as given
: by a time stamp, by a property or by priority.
: 
: Comparing entries ignores case by default.  However, with an
: optional argument WITH-CASE, the sorting considers case as well.
: 
: The command prompts for the sorting type unless it has been given
: to the function through the SORTING-TYPE argument, which needs to
: be a character, (?n ?N ?a ?A ?t ?T ?f ?F ?x ?X).  Here is the
: detailed meaning of each character:
: 
: n   Numerically, by converting the beginning of the item to a number.
: a   Alphabetically.  Only the first line of item is checked.
: t   By date/time, either the first active time stamp in the entry, if
:     any, or by the first inactive one.  In a timer list, sort the timers.
: x   By "checked" status of a check list.
: 
: Capital letters will reverse the sort order.
: 
: If the SORTING-TYPE is ?f or ?F, then GETKEY-FUNC specifies
: a function to be called with point at the beginning of the
: record.  It must return a value that is compatible with COMPARE-FUNC,
: the function used to compare entries.
: 
: Sorting is done against the visible part of the headlines, it
: ignores hidden links.
: 
: A non-nil value for INTERACTIVE? is used to signal that this
: function is being called interactively.
** org-agenda-clock-in =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-clock-in
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-clock-in&sr=1][Find modifications in git logs]]

: Start the clock on the currently selected item.
** org-metaup =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-metaup
   :END:

- *Access:* ~<M-up>, <menu-bar> <Org> <Edit Structure> <Move Subtree Up>, <menu-bar> <Tbl> <Row> <Move Row Up>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metaup&sr=1][Find modifications in git logs]]

: Move subtree up or move table row up.
: Calls ‘org-move-subtree-up’ or ‘org-table-move-row’ or
: ‘org-move-item-up’, depending on context.  See the individual commands
: for more information.
** org-indent-line
   :PROPERTIES:
   :CUSTOM_ID: org-indent-line
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-line&sr=1][Find modifications in git logs]]

: Indent line depending on context.
: 
: Indentation is done according to the following rules:
: 
:   - Footnote definitions, diary sexps, headlines and inline tasks
:     have to start at column 0.
: 
:   - On the very first line of an element, consider, in order, the
:     next rules until one matches:
: 
:     1. If there’s a sibling element before, ignoring footnote
:        definitions and inline tasks, indent like its first line.
: 
:     2. If element has a parent, indent like its contents.  More
:        precisely, if parent is an item, indent after the
:        description part, if any, or the bullet (see
:        ‘org-list-description-max-indent’).  Else, indent like
:        parent’s first line.
: 
:     3. Otherwise, indent relatively to current level, if
:        ‘org-adapt-indentation’ is non-nil, or to left margin.
: 
:   - On a blank line at the end of an element, indent according to
:     the type of the element.  More precisely
: 
:     1. If element is a plain list, an item, or a footnote
:        definition, indent like the very last element within.
: 
:     2. If element is a paragraph, indent like its last non blank
:        line.
: 
:     3. Otherwise, indent like its very first line.
: 
:   - In the code part of a source block, use language major mode
:     to indent current line if ‘org-src-tab-acts-natively’ is
:     non-nil.  If it is nil, do nothing.
: 
:   - Otherwise, indent like the first non-blank line above.
: 
: The function doesn’t indent an item as it could break the whole
: list structure.  Instead, use ‘<M-S-left>’ or ‘<M-S-right>’.
: 
: Also align node properties according to ‘org-property-format’.
** org-agenda-show-the-flagging-note
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-the-flagging-note
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-the-flagging-note&sr=1][Find modifications in git logs]]

: Display the flagging note in the other window.
: When called a second time in direct sequence, offer to remove the FLAGGING
: tag and (if present) the flagging note.
** org-agenda-entry-text-show
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-entry-text-show
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-entry-text-show&sr=1][Find modifications in git logs]]

: Add entry context for all agenda lines.
** org-date-from-calendar
   :PROPERTIES:
   :CUSTOM_ID: org-date-from-calendar
   :END:

- *Access:* ~C-c <, <menu-bar> <Org> <Dates and Scheduling> <Date from Calendar>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-date-from-calendar&sr=1][Find modifications in git logs]]

: Insert time stamp corresponding to cursor date in *Calendar* buffer.
: If there is already a time stamp at the cursor position, update it.
** org-insert-drawer =(&optional arg drawer)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-drawer
   :END:

- *Access:* ~C-c C-x d~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-drawer&sr=1][Find modifications in git logs]]

: Insert a drawer at point.
: 
: When optional argument ARG is non-nil, insert a property drawer.
: 
: Optional argument DRAWER, when non-nil, is a string representing
: drawer’s name.  Otherwise, the user is prompted for a name.
: 
: If a region is active, insert the drawer around that region
: instead.
: 
: Point is left between drawer’s boundaries.
** org-ctags-find-tag =(name)=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-find-tag
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-find-tag&sr=1][Find modifications in git logs]]

: This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
: Look for a tag called ‘NAME’ in the current TAGS table.  If it is found,
: visit the file and location where the tag is found.
** org-agenda-year-view =(&optional year)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-year-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-year-view&sr=1][Find modifications in git logs]]

: Switch to yearly view for agenda.
: With argument YEAR, switch to that year.  Years ranging from 70
: years ago to 30 years in the future can also be written as
: 2-digit years.
** org-babel-result-hide-all
   :PROPERTIES:
   :CUSTOM_ID: org-babel-result-hide-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-result-hide-all&sr=1][Find modifications in git logs]]

: Fold all results in the current buffer.
** org-columns-open-link =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-open-link
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-open-link&sr=1][Find modifications in git logs]]


** org-add-note
   :PROPERTIES:
   :CUSTOM_ID: org-add-note
   :END:

- *Access:* ~C-c C-z~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-add-note&sr=1][Find modifications in git logs]]

: Add a note to the current entry.
: This is done in the same way as adding a state change note.
** org-table-fedit-lisp-indent
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-lisp-indent
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-lisp-indent&sr=1][Find modifications in git logs]]

: Pretty-print and re-indent Lisp expressions in the Formula Editor.
** org-agenda-set-restriction-lock =(&optional type)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-set-restriction-lock
   :END:

- *Access:* ~<menu-bar> <Org> <Set Restriction Lock>, C-c C-x <~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-set-restriction-lock&sr=1][Find modifications in git logs]]

: Set restriction lock for agenda, to current subtree or file.
: Restriction will be the file if TYPE is ‘file’, or if type is the
: universal prefix '(4), or if the cursor is before the first headline
: in the file.  Otherwise, restriction will be to the current subtree.
** org-agenda-todo-yesterday =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-yesterday
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-yesterday&sr=1][Find modifications in git logs]]

: Like ‘org-agenda-todo’ but the time of change will be 23:59 of yesterday.
** org-agenda-date-later =(arg &optional what)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-date-later
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-date-later&sr=1][Find modifications in git logs]]

: Change the date of this item to ARG day(s) later.
** org-cycle-list-bullet =(&optional which)=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-list-bullet
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-list-bullet&sr=1][Find modifications in git logs]]

: Cycle through the different itemize/enumerate bullets.
: This cycle the entire list level through the sequence:
: 
:    ‘-’  ->  ‘+’  ->  ‘*’  ->  ‘1.’  ->  ‘1)’
: 
: If WHICH is a valid string, use that as the new bullet.  If WHICH
: is an integer, 0 means ‘-’, 1 means ‘+’ etc.  If WHICH is
: ‘previous’, cycle backwards.
** org-beamer-select-environment
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-select-environment
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-select-environment&sr=1][Find modifications in git logs]]

: Select the environment to be used by beamer for this entry.
: While this uses (for convenience) a tag selection interface, the
: result of this command will be that the BEAMER_env *property* of
: the entry is set.
: 
: In addition to this, the command will also set a tag as a visual
: aid, but the tag does not have any semantic meaning.
** org-babel-lilypond-toggle-html-generation
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-toggle-html-generation
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-toggle-html-generation&sr=1][Find modifications in git logs]]

: Toggle whether html will be generated by compilation.
** org-bibtex-read-file =(file)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-read-file
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-read-file&sr=1][Find modifications in git logs]]

: Read FILE with ‘org-bibtex-read-buffer’.
** org-hide-block-toggle =(&optional force)=
   :PROPERTIES:
   :CUSTOM_ID: org-hide-block-toggle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hide-block-toggle&sr=1][Find modifications in git logs]]

: Toggle the visibility of the current block.
: When optional argument FORCE is ‘off’, make block visible.  If it
: is non-nil, hide it unconditionally.  Throw an error when not at
: a block.  Return a non-nil value when toggling is successful.
** orgstruct-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: orgstruct-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgstruct-mode&sr=1][Find modifications in git logs]]

: Toggle the minor mode ‘orgstruct-mode’.
: This mode is for using Org mode structure commands in other
: modes.  The following keys behave as if Org mode were active, if
: the cursor is on a headline, or on a plain list item (both as
: defined by Org mode).
** org-timer-show-remaining-time
   :PROPERTIES:
   :CUSTOM_ID: org-timer-show-remaining-time
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-show-remaining-time&sr=1][Find modifications in git logs]]

: Display the remaining time before the timer ends.
** org-bibtex-import-from-file =(file)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-import-from-file
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-import-from-file&sr=1][Find modifications in git logs]]

: Read bibtex entries from FILE and insert as Org headlines after point.
** org-toggle-custom-properties-visibility
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-custom-properties-visibility
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-custom-properties-visibility&sr=1][Find modifications in git logs]]

: Display or hide properties in ‘org-custom-properties’.
** org-overview
   :PROPERTIES:
   :CUSTOM_ID: org-overview
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-overview&sr=1][Find modifications in git logs]]

: Switch to overview mode, showing only top-level headlines.
: This shows all headlines with a level equal or greater than the level
: of the first headline in the buffer.  This is important, because if the
: first headline is not level one, then (hide-sublevels 1) gives confusing
: results.
** org-agenda-date-earlier =(arg &optional what)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-date-earlier
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-date-earlier&sr=1][Find modifications in git logs]]

: Change the date of this item to ARG day(s) earlier.
** org-show-entry
   :PROPERTIES:
   :CUSTOM_ID: org-show-entry
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-entry&sr=1][Find modifications in git logs]]

: Show the body directly following this heading.
: Show the heading too, if it is currently invisible.
** org-babel-execute-src-block-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-babel-execute-src-block-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-execute-src-block-maybe&sr=1][Find modifications in git logs]]

: Conditionally execute a source block.
: Detect if this is context for a Babel src-block and if so
: then run ‘org-babel-execute-src-block’.
** org-beamer-export-as-latex =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-export-as-latex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-export-as-latex&sr=1][Find modifications in git logs]]

: Export current buffer as a Beamer buffer.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Export is done in a buffer named "*Org BEAMER Export*", which
: will be displayed when ‘org-export-show-temporary-export-buffer’
: is non-nil.
** orgtbl-send-table =(&optional maybe)=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-send-table
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-send-table&sr=1][Find modifications in git logs]]

: Send a transformed version of table at point to the receiver position.
: With argument MAYBE, fail quietly if no transformation is defined
: for this table.
** org-toggle-time-stamp-overlays
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-time-stamp-overlays
   :END:

- *Access:* ~C-c C-x C-t, <menu-bar> <Org> <Dates and Scheduling> <Custom time format>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-time-stamp-overlays&sr=1][Find modifications in git logs]]

: Toggle the use of custom time stamp formats.
** org-agenda-priority-up
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-priority-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-priority-up&sr=1][Find modifications in git logs]]

: Increase the priority of line at point, also in Org file.
** org-edit-src-code =(&optional code edit-buffer-name)=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-code
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-code&sr=1][Find modifications in git logs]]

: Edit the source or example block at point.
: 
: The code is copied to a separate buffer and the appropriate mode
: is turned on.  When done, exit with ‘C-c '’.  This will remove the
: original code in the Org buffer, and replace it with the edited
: version.  See ‘org-src-window-setup’ to configure the display of
: windows containing the Org buffer and the code buffer.
: 
: When optional argument CODE is a string, edit it in a dedicated
: buffer instead.
: 
: When optional argument EDIT-BUFFER-NAME is non-nil, use it as the
: name of the sub-editing buffer.
** org-org-menu =(event)=
   :PROPERTIES:
   :CUSTOM_ID: org-org-menu
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-org-menu&sr=1][Find modifications in git logs]]

: Org menu
** org-show-children =(&optional level)=
   :PROPERTIES:
   :CUSTOM_ID: org-show-children
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-children&sr=1][Find modifications in git logs]]

: Show all direct subheadings of this heading.
: Prefix arg LEVEL is how many levels below the current level
: should be shown.  Default is enough to cause the following
: heading to appear.
** org-ctrl-c-star
   :PROPERTIES:
   :CUSTOM_ID: org-ctrl-c-star
   :END:

- *Access:* ~C-c *~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctrl-c-star&sr=1][Find modifications in git logs]]

: Compute table, or change heading status of lines.
: Calls ‘org-table-recalculate’ or ‘org-toggle-heading’,
: depending on context.
** org-self-insert-command =(N)=
   :PROPERTIES:
   :CUSTOM_ID: org-self-insert-command
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-self-insert-command&sr=1][Find modifications in git logs]]

: Like ‘self-insert-command’, use overwrite-mode for whitespace in tables.
: If the cursor is in a table looking at whitespace, the whitespace is
: overwritten, and the table is not marked as requiring realignment.
** org-agenda-goto-calendar
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-goto-calendar
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-goto-calendar&sr=1][Find modifications in git logs]]

: Open the Emacs calendar with the date at the cursor.
** org-backward-element
   :PROPERTIES:
   :CUSTOM_ID: org-backward-element
   :END:

- *Access:* ~M-{~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-backward-element&sr=1][Find modifications in git logs]]

: Move backward by one element.
: Move to the previous element at the same level, when possible.
** org-mobile-apply =(&optional beg end)=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-apply
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-apply&sr=1][Find modifications in git logs]]

: Apply all change requests in the current buffer.
: If BEG and END are given, only do this in that region.
** org-speed-move-safe =(cmd)=
   :PROPERTIES:
   :CUSTOM_ID: org-speed-move-safe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-speed-move-safe&sr=1][Find modifications in git logs]]

: Execute CMD, but make sure that the cursor always ends up in a headline.
: If not, return to the original position and throw an error.
** org-html-export-as-html =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-html-export-as-html
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-export-as-html&sr=1][Find modifications in git logs]]

: Export current buffer to an HTML buffer.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "<body>" and "</body>" tags.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Export is done in a buffer named "*Org HTML Export*", which
: will be displayed when ‘org-export-show-temporary-export-buffer’
: is non-nil.
** org-agenda-day-view =(&optional day-of-month)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-day-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-day-view&sr=1][Find modifications in git logs]]

: Switch to daily view for agenda.
: With argument DAY-OF-MONTH, switch to that day of the month.
** org-refile =(&optional arg default-buffer rfloc msg)=
   :PROPERTIES:
   :CUSTOM_ID: org-refile
   :END:

- *Access:* ~C-c C-w, <menu-bar> <Org> <Edit Structure> <Refile Subtree>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile&sr=1][Find modifications in git logs]]

: Move the entry or entries at point to another heading.
: 
: The list of target headings is compiled using the information in
: ‘org-refile-targets’, which see.
: 
: At the target location, the entry is filed as a subitem of the
: target heading.  Depending on ‘org-reverse-note-order’, the new
: subitem will either be the first or the last subitem.
: 
: If there is an active region, all entries in that region will be
: refiled.  However, the region must fulfill the requirement that
: the first heading sets the top-level of the moved text.
: 
: With a ‘C-u’ ARG, the command will only visit the target location
: and not actually move anything.
: 
: With a prefix ‘C-u C-u’, go to the location where the last
: refiling operation has put the subtree.
: 
: With a numeric prefix argument of ‘2’, refile to the running clock.
: 
: With a numeric prefix argument of ‘3’, emulate ‘org-refile-keep’
: being set to t and copy to the target location, don’t move it.
: Beware that keeping refiled entries may result in duplicated ID
: properties.
: 
: RFLOC can be a refile location obtained in a different way.
: 
: MSG is a string to replace "Refile" in the default prompt with
: another verb.  E.g. ‘org-copy’ sets this parameter to "Copy".
: 
: See also ‘org-refile-use-outline-path’.
: 
: If you are using target caching (see ‘org-refile-use-cache’), you
: have to clear the target cache in order to find new targets.
: This can be done with a ‘0’ prefix (‘C-0 C-c C-w’) or a triple
: prefix argument (‘C-u C-u C-u C-c C-w’).
** org-clock-display =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-display
   :END:

- *Access:* ~C-c C-x C-d, <menu-bar> <Org> <Logging work> <Display times>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-display&sr=1][Find modifications in git logs]]

: Show subtree times in the entire buffer.
: 
: By default, show the total time for the range defined in
: ‘org-clock-display-default-range’.  With ‘C-u’ prefix, show
: the total time for today instead.
: 
: With ‘C-u C-u’ prefix, use a custom range, entered at prompt.
: 
: With ‘C-u C-u C-u’ prefix, display the total time in the
: echo area.
: 
: Use ‘M-x org-clock-remove-overlays’ to remove the subtree times.
** org-return =(&optional indent)=
   :PROPERTIES:
   :CUSTOM_ID: org-return
   :END:

- *Access:* ~RET, <menu-bar> <Tbl> <Next Row>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-return&sr=1][Find modifications in git logs]]

: Goto next table row or insert a newline.
: 
: Calls ‘org-table-next-row’ or ‘newline’, depending on context.
: 
: When optional INDENT argument is non-nil, call
: ‘newline-and-indent’ instead of ‘newline’.
: 
: When ‘org-return-follows-link’ is non-nil and point is on
: a timestamp or a link, call ‘org-open-at-point’.  However, it
: will not happen if point is in a table or on a "dead"
: object (e.g., within a comment).  In these case, you need to use
: ‘org-open-at-point’ directly.
** org-feed-show-raw-feed =(feed)=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-show-raw-feed
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-show-raw-feed&sr=1][Find modifications in git logs]]

: Show the raw feed buffer of a feed.
** org-attach-open-in-emacs
   :PROPERTIES:
   :CUSTOM_ID: org-attach-open-in-emacs
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-open-in-emacs&sr=1][Find modifications in git logs]]

: Open attachment, force opening in Emacs.
: See ‘org-attach-open’.
** org-agenda-filter-remove-all
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-filter-remove-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-filter-remove-all&sr=1][Find modifications in git logs]]

: Remove all filters from the current agenda buffer.
** org-babel-expand-src-block =(&optional _arg info params)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-expand-src-block
   :END:

- *Access:* ~C-c C-v v, C-c C-v C-v~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-expand-src-block&sr=1][Find modifications in git logs]]

: Expand the current source code block.
: Expand according to the source code block’s header
: arguments and pop open the results in a preview buffer.
** org-ctags-all-tags-in-current-tags-table
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-all-tags-in-current-tags-table
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-all-tags-in-current-tags-table&sr=1][Find modifications in git logs]]

: Read all tags defined in the active TAGS file, into a list of strings.
: Return the list.
** org-table-fedit-ref-right
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-ref-right
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-ref-right&sr=1][Find modifications in git logs]]

: Shift the reference at point one field to the right.
** org-toggle-latex-fragment =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-latex-fragment
   :END:

- *Access:* ~C-c C-x C-l~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-latex-fragment&sr=1][Find modifications in git logs]]

: Preview the LaTeX fragment at point, or all locally or globally.
: 
: If the cursor is on a LaTeX fragment, create the image and overlay
: it over the source code, if there is none.  Remove it otherwise.
: If there is no fragment at point, display all fragments in the
: current section.
: 
: With prefix ARG, preview or clear image for all fragments in the
: current subtree or in the whole buffer when used before the first
: headline.  With a prefix ARG ‘C-u C-u’ preview or clear images
: for all fragments in the buffer.
** org-agenda-filter-by-effort =(strip)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-filter-by-effort
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-filter-by-effort&sr=1][Find modifications in git logs]]

: Filter agenda entries by effort.
: With no prefix argument, keep entries matching the effort condition.
: With one prefix argument, filter out entries matching the condition.
: With two prefix arguments, remove the effort filters.
** org-emphasize =(&optional char)=
   :PROPERTIES:
   :CUSTOM_ID: org-emphasize
   :END:

- *Access:* ~C-c C-x C-f, <menu-bar> <Org> <Editing> <Emphasis...>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-emphasize&sr=1][Find modifications in git logs]]

: Insert or change an emphasis, i.e. a font like bold or italic.
: If there is an active region, change that region to a new emphasis.
: If there is no region, just insert the marker characters and position
: the cursor between them.
: CHAR should be the marker character.  If it is a space, it means to
: remove the emphasis of the selected region.
: If CHAR is not given (for example in an interactive call) it will be
: prompted for.
** org-columns-edit-value =(&optional key)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-edit-value
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-edit-value&sr=1][Find modifications in git logs]]

: Edit the value of the property at point in column view.
: Where possible, use the standard interface for changing this line.
** org-kill-line =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-kill-line
   :END:

- *Access:* ~C-k~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-kill-line&sr=1][Find modifications in git logs]]

: Kill line, to tags or end of line.
** org-capture-kill
   :PROPERTIES:
   :CUSTOM_ID: org-capture-kill
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-kill&sr=1][Find modifications in git logs]]

: Abort the current capture process.
** org-drag-line-forward =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-drag-line-forward
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-drag-line-forward&sr=1][Find modifications in git logs]]

: Drag the line at point ARG lines forward.
** org-mobile-pull
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-pull
   :END:

- *Access:* ~<menu-bar> <Org> <MobileOrg> <Get Captured and Flagged>, C-c C-x RET g~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-pull&sr=1][Find modifications in git logs]]

: Pull the contents of ‘org-mobile-capture-file’ and integrate them.
: Apply all flagged actions, flag entries to be flagged and then call an
: agenda view showing the flagged items.
** org-agenda-set-property
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-set-property
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-set-property&sr=1][Find modifications in git logs]]

: Set a property for the current headline.
** org-table-move-column-right
   :PROPERTIES:
   :CUSTOM_ID: org-table-move-column-right
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-move-column-right&sr=1][Find modifications in git logs]]

: Move column to the right.
** org-agenda-redo-all =(&optional exhaustive)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-redo-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-redo-all&sr=1][Find modifications in git logs]]

: Rebuild all agenda views in the current buffer.
: With a prefix argument, do so in all agenda buffers.
** org-toggle-checkbox =(&optional toggle-presence)=
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-checkbox
   :END:

- *Access:* ~C-c C-x C-b~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-checkbox&sr=1][Find modifications in git logs]]

: Toggle the checkbox in the current line.
: With prefix arg TOGGLE-PRESENCE, add or remove checkboxes.  With
: double prefix, set checkbox to [-].
: 
: When there is an active region, toggle status or presence of the
: first checkbox there, and make every item inside have the same
: status or presence, respectively.
: 
: If the cursor is in a headline, apply this to all checkbox items
: in the text below the heading, taking as reference the first item
: in subtree, ignoring drawers.
** org-mobile-push
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-push
   :END:

- *Access:* ~<menu-bar> <Org> <MobileOrg> <Push Files and Views>, C-c C-x RET p~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-push&sr=1][Find modifications in git logs]]

: Push the current state of Org affairs to the target directory.
: This will create the index file, copy all agenda files there, and also
: create all custom agenda views, for upload to the mobile phone.
** org-mark-subtree =(&optional up)=
   :PROPERTIES:
   :CUSTOM_ID: org-mark-subtree
   :END:

- *Access:* ~C-c @~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mark-subtree&sr=1][Find modifications in git logs]]

: Mark the current subtree.
: This puts point at the start of the current subtree, and mark at
: the end.  If a numeric prefix UP is given, move up into the
: hierarchy of headlines by UP levels before marking the subtree.
** org-publish-all =(&optional force async)=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-all&sr=1][Find modifications in git logs]]

: Publish all projects.
: With prefix argument FORCE, remove all files in the timestamp
: directory and force publishing all projects.  With a non-nil
: optional argument ASYNC, publishing will be done asynchronously,
: in another process.
** org-set-property-and-value =(use-last)=
   :PROPERTIES:
   :CUSTOM_ID: org-set-property-and-value
   :END:

- *Access:* ~C-c C-x P~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-set-property-and-value&sr=1][Find modifications in git logs]]

: Allow to set [PROPERTY]: [value] direction from prompt.
: When use-default, don’t even ask, just use the last
: "[PROPERTY]: [value]" string from the history.
** org-timer-pause-or-continue =(&optional stop)=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-pause-or-continue
   :END:

- *Access:* ~C-c C-x ,, <menu-bar> <Org> <Dates and Scheduling> <Pause/Continue Timer>, <menu-bar> <Org> <Dates and Scheduling> <Stop Timer>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-pause-or-continue&sr=1][Find modifications in git logs]]

: Pause or continue the relative or countdown timer.
: With prefix arg STOP, stop it entirely.
** org-mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mode&sr=1][Find modifications in git logs]]

: Outline-based notes management and organizer, alias
: "Carsten’s outline-mode for keeping track of everything."
: 
: Org mode develops organizational tasks around a NOTES file which
: contains information about projects as plain text.  Org mode is
: implemented on top of Outline mode, which is ideal to keep the content
: of large files well structured.  It supports ToDo items, deadlines and
: time stamps, which magically appear in the diary listing of the Emacs
: calendar.  Tables are easily created with a built-in table editor.
: Plain text URL-like links connect to websites, emails (VM), Usenet
: messages (Gnus), BBDB entries, and any files related to the project.
: For printing and sharing of notes, an Org file (or a part of it)
: can be exported as a structured ASCII or HTML file.
: 
: The following commands are available:
: 
: key             binding
: ---             -------
: 
: C-a		org-beginning-of-line
: C-c		Prefix Command
: C-e		org-end-of-line
: TAB		org-cycle
: C-j		org-return-indent
: C-k		org-kill-line
: RET		org-return
: C-y		org-yank
: ESC		Prefix Command
: |		org-force-self-insert
: C-#		org-table-rotate-recalc-marks
: C-'		org-cycle-agenda-files
: C-,		org-cycle-agenda-files
: <C-M-S-left>	org-decrease-number-at-point
: <C-M-S-right>	org-increase-number-at-point
: <C-S-down>	org-shiftcontroldown
: <C-S-left>	org-shiftcontrolleft
: <C-S-return>	org-insert-todo-heading-respect-content
: <C-S-right>	org-shiftcontrolright
: <C-S-up>	org-shiftcontrolup
: <C-return>	org-insert-heading-respect-content
: <C-tab>		org-force-cycle-archived
: <M-S-down>	org-shiftmetadown
: <M-S-left>	org-shiftmetaleft
: <M-S-return>	org-insert-todo-heading
: <M-S-right>	org-shiftmetaright
: <M-S-up>	org-shiftmetaup
: <M-down>	org-metadown
: <M-left>	org-metaleft
: <M-return>	org-meta-return
: <M-right>	org-metaright
: <M-up>		org-metaup
: <S-down>	org-shiftdown
: <S-iso-lefttab>			org-shifttab
: <S-left>	org-shiftleft
: <S-mouse-2>	org-mouse-yank-link
: <S-return>	org-table-copy-down
: <S-right>	org-shiftright
: <S-tab>		org-shifttab
: <S-up>		org-shiftup
: <backtab>	org-shifttab
: <down-mouse-1>	org-mouse-down-mouse
: <drag-mouse-3>	org-mouse-yank-link
: <mouse-3>	org-mouse-show-context-menu
: <remap>		Prefix Command
: <tab>		org-cycle
: 
: C-M-i		pcomplete
: C-M-t		org-transpose-element
: M-^		org-delete-indentation
: M-a		org-backward-sentence
: M-e		org-forward-sentence
: M-h		org-mark-element
: M-{		org-backward-element
: M-}		org-forward-element
: 
: C-c C-a		org-attach
: C-c C-b		org-backward-heading-same-level
: C-c C-c		org-ctrl-c-ctrl-c
: C-c C-d		org-deadline
: C-c C-e		org-export-dispatch
: C-c C-f		org-forward-heading-same-level
: C-c C-j		org-goto
: C-c C-k		org-kill-note-or-show-branches
: C-c C-l		org-insert-link
: C-c RET		org-ctrl-c-ret
: C-c C-o		org-open-at-point
: C-c C-q		org-set-tags-command
: C-c C-r		org-reveal
: C-c C-s		org-schedule
: C-c C-t		org-todo
: C-c C-v		Prefix Command
: C-c C-w		org-refile
: C-c C-x		Prefix Command
: C-c C-y		org-evaluate-time-range
: C-c C-z		org-add-note
: C-c ESC		Prefix Command
: C-c C-^		org-up-element
: C-c C-_		org-down-element
: C-c SPC		org-table-blank-field
: C-c !		org-time-stamp-inactive
: C-c "		Prefix Command
: C-c #		org-update-statistics-cookies
: C-c $		org-archive-subtree
: C-c %		org-mark-ring-push
: C-c &		org-mark-ring-goto
: C-c '		org-edit-special
: C-c *		org-ctrl-c-star
: C-c +		org-table-sum
: C-c ,		org-priority
: C-c -		org-ctrl-c-minus
: C-c .		org-time-stamp
: C-c /		org-sparse-tree
: C-c :		org-toggle-fixed-width
: C-c ;		org-toggle-comment
: C-c <		org-date-from-calendar
: C-c =		org-table-eval-formula
: C-c >		org-goto-calendar
: C-c ?		org-table-field-info
: C-c @		org-mark-subtree
: C-c [		org-agenda-file-to-front
: C-c \		org-match-sparse-tree
: C-c ]		org-remove-file
: C-c ^		org-sort
: C-c `		org-table-edit-field
: C-c {		org-table-toggle-formula-debugger
: C-c |		org-table-create-or-convert-from-region
: C-c }		org-table-toggle-coordinate-overlays
: C-c ~		org-table-create-with-table.el
: C-c C-*		org-list-make-subtree
: 
: <remap> <backward-paragraph>	org-backward-paragraph
: <remap> <comment-dwim>		org-comment-dwim
: <remap> <delete-backward-char>	org-delete-backward-char
: <remap> <delete-char>		org-delete-char
: <remap> <fill-paragraph>	org-fill-paragraph
: <remap> <forward-paragraph>	org-forward-paragraph
: <remap> <open-line>		org-open-line
: <remap> <outline-backward-same-level>
: 				org-backward-heading-same-level
: <remap> <outline-demote>	org-demote-subtree
: <remap> <outline-forward-same-level>
: 				org-forward-heading-same-level
: <remap> <outline-insert-heading>
: 				org-ctrl-c-ret
: <remap> <outline-mark-subtree>	org-mark-subtree
: <remap> <outline-next-visible-heading>
: 				org-next-visible-heading
: <remap> <outline-previous-visible-heading>
: 				org-previous-visible-heading
: <remap> <outline-promote>	org-promote-subtree
: <remap> <outline-show-branches>
: 				org-kill-note-or-show-branches
: <remap> <outline-show-subtree>	org-show-subtree
: <remap> <self-insert-command>	org-self-insert-command
: <remap> <show-children>		org-show-children
: <remap> <transpose-words>	org-transpose-words
: 
: C-c C-a		outline-show-all
:   (that binding is currently shadowed by another mode)
: C-c C-b		outline-backward-same-level
:   (that binding is currently shadowed by another mode)
: C-c C-c		outline-hide-entry
:   (that binding is currently shadowed by another mode)
: C-c C-d		outline-hide-subtree
:   (that binding is currently shadowed by another mode)
: C-c C-e		outline-show-entry
:   (that binding is currently shadowed by another mode)
: C-c C-f		outline-forward-same-level
:   (that binding is currently shadowed by another mode)
: C-c TAB		outline-show-children
: C-c C-k		outline-show-branches
:   (that binding is currently shadowed by another mode)
: C-c C-l		outline-hide-leaves
:   (that binding is currently shadowed by another mode)
: C-c RET		outline-insert-heading
:   (that binding is currently shadowed by another mode)
: C-c C-n		outline-next-visible-heading
: C-c C-o		outline-hide-other
:   (that binding is currently shadowed by another mode)
: C-c C-p		outline-previous-visible-heading
: C-c C-q		outline-hide-sublevels
:   (that binding is currently shadowed by another mode)
: C-c C-s		outline-show-subtree
:   (that binding is currently shadowed by another mode)
: C-c C-t		outline-hide-body
:   (that binding is currently shadowed by another mode)
: C-c C-u		outline-up-heading
: C-c C-v		outline-move-subtree-down
:   (that binding is currently shadowed by another mode)
: C-c C-^		outline-move-subtree-up
:   (that binding is currently shadowed by another mode)
: C-c @		outline-mark-subtree
:   (that binding is currently shadowed by another mode)
: C-c C-<		outline-promote
: C-c C->		outline-demote
: 
: C-M-i		ispell-complete-word
:   (that binding is currently shadowed by another mode)
: 
: C-c " a		orgtbl-ascii-plot
: C-c " g		org-plot/gnuplot
: 
: C-c C-M-l	org-insert-all-links
: C-c M-b		org-previous-block
: C-c M-f		org-next-block
: C-c M-l		org-insert-last-stored-link
: C-c M-w		org-copy
: 
: C-c C-v C-a	org-babel-sha1-hash
: C-c C-v C-b	org-babel-execute-buffer
: C-c C-v C-c	org-babel-check-src-block
: C-c C-v C-d	org-babel-demarcate-block
: C-c C-v C-e	org-babel-execute-maybe
: C-c C-v C-f	org-babel-tangle-file
: C-c C-v TAB	org-babel-view-src-block-info
: C-c C-v C-j	org-babel-insert-header-arg
: C-c C-v C-l	org-babel-load-in-session
: C-c C-v C-n	org-babel-next-src-block
: C-c C-v C-o	org-babel-open-src-block-result
: C-c C-v C-p	org-babel-previous-src-block
: C-c C-v C-r	org-babel-goto-named-result
: C-c C-v C-s	org-babel-execute-subtree
: C-c C-v C-t	org-babel-tangle
: C-c C-v C-u	org-babel-goto-src-block-head
: C-c C-v C-v	org-babel-expand-src-block
: C-c C-v C-x	org-babel-do-key-sequence-in-edit-buffer
: C-c C-v C-z	org-babel-switch-to-session
: C-c C-v ESC	Prefix Command
: C-c C-v I	org-babel-view-src-block-info
: C-c C-v a	org-babel-sha1-hash
: C-c C-v b	org-babel-execute-buffer
: C-c C-v c	org-babel-check-src-block
: C-c C-v d	org-babel-demarcate-block
: C-c C-v e	org-babel-execute-maybe
: C-c C-v f	org-babel-tangle-file
: C-c C-v g	org-babel-goto-named-src-block
: C-c C-v h	org-babel-describe-bindings
: C-c C-v i	org-babel-lob-ingest
: C-c C-v j	org-babel-insert-header-arg
: C-c C-v k	org-babel-remove-result-one-or-many
: C-c C-v l	org-babel-load-in-session
: C-c C-v n	org-babel-next-src-block
: C-c C-v o	org-babel-open-src-block-result
: C-c C-v p	org-babel-previous-src-block
: C-c C-v r	org-babel-goto-named-result
: C-c C-v s	org-babel-execute-subtree
: C-c C-v t	org-babel-tangle
: C-c C-v u	org-babel-goto-src-block-head
: C-c C-v v	org-babel-expand-src-block
: C-c C-v x	org-babel-do-key-sequence-in-edit-buffer
: C-c C-v z	org-babel-switch-to-session-with-code
: 
: C-c C-x C-a	org-archive-subtree-default
: C-c C-x C-b	org-toggle-checkbox
: C-c C-x C-c	org-columns
: C-c C-x C-d	org-clock-display
: C-c C-x C-f	org-emphasize
: C-c C-x TAB	org-clock-in
: C-c C-x C-j	org-clock-goto
: C-c C-x C-l	org-toggle-latex-fragment
: C-c C-x RET	Prefix Command
: C-c C-x C-n	org-next-link
: C-c C-x C-o	org-clock-out
: C-c C-x C-p	org-previous-link
: C-c C-x C-q	org-clock-cancel
: C-c C-x C-r	org-clock-report
: C-c C-x C-s	org-archive-subtree
: C-c C-x C-t	org-toggle-time-stamp-overlays
: C-c C-x C-u	org-dblock-update
: C-c C-x C-v	org-toggle-inline-images
: C-c C-x C-w	org-cut-special
: C-c C-x C-x	org-clock-in-last
: C-c C-x C-y	org-paste-special
: C-c C-x C-z	org-resolve-clocks
: C-c C-x ESC	Prefix Command
: C-c C-x !	org-reload
: C-c C-x ,	org-timer-pause-or-continue
: C-c C-x -	org-timer-item
: C-c C-x .	org-timer
: C-c C-x 0	org-timer-start
: C-c C-x ;	org-timer-set-timer
: C-c C-x <	org-agenda-set-restriction-lock
: C-c C-x >	org-agenda-remove-restriction-lock
: C-c C-x A	org-archive-to-archive-sibling
: C-c C-x E	org-inc-effort
: C-c C-x G	org-feed-goto-inbox
: C-c C-x P	org-set-property-and-value
: C-c C-x [	org-reftex-citation
: C-c C-x \	org-toggle-pretty-entities
: C-c C-x _	org-timer-stop
: C-c C-x a	org-toggle-archive-tag
: C-c C-x b	org-tree-to-indirect-buffer
: C-c C-x c	org-clone-subtree-with-time-shift
: C-c C-x d	org-insert-drawer
: C-c C-x e	org-set-effort
: C-c C-x f	org-footnote-action
: C-c C-x g	org-feed-update-all
: C-c C-x i	org-columns-insert-dblock
: C-c C-x o	org-toggle-ordered-property
: C-c C-x p	org-set-property
: C-c C-x q	org-toggle-tags-groups
: C-c C-x v	org-copy-visible
: 
: C-c C-v C-M-h	org-babel-mark-block
: 
: C-c C-x C-M-v	org-redisplay-inline-images
: C-c C-x M-w	org-copy-special
: 
: C-c C-x RET g	org-mobile-pull
: C-c C-x RET p	org-mobile-push
: 
: 
: 
: In addition to any hooks its parent mode ‘outline-mode’ might have run,
: this mode runs the hook ‘org-mode-hook’, as the final or penultimate step
: during initialization.
** org-babel-lilypond-tangle
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-tangle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-tangle&sr=1][Find modifications in git logs]]

: ob-lilypond specific tangle, attempts to invoke
: =ly-execute-tangled-ly= if tangle is successful.  Also passes
: specific arguments to =org-babel-tangle=
** org-goto-local-auto-isearch
   :PROPERTIES:
   :CUSTOM_ID: org-goto-local-auto-isearch
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-local-auto-isearch&sr=1][Find modifications in git logs]]

: Start isearch.
** org-backward-sentence =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-backward-sentence
   :END:

- *Access:* ~M-a~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-backward-sentence&sr=1][Find modifications in git logs]]

: Go to beginning of sentence, or beginning of table field.
: This will call ‘backward-sentence’ or ‘org-table-beginning-of-field’,
: depending on context.
** org-beamer-export-to-pdf =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-export-to-pdf
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-export-to-pdf&sr=1][Find modifications in git logs]]

: Export current buffer as a Beamer presentation (PDF).
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return PDF file’s name.
** org-store-agenda-views =(&rest parameters)=
   :PROPERTIES:
   :CUSTOM_ID: org-store-agenda-views
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-store-agenda-views&sr=1][Find modifications in git logs]]

: Store agenda views.
** org-babel-load-file =(file &optional compile)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-load-file
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-load-file&sr=1][Find modifications in git logs]]

: Load Emacs Lisp source code blocks in the Org FILE.
: This function exports the source code using ‘org-babel-tangle’
: and then loads the resulting file using ‘load-file’.  With prefix
: arg (noninteractively: 2nd arg) COMPILE the tangled Emacs Lisp
: file to byte-code before it is loaded.
** org-columns =(&optional global columns-fmt-string)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns
   :END:

- *Access:* ~C-c C-x C-c, <menu-bar> <Org> <TAGS and Properties> <Column view of properties>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns&sr=1][Find modifications in git logs]]

: Turn on column view on an Org mode file.
: 
: Column view applies to the whole buffer if point is before the
: first headline.  Otherwise, it applies to the first ancestor
: setting "COLUMNS" property.  If there is none, it defaults to
: the current headline.  With a ‘C-u’ prefix argument, turn on column
: view for the whole buffer unconditionally.
: 
: When COLUMNS-FMT-STRING is non-nil, use it as the column format.
** org-check-before-date =(d)=
   :PROPERTIES:
   :CUSTOM_ID: org-check-before-date
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-check-before-date&sr=1][Find modifications in git logs]]

: Check if there are deadlines or scheduled entries before date D.
** org-agenda-drag-line-backward =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-drag-line-backward
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-drag-line-backward&sr=1][Find modifications in git logs]]

: Drag an agenda line backward by ARG lines.
** org-yank =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-yank
   :END:

- *Access:* ~C-y~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-yank&sr=1][Find modifications in git logs]]

: Yank.  If the kill is a subtree, treat it specially.
: This command will look at the current kill and check if is a single
: subtree, or a series of subtrees[1].  If it passes the test, and if the
: cursor is at the beginning of a line or after the stars of a currently
: empty headline, then the yank is handled specially.  How exactly depends
: on the value of the following variables.
: 
: ‘org-yank-folded-subtrees’
:     By default, this variable is non-nil, which results in
:     subtree(s) being folded after insertion, except if doing so
:     would swallow text after the yanked text.
: 
: ‘org-yank-adjusted-subtrees’
:     When non-nil (the default value is nil), the subtree will be
:     promoted or demoted in order to fit into the local outline tree
:     structure, which means that the level will be adjusted so that it
:     becomes the smaller one of the two *visible* surrounding headings.
: 
: Any prefix to this command will cause ‘yank’ to be called directly with
: no special treatment.  In particular, a simple ‘C-u’ prefix will just
: plainly yank the text as it is.
: 
: [1] The test checks if the first non-white line is a heading
:     and if there are no other headings with fewer stars.
** org-agenda-toggle-time-grid
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-toggle-time-grid
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-toggle-time-grid&sr=1][Find modifications in git logs]]

: Toggle time grid in an agenda buffer.
** org-agenda-todo-previousset
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-previousset
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-previousset&sr=1][Find modifications in git logs]]

: Switch TODO entry to previous sequence.
** org-agenda-priority-down
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-priority-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-priority-down&sr=1][Find modifications in git logs]]

: Decrease the priority of line at point, also in Org file.
** org-insert-link =(&optional complete-file link-location default-description)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-link
   :END:

- *Access:* ~C-c C-l, <menu-bar> <Org> <Hyperlinks> <Insert Link>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-link&sr=1][Find modifications in git logs]]

: Insert a link.  At the prompt, enter the link.
: 
: Completion can be used to insert any of the link protocol prefixes in use.
: 
: The history can be used to select a link previously stored with
: ‘org-store-link’.  When the empty string is entered (i.e. if you just
: press ‘RET’ at the prompt), the link defaults to the most recently
: stored link.  As ‘SPC’ triggers completion in the minibuffer, you need to
: use ‘M-SPC’ or ‘C-q SPC’ to force the insertion of a space character.
: 
: You will also be prompted for a description, and if one is given, it will
: be displayed in the buffer instead of the link.
: 
: If there is already a link at point, this command will allow you to edit
: link and description parts.
: 
: With a ‘C-u’ prefix, prompts for a file to link to.  The file name can be
: selected using completion.  The path to the file will be relative to the
: current directory if the file is in the current directory or a subdirectory.
: Otherwise, the link will be the absolute path as completed in the minibuffer
: (i.e. normally ~/path/to/file).  You can configure this behavior using the
: option ‘org-link-file-path-type’.
: 
: With a ‘C-u C-u’ prefix, enforce an absolute path even if the file is in
: the current directory or below.
: 
: A ‘C-u C-u C-u’ prefix negates ‘org-keep-stored-link-after-insertion’.
: 
: If ‘org-make-link-description-function’ is non-nil, this function will be
: called with the link target, and the result will be the default
: link description.
: 
: If the LINK-LOCATION parameter is non-nil, this value will be used as
: the link location instead of reading one interactively.
: 
: If the DEFAULT-DESCRIPTION parameter is non-nil, this value will be used
: as the default description.
** org-display-outline-path =(&optional file current separator just-return-string)=
   :PROPERTIES:
   :CUSTOM_ID: org-display-outline-path
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-display-outline-path&sr=1][Find modifications in git logs]]

: Display the current outline path in the echo area.
: 
: If FILE is non-nil, prepend the output with the file name.
: If CURRENT is non-nil, append the current heading to the output.
: SEPARATOR is passed through to ‘org-format-outline-path’.  It separates
: the different parts of the path and defaults to "/".
: If JUST-RETURN-STRING is non-nil, return a string, don’t display a message.
** org-timer-change-times-in-region =(beg end delta)=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-change-times-in-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-change-times-in-region&sr=1][Find modifications in git logs]]

: Change all h:mm:ss time in region by a DELTA.
** org-indent-block
   :PROPERTIES:
   :CUSTOM_ID: org-indent-block
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-block&sr=1][Find modifications in git logs]]

: Indent the block at point.
** org-latex-export-to-pdf =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-export-to-pdf
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-export-to-pdf&sr=1][Find modifications in git logs]]

: Export current buffer to LaTeX then process through to PDF.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return PDF file’s name.
** org-timestamp-up-day =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-timestamp-up-day
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timestamp-up-day&sr=1][Find modifications in git logs]]

: Increase the date in the time stamp by one day.
: With prefix ARG, change that many days.
** org-copy-special
   :PROPERTIES:
   :CUSTOM_ID: org-copy-special
   :END:

- *Access:* ~<menu-bar> <Org> <Edit Structure> <Copy Subtree>, <menu-bar> <Tbl> <Rectangle> <Copy Rectangle>, C-c C-x M-w~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-copy-special&sr=1][Find modifications in git logs]]

: Copy region in table or copy current subtree.
: Calls ‘org-table-copy-region’ or ‘org-copy-subtree’, depending on
: context.  See the individual commands for more information.
** org-paste-subtree =(&optional level tree for-yank remove)=
   :PROPERTIES:
   :CUSTOM_ID: org-paste-subtree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-paste-subtree&sr=1][Find modifications in git logs]]

: Paste the clipboard as a subtree, with modification of headline level.
: The entire subtree is promoted or demoted in order to match a new headline
: level.
: 
: If the cursor is at the beginning of a headline, the same level as
: that headline is used to paste the tree.
: 
: If not, the new level is derived from the *visible* headings
: before and after the insertion point, and taken to be the inferior headline
: level of the two.  So if the previous visible heading is level 3 and the
: next is level 4 (or vice versa), level 4 will be used for insertion.
: This makes sure that the subtree remains an independent subtree and does
: not swallow low level entries.
: 
: You can also force a different level, either by using a numeric prefix
: argument, or by inserting the heading marker by hand.  For example, if the
: cursor is after "*****", then the tree will be shifted to level 5.
: 
: If optional TREE is given, use this text instead of the kill ring.
: 
: When FOR-YANK is set, this is called by ‘org-yank’.  In this case, do not
: move back over whitespace before inserting, and move point to the end of
: the inserted text when done.
: 
: When REMOVE is non-nil, remove the subtree from the clipboard.
** org-agenda-holidays
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-holidays
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-holidays&sr=1][Find modifications in git logs]]

: Display the holidays for the 3 months around the cursor date.
** org-version =(&optional here full message)=
   :PROPERTIES:
   :CUSTOM_ID: org-version
   :END:

- *Access:* ~<menu-bar> <Org> <Documentation> <Show Version>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-version&sr=1][Find modifications in git logs]]

: Show the Org version.
: Interactively, or when MESSAGE is non-nil, show it in echo area.
: With prefix argument, or when HERE is non-nil, insert it at point.
: In non-interactive uses, a reduced version string is output unless
: FULL is given.
** org-hide-block-toggle-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-hide-block-toggle-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hide-block-toggle-maybe&sr=1][Find modifications in git logs]]

: Toggle visibility of block at point.
: Unlike to ‘org-hide-block-toggle’, this function does not throw
: an error.  Return a non-nil value when toggling is successful.
** org-publish-current-file =(&optional force async)=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-current-file
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-current-file&sr=1][Find modifications in git logs]]

: Publish the current file.
: With prefix argument FORCE, force publish the file.  When
: optional argument ASYNC is non-nil, publishing will be done
: asynchronously, in another process.
** org-next-link =(&optional search-backward)=
   :PROPERTIES:
   :CUSTOM_ID: org-next-link
   :END:

- *Access:* ~C-c C-x C-n, <menu-bar> <Org> <Hyperlinks> <Next link>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-next-link&sr=1][Find modifications in git logs]]

: Move forward to the next link.
: If the link is in hidden text, expose it.
** org-clock-goto =(&optional select)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-goto
   :END:

- *Access:* ~C-c C-x C-j, <menu-bar> <Org> <Logging work> <Goto running clock>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-goto&sr=1][Find modifications in git logs]]

: Go to the currently clocked-in entry, or to the most recently clocked one.
: With prefix arg SELECT, offer recently clocked tasks for selection.
** org-babel-do-key-sequence-in-edit-buffer =(key)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-do-key-sequence-in-edit-buffer
   :END:

- *Access:* ~C-c C-v x, C-c C-v C-x~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-do-key-sequence-in-edit-buffer&sr=1][Find modifications in git logs]]

: Read key sequence and execute the command in edit buffer.
: Enter a key sequence to be executed in the language major-mode
: edit buffer.  For example, TAB will alter the contents of the
: Org code block according to the effect of TAB in the language
: major mode buffer.  For languages that support interactive
: sessions, this can be used to send code from the Org buffer
: to the session for evaluation using the native major mode
: evaluation mechanisms.
** org-hide-block-all
   :PROPERTIES:
   :CUSTOM_ID: org-hide-block-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hide-block-all&sr=1][Find modifications in git logs]]

: Fold all blocks in the current buffer.
** org-promote-subtree
   :PROPERTIES:
   :CUSTOM_ID: org-promote-subtree
   :END:

- *Access:* ~C-c C-<~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-promote-subtree&sr=1][Find modifications in git logs]]

: Promote the entire subtree.
: See also ‘org-promote’.
** org-babel-execute-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-babel-execute-maybe
   :END:

- *Access:* ~C-c C-v C-e, C-c C-v e~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-execute-maybe&sr=1][Find modifications in git logs]]


** org-clock-in =(&optional select start-time)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-in
   :END:

- *Access:* ~C-c C-x TAB, <menu-bar> <Org> <Logging work> <Clock in>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-in&sr=1][Find modifications in git logs]]

: Start the clock on the current item.
: 
: If necessary, clock-out of the currently active clock.
: 
: With a ‘C-u’ prefix argument SELECT, offer a list of recently clocked
: tasks to clock into.
: 
: When SELECT is ‘C-u C-u’, clock into the current task and mark it as
: the default task, a special task that will always be offered in the
: clocking selection, associated with the letter ‘d’.
: 
: When SELECT is ‘C-u C-u C-u’, clock in by using the last clock-out
: time as the start time.  See ‘org-clock-continuously’ to make this
: the default behavior.
** org-do-promote
   :PROPERTIES:
   :CUSTOM_ID: org-do-promote
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-do-promote&sr=1][Find modifications in git logs]]

: Promote the current heading higher up the tree.
: If the region is active in ‘transient-mark-mode’, promote all
: headings in the region.
** org-agenda-drag-line-forward =(arg &optional backward)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-drag-line-forward
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-drag-line-forward&sr=1][Find modifications in git logs]]

: Drag an agenda line forward by ARG lines.
: When the optional argument ‘backward’ is non-nil, move backward.
** org-inc-effort
   :PROPERTIES:
   :CUSTOM_ID: org-inc-effort
   :END:

- *Access:* ~C-c C-x E~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-inc-effort&sr=1][Find modifications in git logs]]

: Increment the value of the effort property in the current entry.
** org-indent-to-column =(column &optional minimum)=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-to-column
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-to-column&sr=1][Find modifications in git logs]]

: Indent from point with tabs and spaces until COLUMN is reached.
: Optional second argument MINIMUM says always do at least MINIMUM spaces
: even if that goes past COLUMN; by default, MINIMUM is zero.
: 
: The return value is COLUMN.
: 
: (fn COLUMN &optional MINIMUM)
** org-agenda-kill
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-kill
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-kill&sr=1][Find modifications in git logs]]

: Kill the entry or subtree belonging to the current agenda entry.
** org-protocol-create =(&optional project-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-protocol-create
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-protocol.el;hb=HEAD][org-protocol.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-protocol-create&sr=1][Find modifications in git logs]]

: Create a new org-protocol project interactively.
: An org-protocol project is an entry in
: ‘org-protocol-project-alist’ which is used by
: ‘org-protocol-open-source’.  Optionally use PROJECT-PLIST to
: initialize the defaults for this project.  If PROJECT-PLIST is
: the cdr of an element in ‘org-publish-project-alist’, reuse
: :base-directory, :html-extension and :base-extension.
** org-odt-export-as-odf =(latex-frag &optional odf-file)=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-export-as-odf
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-export-as-odf&sr=1][Find modifications in git logs]]

: Export LATEX-FRAG as OpenDocument formula file ODF-FILE.
: Use ‘org-create-math-formula’ to convert LATEX-FRAG first to
: MathML.  When invoked as an interactive command, use
: ‘org-latex-regexps’ to infer LATEX-FRAG from currently active
: region.  If no LaTeX fragments are found, prompt for it.  Push
: MathML source to kill ring depending on the value of
: ‘org-export-copy-to-kill-ring’.
** org-footnote-new
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-new
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-new&sr=1][Find modifications in git logs]]

: Insert a new footnote.
: This command prompts for a label.  If this is a label referencing an
: existing label, only insert the label.  If the footnote label is empty
: or new, let the user edit the definition of the footnote.
** org-edit-src-save
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-save
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-save&sr=1][Find modifications in git logs]]

: Save parent buffer with current state source-code buffer.
** org-inlinetask-insert-task =(&optional no-state)=
   :PROPERTIES:
   :CUSTOM_ID: org-inlinetask-insert-task
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-inlinetask.el;hb=HEAD][org-inlinetask.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-inlinetask-insert-task&sr=1][Find modifications in git logs]]

: Insert an inline task.
: If prefix arg NO-STATE is set, ignore ‘org-inlinetask-default-state’.
** org-lint--ignore-checker
   :PROPERTIES:
   :CUSTOM_ID: org-lint--ignore-checker
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-lint.el;hb=HEAD][org-lint.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lint--ignore-checker&sr=1][Find modifications in git logs]]

: Ignore all reports from checker that generated the report at point.
: Checker will also be ignored in all subsequent reports.
** org-table-import =(file arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-import
   :END:

- *Access:* ~<menu-bar> <Tbl> <Import from File>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-import&sr=1][Find modifications in git logs]]

: Import FILE as a table.
: The file is assumed to be tab-separated.  Such files can be produced by most
: spreadsheet and database applications.  If no tabs (at least one per line)
: are found, lines will be split on whitespace into fields.
** org-babel-next-src-block =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-next-src-block
   :END:

- *Access:* ~C-c C-v C-n, C-c C-v n~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-next-src-block&sr=1][Find modifications in git logs]]

: Jump to the next source block.
: With optional prefix argument ARG, jump forward ARG many source blocks.
** org-submit-bug-report
   :PROPERTIES:
   :CUSTOM_ID: org-submit-bug-report
   :END:

- *Access:* ~<menu-bar> <Org> <Send bug report>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-submit-bug-report&sr=1][Find modifications in git logs]]

: Submit a bug report on Org via mail.
: 
: Don’t hesitate to report any problems or inaccurate documentation.
: 
: If you don’t have setup sending mail from (X)Emacs, please copy the
: output buffer into your mail program, as it gives us important
: information about your Org version and configuration.
** org-agenda-convert-date
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-convert-date
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-convert-date&sr=1][Find modifications in git logs]]


** org-shiftmetaup =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetaup
   :END:

- *Access:* ~<M-S-up>, <menu-bar> <Tbl> <Row> <Delete Row>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetaup&sr=1][Find modifications in git logs]]

: Drag the line at point up.
: In a table, kill the current row.
: On a clock timestamp, update the value of the timestamp like ‘S-<up>’
: but also adjust the previous clocked item in the clock history.
: Everywhere else, drag the line at point up.
** org-babel-hash-at-point =(&optional point)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-hash-at-point
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-hash-at-point&sr=1][Find modifications in git logs]]

: Return the value of the hash at POINT.
: The hash is also added as the last element of the kill ring.
: This can be called with ‘C-c C-c’.
** org-footnote-renumber-fn:N
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-renumber-fn:N
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-renumber-fn:N&sr=1][Find modifications in git logs]]

: Order numbered footnotes into a sequence in the document.
** org-babel-pop-to-session-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-babel-pop-to-session-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-pop-to-session-maybe&sr=1][Find modifications in git logs]]

: Conditionally pop to a session.
: Detect if this is context for a org-babel src-block and if so
: then run ‘org-babel-switch-to-session’.
** org-agenda-goto =(&optional highlight)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-goto
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-goto&sr=1][Find modifications in git logs]]

: Go to the entry at point in the corresponding Org file.
** org-mouse-show-overview
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-show-overview
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-show-overview&sr=1][Find modifications in git logs]]

: Change visibility of current org buffer to first-level headlines only.
** org-agenda-switch-to =(&optional delete-other-windows)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-switch-to
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-switch-to&sr=1][Find modifications in git logs]]

: Go to the Org mode file which contains the item at point.
: When optional argument DELETE-OTHER-WINDOWS is non-nil, the
: displayed Org file fills the frame.
** org-babel-goto-named-src-block =(name)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-goto-named-src-block
   :END:

- *Access:* ~C-c C-v g~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-goto-named-src-block&sr=1][Find modifications in git logs]]

: Go to a named source-code block.
** org-org-export-as-org =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-org-export-as-org
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-org.el;hb=HEAD][ox-org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-org-export-as-org&sr=1][Find modifications in git logs]]

: Export current buffer to an Org buffer.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, strip document
: keywords from output.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Export is done in a buffer named "*Org ORG Export*", which will
: be displayed when ‘org-export-show-temporary-export-buffer’ is
: non-nil.
** org-export-stack-remove =(&optional source)=
   :PROPERTIES:
   :CUSTOM_ID: org-export-stack-remove
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-stack-remove&sr=1][Find modifications in git logs]]

: Remove export results at point from stack.
: If optional argument SOURCE is non-nil, remove it instead.
** org-table-fedit-ref-left
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-ref-left
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-ref-left&sr=1][Find modifications in git logs]]

: Shift the reference at point one field to the left.
** org-timer-start =(&optional offset)=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-start
   :END:

- *Access:* ~C-c C-x 0, <menu-bar> <Org> <Dates and Scheduling> <Start/Restart Timer>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-start&sr=1][Find modifications in git logs]]

: Set the starting time for the relative timer to now.
: When called with prefix argument OFFSET, prompt the user for an offset time,
: with the default taken from a timer stamp at point, if any.
: If OFFSET is a string or an integer, it is directly taken to be the offset
: without user interaction.
: When called with a double prefix arg, all timer strings in the active
: region will be shifted by a specific amount.  You will be prompted for
: the amount, with the default to make the first timer string in
: the region 0:00:00.
** org-agenda-todo-nextset
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-nextset
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-nextset&sr=1][Find modifications in git logs]]

: Switch TODO entry to next sequence.
** org-edit-fixed-width-region
   :PROPERTIES:
   :CUSTOM_ID: org-edit-fixed-width-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-fixed-width-region&sr=1][Find modifications in git logs]]

: Edit the fixed-width ASCII drawing at point.
: 
: This must be a region where each line starts with a colon
: followed by a space or a newline character.
: 
: A new buffer is created and the fixed-width region is copied into
: it, and the buffer is switched into the major mode defined in
: ‘org-edit-fixed-width-region-mode’, which see.
: 
: When done, exit with ‘C-c '’.  The edited text will then replace
: the area in the Org mode buffer.
** org-dblock-update =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-dblock-update
   :END:

- *Access:* ~C-c C-x C-u~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-dblock-update&sr=1][Find modifications in git logs]]

: User command for updating dynamic blocks.
: Update the dynamic block at point.  With prefix ARG, update all dynamic
: blocks in the buffer.
** org-capture-string =(string &optional keys)=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-string
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-string&sr=1][Find modifications in git logs]]

: Capture STRING with the template selected by KEYS.
** org-clock-select-task =(&optional prompt)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-select-task
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-select-task&sr=1][Find modifications in git logs]]

: Select a task that was recently associated with clocking.
** org-rss-export-as-rss =(&optional async subtreep visible-only)=
   :PROPERTIES:
   :CUSTOM_ID: org-rss-export-as-rss
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-rss.el;hb=HEAD][ox-rss.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-rss-export-as-rss&sr=1][Find modifications in git logs]]

: Export current buffer to a RSS buffer.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: Export is done in a buffer named "*Org RSS Export*", which will
: be displayed when ‘org-export-show-temporary-export-buffer’ is
: non-nil.
** org-babel-initiate-session =(&optional arg info)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-initiate-session
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-initiate-session&sr=1][Find modifications in git logs]]

: Initiate session for current code block.
: If called with a prefix argument then resolve any variable
: references in the header arguments and assign these variables in
: the session.  Copy the body of the code block to the kill ring.
** org-table-calc-current-TBLFM =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-calc-current-TBLFM
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-calc-current-TBLFM&sr=1][Find modifications in git logs]]

: Apply the #+TBLFM in the line at point to the table.
** org-table-fedit-ref-down
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-ref-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-ref-down&sr=1][Find modifications in git logs]]

: Shift the reference at point one row/hline down.
** org-clock-modify-effort-estimate =(&optional value)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-modify-effort-estimate
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-modify-effort-estimate&sr=1][Find modifications in git logs]]

: Add to or set the effort estimate of the item currently being clocked.
: VALUE can be a number of minutes, or a string with format hh:mm or mm.
: When the string starts with a + or a - sign, the current value of the effort
: property will be changed by that amount.  If the effort value is expressed
: as an ‘org-effort-durations’ (e.g. "3h"), the modified value will be
: converted to a hh:mm duration.
: 
: This command will update the "Effort" property of the currently
: clocked item, and the value displayed in the mode line.
** org-agenda-next-line
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-next-line
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-next-line&sr=1][Find modifications in git logs]]

: Move cursor to the next line, and show if follow mode is active.
** org-previous-item
   :PROPERTIES:
   :CUSTOM_ID: org-previous-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-previous-item&sr=1][Find modifications in git logs]]

: Move to the beginning of the previous item.
: Throw an error when not in a list.  Also throw an error when at
: first item, unless ‘org-list-use-circular-motion’ is non-nil.
** org-ascii-export-as-ascii =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-export-as-ascii
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-export-as-ascii&sr=1][Find modifications in git logs]]

: Export current buffer to a text buffer.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, strip title and
: table of contents from output.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Export is done in a buffer named "*Org ASCII Export*", which
: will be displayed when ‘org-export-show-temporary-export-buffer’
: is non-nil.
** org-redisplay-inline-images
   :PROPERTIES:
   :CUSTOM_ID: org-redisplay-inline-images
   :END:

- *Access:* ~C-c C-x C-M-v~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-redisplay-inline-images&sr=1][Find modifications in git logs]]

: Refresh the display of inline images.
** org-agenda-toggle-archive-tag
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-toggle-archive-tag
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-toggle-archive-tag&sr=1][Find modifications in git logs]]

: Toggle the archive tag for the current entry.
** org-agenda-capture =(&optional with-time)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-capture
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-capture&sr=1][Find modifications in git logs]]

: Call ‘org-capture’ with the date at point.
: With a ‘C-1’ prefix, use the HH:MM value at point (if any) or the
: current HH:MM time.
** org-datetree-cleanup
   :PROPERTIES:
   :CUSTOM_ID: org-datetree-cleanup
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-datetree.el;hb=HEAD][org-datetree.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-datetree-cleanup&sr=1][Find modifications in git logs]]

: Make sure all entries in the current tree are under the correct date.
: It may be useful to restrict the buffer to the applicable portion
: before running this command, even though the command tries to be smart.
** org-agenda-date-earlier-hours =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-date-earlier-hours
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-date-earlier-hours&sr=1][Find modifications in git logs]]

: Change the time of this item, in hour steps.
** org-agenda-date-later-minutes =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-date-later-minutes
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-date-later-minutes&sr=1][Find modifications in git logs]]

: Change the time of this item, in units of ‘org-time-stamp-rounding-minutes’.
** org-table-rotate-recalc-marks =(&optional newchar)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-rotate-recalc-marks
   :END:

- *Access:* ~C-#, <menu-bar> <Tbl> <Calculate> <Toggle Recalculate Mark>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-rotate-recalc-marks&sr=1][Find modifications in git logs]]

: Rotate the recalculation mark in the first column.
: If in any row, the first field is not consistent with a mark,
: insert a new column for the markers.
: When there is an active region, change all the lines in the region,
: after prompting for the marking character.
: After each change, a message will be displayed indicating the meaning
: of the new mark.
** org-drag-element-backward
   :PROPERTIES:
   :CUSTOM_ID: org-drag-element-backward
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-drag-element-backward&sr=1][Find modifications in git logs]]

: Move backward element at point.
** org-transpose-words
   :PROPERTIES:
   :CUSTOM_ID: org-transpose-words
   :END:

- *Access:* ~M-t~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-transpose-words&sr=1][Find modifications in git logs]]

: Transpose words for Org.
: This uses the ‘org-mode-transpose-word-syntax-table’ syntax
: table, which interprets characters in ‘org-emphasis-alist’ as
: word constituents.
** org-next-block =(arg &optional backward block-regexp)=
   :PROPERTIES:
   :CUSTOM_ID: org-next-block
   :END:

- *Access:* ~C-c M-f~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-next-block&sr=1][Find modifications in git logs]]

: Jump to the next block.
: 
: With a prefix argument ARG, jump forward ARG many blocks.
: 
: When BACKWARD is non-nil, jump to the previous block.
: 
: When BLOCK-REGEXP is non-nil, use this regexp to find blocks.
: Match data is set according to this regexp when the function
: returns.
: 
: Return point at beginning of the opening line of found block.
: Throw an error if no block is found.
** org-indent-indent-buffer
   :PROPERTIES:
   :CUSTOM_ID: org-indent-indent-buffer
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-indent.el;hb=HEAD][org-indent.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-indent-buffer&sr=1][Find modifications in git logs]]

: Add indentation properties to the accessible part of the buffer.
** org-babel-execute-src-block =(&optional arg info params)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-execute-src-block
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-execute-src-block&sr=1][Find modifications in git logs]]

: Execute the current source code block.
: Insert the results of execution into the buffer.  Source code
: execution and the collection and formatting of results can be
: controlled through a variety of header arguments.
: 
: With prefix argument ARG, force re-execution even if an existing
: result cached in the buffer would otherwise have been returned.
: 
: Optionally supply a value for INFO in the form returned by
: ‘org-babel-get-src-block-info’.
: 
: Optionally supply a value for PARAMS which will be merged with
: the header arguments specified at the front of the source code
: block.
** org-find-entry-with-id =(ident)=
   :PROPERTIES:
   :CUSTOM_ID: org-find-entry-with-id
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-find-entry-with-id&sr=1][Find modifications in git logs]]

: Locate the entry that contains the ID property with exact value IDENT.
: IDENT can be a string, a symbol or a number, this function will search for
: the string representation of it.
: Return the position where this entry starts, or nil if there is no such entry.
** org-table-next-field
   :PROPERTIES:
   :CUSTOM_ID: org-table-next-field
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-next-field&sr=1][Find modifications in git logs]]

: Go to the next field in the current table, creating new lines as needed.
: Before doing so, re-align the table if necessary.
** org-table-copy-down =(n)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-copy-down
   :END:

- *Access:* ~<S-return>, <menu-bar> <Tbl> <Copy Field from Above>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-copy-down&sr=1][Find modifications in git logs]]

: Copy the value of the current field one row below.
: 
: If the field at the cursor is empty, copy the content of the
: nearest non-empty field above.  With argument N, use the Nth
: non-empty field.
: 
: If the current field is not empty, it is copied down to the next
: row, and the cursor is moved with it.  Therefore, repeating this
: command causes the column to be filled row-by-row.
: 
: If the variable ‘org-table-copy-increment’ is non-nil and the
: field is an integer or a timestamp, it will be incremented while
: copying.  By default, increment by the difference between the
: value in the current field and the one in the field above.  To
: increment using a fixed integer, set ‘org-table-copy-increment’
: to a number.  In the case of a timestamp, increment by days.
** org-agenda-cycle-show =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-cycle-show
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-cycle-show&sr=1][Find modifications in git logs]]

: Show the current entry in another window, with default settings.
: 
: Default settings are taken from ‘org-show-context-detail’.  When
: use repeatedly in immediate succession, the remote entry will
: cycle through visibility
: 
:   children -> subtree -> folded
: 
: When called with a numeric prefix arg, that arg will be passed through to
: ‘org-agenda-show-1’.  For the interpretation of that argument, see the
: docstring of ‘org-agenda-show-1’.
** org-agenda-archive
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-archive
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-archive&sr=1][Find modifications in git logs]]

: Archive the entry or subtree belonging to the current agenda entry.
** org-babel-lob-execute-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lob-execute-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lob.el;hb=HEAD][ob-lob.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lob-execute-maybe&sr=1][Find modifications in git logs]]

: Execute a Library of Babel source block, if appropriate.
: Detect if this is context for a Library Of Babel source block and
: if so then run the appropriate source block from the Library.
** org-timestamp-down =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-timestamp-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timestamp-down&sr=1][Find modifications in git logs]]

: Decrease the date item at the cursor by one.
: If the cursor is on the year, change the year.  If it is on the month,
: the day or the time, change that.
: With prefix ARG, change by that many units.
** org-agenda-next-date-line =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-next-date-line
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-next-date-line&sr=1][Find modifications in git logs]]

: Jump to the next line indicating a date in agenda buffer.
** org-agenda-show-and-scroll-up =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-and-scroll-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-and-scroll-up&sr=1][Find modifications in git logs]]

: Display the Org file which contains the item at point.
: 
: When called repeatedly, scroll the window that is displaying the buffer.
: 
: With a ‘C-u’ prefix, use ‘org-show-entry’ instead of ‘outline-show-subtree’
: to display the item, so that drawers and logbooks stay folded.
** org-mouse-move-tree =(event)=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-move-tree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-move-tree&sr=1][Find modifications in git logs]]


** org-timestamp-up =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-timestamp-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timestamp-up&sr=1][Find modifications in git logs]]

: Increase the date item at the cursor by one.
: If the cursor is on the year, change the year.  If it is on the month,
: the day or the time, change that.
: With prefix ARG, change by that many units.
** org-mouse-show-headlines
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-show-headlines
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-show-headlines&sr=1][Find modifications in git logs]]

: Change the visibility of the current org buffer to only show headlines.
** org-publish =(project &optional force async)=
   :PROPERTIES:
   :CUSTOM_ID: org-publish
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish&sr=1][Find modifications in git logs]]

: Publish PROJECT.
: 
: PROJECT is either a project name, as a string, or a project
: alist (see ‘org-publish-project-alist’ variable).
: 
: When optional argument FORCE is non-nil, force publishing all
: files in PROJECT.  With a non-nil optional argument ASYNC,
: publishing will be done asynchronously, in another process.
** org-speedbar-set-agenda-restriction
   :PROPERTIES:
   :CUSTOM_ID: org-speedbar-set-agenda-restriction
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-speedbar-set-agenda-restriction&sr=1][Find modifications in git logs]]

: Restrict future agenda commands to the location at point in speedbar.
: To get rid of the restriction, use ‘C-c C-x >’.
** org-mark-ring-push =(&optional pos buffer)=
   :PROPERTIES:
   :CUSTOM_ID: org-mark-ring-push
   :END:

- *Access:* ~C-c %~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mark-ring-push&sr=1][Find modifications in git logs]]

: Put the current position or POS into the mark ring and rotate it.
** org-mouse-timestamp-today =(&optional shift units)=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-timestamp-today
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-timestamp-today&sr=1][Find modifications in git logs]]

: Change the timestamp into SHIFT UNITS in the future.
: 
: For the acceptable UNITS, see ‘org-timestamp-change’.
** org-shiftup =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftup
   :END:

- *Access:* ~<S-up>, <menu-bar> <Org> <TODO Lists> <Priority Up>, <menu-bar> <Org> <Dates and Scheduling> <Change Date> <1 ... Later>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftup&sr=1][Find modifications in git logs]]

: Increase item in timestamp or increase priority of current headline.
: Calls ‘org-timestamp-up’ or ‘org-priority-up’, or ‘org-previous-item’,
: depending on context.  See the individual commands for more information.
** org-archive-to-archive-sibling
   :PROPERTIES:
   :CUSTOM_ID: org-archive-to-archive-sibling
   :END:

- *Access:* ~C-c C-x A, <menu-bar> <Org> <Archive> <Move subtree to Archive sibling>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-to-archive-sibling&sr=1][Find modifications in git logs]]

: Archive the current heading by moving it under the archive sibling.
: 
: The archive sibling is a sibling of the heading with the heading name
: ‘org-archive-sibling-heading’ and an ‘org-archive-tag’ tag.  If this
: sibling does not exist, it will be created at the end of the subtree.
: 
: Archiving time is retained in the ARCHIVE_TIME node property.
** org-publish-project =(project &optional force async)=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-project
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-project&sr=1][Find modifications in git logs]]

: Publish PROJECT.
: 
: PROJECT is either a project name, as a string, or a project
: alist (see ‘org-publish-project-alist’ variable).
: 
: When optional argument FORCE is non-nil, force publishing all
: files in PROJECT.  With a non-nil optional argument ASYNC,
: publishing will be done asynchronously, in another process.
** org-table-convert-region =(beg0 end0 &optional separator)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-convert-region
   :END:

- *Access:* ~<menu-bar> <Tbl> <Convert Region>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-convert-region&sr=1][Find modifications in git logs]]

: Convert region to a table.
: 
: The region goes from BEG0 to END0, but these borders will be moved
: slightly, to make sure a beginning of line in the first line is included.
: 
: SEPARATOR specifies the field separator in the lines.  It can have the
: following values:
: 
: (4)     Use the comma as a field separator
: (16)    Use a TAB as field separator
: (64)    Prompt for a regular expression as field separator
: integer  When a number, use that many spaces, or a TAB, as field separator
: regexp   When a regular expression, use it to match the separator
: nil      When nil, the command tries to be smart and figure out the
:          separator in the following way:
:          - when each line contains a TAB, assume TAB-separated material
:          - when each line contains a comma, assume CSV material
:          - else, assume one or more SPACE characters as separator.
** org-goto-left
   :PROPERTIES:
   :CUSTOM_ID: org-goto-left
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-left&sr=1][Find modifications in git logs]]

: Finish ‘org-goto’ by going to the new location.
** org-babel-goto-src-block-head
   :PROPERTIES:
   :CUSTOM_ID: org-babel-goto-src-block-head
   :END:

- *Access:* ~C-c C-v C-u, C-c C-v u~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-goto-src-block-head&sr=1][Find modifications in git logs]]

: Go to the beginning of the current code block.
** org-down-element
   :PROPERTIES:
   :CUSTOM_ID: org-down-element
   :END:

- *Access:* ~C-c C-_~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-down-element&sr=1][Find modifications in git logs]]

: Move to inner element.
** org-shiftmetaright
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetaright
   :END:

- *Access:* ~<M-S-right>, <menu-bar> <Org> <Edit Structure> <Demote Subtree>, <menu-bar> <Tbl> <Column> <Insert Column>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetaright&sr=1][Find modifications in git logs]]

: Demote subtree or insert table column.
: Calls ‘org-demote-subtree’, ‘org-indent-item-tree’, or
: ‘org-table-insert-column’, depending on context.  See the
: individual commands for more information.
** org-edit-export-block
   :PROPERTIES:
   :CUSTOM_ID: org-edit-export-block
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-export-block&sr=1][Find modifications in git logs]]

: Edit export block at point.
: 
: A new buffer is created and the block is copied into it, and the
: buffer is switched into an appropriate major mode.  See also
: ‘org-src-lang-modes’.
: 
: When done, exit with ‘C-c '’.  The edited text will then replace
: the area in the Org mode buffer.
: 
: Throw an error when not at an export block.
** org-babel-remove-result =(&optional info keep-keyword)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-remove-result
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-remove-result&sr=1][Find modifications in git logs]]

: Remove the result of the current source block.
** org-md-export-to-markdown =(&optional async subtreep visible-only)=
   :PROPERTIES:
   :CUSTOM_ID: org-md-export-to-markdown
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-md.el;hb=HEAD][ox-md.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-md-export-to-markdown&sr=1][Find modifications in git logs]]

: Export current buffer to a Markdown file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: Return output file’s name.
** org-decrypt-entries
   :PROPERTIES:
   :CUSTOM_ID: org-decrypt-entries
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-crypt.el;hb=HEAD][org-crypt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-decrypt-entries&sr=1][Find modifications in git logs]]

: Decrypt all entries in the current buffer.
** org-timer-item =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-item
   :END:

- *Access:* ~C-c C-x -, <menu-bar> <Org> <Dates and Scheduling> <Insert Timer Item>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-item&sr=1][Find modifications in git logs]]

: Insert a description-type item with the current timer value.
** org-clock-update-time-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-clock-update-time-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-update-time-maybe&sr=1][Find modifications in git logs]]

: If this is a CLOCK line, update it and return t.
: Otherwise, return nil.
** org-reftex-citation
   :PROPERTIES:
   :CUSTOM_ID: org-reftex-citation
   :END:

- *Access:* ~C-c C-x [, <menu-bar> <Org> <LaTeX> <Insert citation>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-reftex-citation&sr=1][Find modifications in git logs]]

: Use reftex-citation to insert a citation into the buffer.
: This looks for a line like
: 
: #+BIBLIOGRAPHY: foo plain option:-d
: 
: and derives from it that foo.bib is the bibliography file relevant
: for this document.  It then installs the necessary environment for RefTeX
: to work in this buffer and calls ‘reftex-citation’  to insert a citation
: into the buffer.
: 
: Export of such citations to both LaTeX and HTML is handled by the contributed
: package ox-bibtex by Taru Karttunen.
** org-speed-command-help
   :PROPERTIES:
   :CUSTOM_ID: org-speed-command-help
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-speed-command-help&sr=1][Find modifications in git logs]]

: Show the available speed commands.
** org-clock-report =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-report
   :END:

- *Access:* ~C-c C-x C-r, <menu-bar> <Org> <Logging work> <Create clock table>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-report&sr=1][Find modifications in git logs]]

: Create a table containing a report about clocked time.
: If the cursor is inside an existing clocktable block, then the table
: will be updated.  If not, a new clocktable will be inserted.  The scope
: of the new clock will be subtree when called from within a subtree, and
: file elsewhere.
: 
: When called with a prefix argument, move to the first clock table in the
: buffer and update it.
** orgtbl-ret
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-ret
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-ret&sr=1][Find modifications in git logs]]

: Justification and field motion for ‘orgtbl-mode’.
** org-activate-plain-links =(&rest ignore)=
   :PROPERTIES:
   :CUSTOM_ID: org-activate-plain-links
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-activate-plain-links&sr=1][Find modifications in git logs]]

: Do nothing and return nil.
: This function accepts any number of arguments, but ignores them.
: 
: (fn &rest IGNORE)
** org-attach-set-inherit
   :PROPERTIES:
   :CUSTOM_ID: org-attach-set-inherit
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-set-inherit&sr=1][Find modifications in git logs]]

: Set the ATTACH_DIR_INHERIT property of the current entry.
: The property defines the directory that is used for attachments
: of the entry and any children that do not explicitly define (by setting
: the ATTACH_DIR property) their own attachment directory.
** org-clock-mark-default-task
   :PROPERTIES:
   :CUSTOM_ID: org-clock-mark-default-task
   :END:

- *Access:* ~<menu-bar> <Org> <Logging work> <Mark as default task>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-mark-default-task&sr=1][Find modifications in git logs]]

: Mark current task as default task.
** org-agenda-later =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-later
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-later&sr=1][Find modifications in git logs]]

: Go forward in time by the current span.
: With prefix ARG, go forward that many times the current span.
** org-feed-update =(feed &optional retrieve-only)=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-update
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-update&sr=1][Find modifications in git logs]]

: Get inbox items from FEED.
: FEED can be a string with an association in ‘org-feed-alist’, or
: it can be a list structured like an entry in ‘org-feed-alist’.
** org-agenda-date-prompt =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-date-prompt
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-date-prompt&sr=1][Find modifications in git logs]]

: Change the date of this item.  Date is prompted for, with default today.
: The prefix ARG is passed to the ‘org-time-stamp’ command and can therefore
: be used to request time specification in the time stamp.
** org-agenda-view-mode-dispatch
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-view-mode-dispatch
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-view-mode-dispatch&sr=1][Find modifications in git logs]]

: Call one of the view mode commands.
** org-agenda-show-mouse =(ev)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-mouse
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-mouse&sr=1][Find modifications in git logs]]

: Display the Org file which contains the item at the mouse click.
** org-agenda-remove-filter =(type)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-remove-filter
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-remove-filter&sr=1][Find modifications in git logs]]


** org-agenda-set-tags =(&optional tag onoff)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-set-tags
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-set-tags&sr=1][Find modifications in git logs]]

: Set tags for the current headline.
** org-clock-remove-overlays =(&optional _beg _end noremove)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-remove-overlays
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-remove-overlays&sr=1][Find modifications in git logs]]

: Remove the occur highlights from the buffer.
: If NOREMOVE is nil, remove this function from the
: ‘before-change-functions’ in the current buffer.
** org-set-property =(property value)=
   :PROPERTIES:
   :CUSTOM_ID: org-set-property
   :END:

- *Access:* ~C-c C-x p, <menu-bar> <Org> <TAGS and Properties> <Set property>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-set-property&sr=1][Find modifications in git logs]]

: In the current entry, set PROPERTY to VALUE.
: 
: When called interactively, this will prompt for a property name, offering
: completion on existing and default properties.  And then it will prompt
: for a value, offering completion either on allowed values (via an inherited
: xxx_ALL property) or on existing values in other instances of this property
: in the current file.
: 
: Throw an error when trying to set a property with an invalid name.
** org-store-link =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-store-link
   :END:

- *Access:* ~<menu-bar> <Org> <Hyperlinks> <Store Link (Global)>, C-c l~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-store-link&sr=1][Find modifications in git logs]]

: Store an org-link to the current location.
: 
: This link is added to ‘org-stored-links’ and can later be inserted
: into an Org buffer with ‘org-insert-link’ (‘C-c C-l’).
: 
: For some link types, a ‘C-u’ prefix ARG is interpreted.  A single
: ‘C-u’ negates ‘org-context-in-file-links’ for file links or
: ‘org-gnus-prefer-web-links’ for links to Usenet articles.
: 
: A ‘C-u C-u’ prefix ARG forces skipping storing functions that are not
: part of Org core.
: 
: A ‘C-u C-u C-u’ prefix ARG forces storing a link for each line in the
: active region.
** org-toggle-item =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-item&sr=1][Find modifications in git logs]]

: Convert headings or normal lines to items, items to normal lines.
: If there is no active region, only the current line is considered.
: 
: If the first non blank line in the region is a headline, convert
: all headlines to items, shifting text accordingly.
: 
: If it is an item, convert all items to normal lines.
: 
: If it is normal text, change region into a list of items.
: With a prefix argument ARG, change the region in a single item.
** orgtbl-tab =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-tab
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-tab&sr=1][Find modifications in git logs]]

: Justification and field motion for ‘orgtbl-mode’.
** org-table-insert-row =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-insert-row
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-insert-row&sr=1][Find modifications in git logs]]

: Insert a new row above the current line into the table.
: With prefix ARG, insert below the current line.
** org-agenda-show-1 =(&optional more)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-1
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-1&sr=1][Find modifications in git logs]]

: Display the Org file which contains the item at point.
: The prefix arg selects the amount of information to display:
: 
: 0   hide the subtree
: 1   just show the entry according to defaults.
: 2   show the children view
: 3   show the subtree view
: 4   show the entire subtree and any LOGBOOK drawers
: 5   show the entire subtree and any drawers
: With prefix argument FULL-ENTRY, make the entire entry visible
: if it was hidden in the outline.
** orgstruct-error
   :PROPERTIES:
   :CUSTOM_ID: orgstruct-error
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgstruct-error&sr=1][Find modifications in git logs]]

: Error when there is no default binding for a structure key.
** org-table-edit-formulas
   :PROPERTIES:
   :CUSTOM_ID: org-table-edit-formulas
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-edit-formulas&sr=1][Find modifications in git logs]]

: Edit the formulas of the current table in a separate buffer.
** org-escape-code-in-region =(beg end)=
   :PROPERTIES:
   :CUSTOM_ID: org-escape-code-in-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-escape-code-in-region&sr=1][Find modifications in git logs]]

: Escape lines between BEG and END.
: Escaping happens when a line starts with "*", "#+", ",*" or
: ",#+" by appending a comma to it.
** org-timer =(&optional restart no-insert)=
   :PROPERTIES:
   :CUSTOM_ID: org-timer
   :END:

- *Access:* ~C-c C-x ., <menu-bar> <Org> <Dates and Scheduling> <Insert Timer String>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer&sr=1][Find modifications in git logs]]

: Insert a H:MM:SS string from the timer into the buffer.
: The first time this command is used, the timer is started.
: 
: When used with a ‘C-u’ prefix, force restarting the timer.
: 
: When used with a ‘C-u C-u’ prefix, change all the timer strings
: in the region by a fixed amount.  This can be used to re-calibrate
: a timer that was not started at the correct moment.
: 
: If NO-INSERT is non-nil, return the string instead of inserting
: it in the buffer.
** org-element-cache-reset =(&optional all)=
   :PROPERTIES:
   :CUSTOM_ID: org-element-cache-reset
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-element.el;hb=HEAD][org-element.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-element-cache-reset&sr=1][Find modifications in git logs]]

: Reset cache in current buffer.
: When optional argument ALL is non-nil, reset cache in all Org
: buffers.
** org-backward-paragraph
   :PROPERTIES:
   :CUSTOM_ID: org-backward-paragraph
   :END:

- *Access:* ~<C-up>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-backward-paragraph&sr=1][Find modifications in git logs]]

: Move backward to start of previous paragraph or equivalent.
: 
: The function moves point to the beginning of the current
: structural element, which can be a paragraph, a table, a list
: item, etc., or to the beginning of the previous visible one if
: point is already there.  It also provides some special moves for
: convenience:
: 
:   - On an affiliated keyword, jump to the first one.
:   - On a table or a property drawer, move to its beginning.
:   - On a verse or source block, stop before blank lines.
** org-agenda-show =(&optional full-entry)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show&sr=1][Find modifications in git logs]]

: Display the Org file which contains the item at point.
: With prefix argument FULL-ENTRY, make the entire entry visible
: if it was hidden in the outline.
** org-table-kill-row
   :PROPERTIES:
   :CUSTOM_ID: org-table-kill-row
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-kill-row&sr=1][Find modifications in git logs]]

: Delete the current row or horizontal line from the table.
** org-agenda-Quit
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-Quit
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-Quit&sr=1][Find modifications in git logs]]

: Exit the agenda, killing the agenda buffer.
: Like ‘org-agenda-quit’, but kill the buffer even when
: ‘org-agenda-sticky’ is non-nil.
** org-icalendar-combine-agenda-files =(&optional async)=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-combine-agenda-files
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-combine-agenda-files&sr=1][Find modifications in git logs]]

: Combine all agenda files into a single iCalendar file.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: The file is stored under the name chosen in
: ‘org-icalendar-combined-agenda-file’.
** org-agenda-archive-default
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-archive-default
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-archive-default&sr=1][Find modifications in git logs]]

: Archive the entry or subtree belonging to the current agenda entry.
** org-agenda-kill-all-agenda-buffers
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-kill-all-agenda-buffers
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-kill-all-agenda-buffers&sr=1][Find modifications in git logs]]

: Kill all buffers in ‘org-agenda-mode’.
: This is used when toggling sticky agendas.
** org-agenda-bulk-action =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-action
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-action&sr=1][Find modifications in git logs]]

: Execute an remote-editing action on all marked entries.
: The prefix arg is passed through to the command if possible.
** org-resolve-clocks =(&optional only-dangling-p prompt-fn last-valid)=
   :PROPERTIES:
   :CUSTOM_ID: org-resolve-clocks
   :END:

- *Access:* ~C-c C-x C-z~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-resolve-clocks&sr=1][Find modifications in git logs]]

: Resolve all currently open Org clocks.
: If ‘only-dangling-p’ is non-nil, only ask to resolve dangling
: (i.e., not currently open and valid) clocks.
** org-babel-lilypond-toggle-midi-play
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-toggle-midi-play
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-toggle-midi-play&sr=1][Find modifications in git logs]]

: Toggle whether midi will be played following a successful compilation.
** org-move-subtree-up =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-move-subtree-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-move-subtree-up&sr=1][Find modifications in git logs]]

: Move the current subtree up past ARG headlines of the same level.
** org-reveal =(&optional siblings)=
   :PROPERTIES:
   :CUSTOM_ID: org-reveal
   :END:

- *Access:* ~C-c C-r, <menu-bar> <Org> <Show/Hide> <Reveal Context>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-reveal&sr=1][Find modifications in git logs]]

: Show current entry, hierarchy above it, and the following headline.
: 
: This can be used to show a consistent set of context around
: locations exposed with ‘org-show-context’.
: 
: With optional argument SIBLINGS, on each level of the hierarchy all
: siblings are shown.  This repairs the tree structure to what it would
: look like when opened with hierarchical calls to ‘org-cycle’.
: 
: With a C-u C-u prefix, go to the parent and show the entire tree.
** org-export-dispatch =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-export-dispatch
   :END:

- *Access:* ~C-c C-e, <menu-bar> <Org> <Export/Publish...>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-dispatch&sr=1][Find modifications in git logs]]

: Export dispatcher for Org mode.
: 
: It provides an access to common export related tasks in a buffer.
: Its interface comes in two flavors: standard and expert.
: 
: While both share the same set of bindings, only the former
: displays the valid keys associations in a dedicated buffer.
: Scrolling (resp. line-wise motion) in this buffer is done with
: SPC and DEL (resp. C-n and C-p) keys.
: 
: Set variable ‘org-export-dispatch-use-expert-ui’ to switch to one
: flavor or the other.
: 
: When ARG is ‘C-u’, repeat the last export action, with the same
: set of options used back then, on the current buffer.
: 
: When ARG is ‘C-u C-u’, display the asynchronous export stack.
** org-table-overlay-coordinates
   :PROPERTIES:
   :CUSTOM_ID: org-table-overlay-coordinates
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-overlay-coordinates&sr=1][Find modifications in git logs]]

: Add overlays to the table at point, to show row/column coordinates.
** org-lint--jump-to-source
   :PROPERTIES:
   :CUSTOM_ID: org-lint--jump-to-source
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-lint.el;hb=HEAD][org-lint.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lint--jump-to-source&sr=1][Find modifications in git logs]]

: Move to source line that generated the report at point.
** org-columns-next-allowed-value =(&optional previous nth)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-next-allowed-value
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-next-allowed-value&sr=1][Find modifications in git logs]]

: Switch to the next allowed value for this column.
: When PREVIOUS is set, go to the previous value.  When NTH is
: an integer, select that value.
** org-smart-reschedule =(quality)=
   :PROPERTIES:
   :CUSTOM_ID: org-smart-reschedule
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-learn.el;hb=HEAD][org-learn.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-smart-reschedule&sr=1][Find modifications in git logs]]


** org-table-end-of-field =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-end-of-field
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-end-of-field&sr=1][Find modifications in git logs]]

: Move to the end of the current table field.
: If already at or after the end, move to the end of the next table field.
: With numeric argument N, move N-1 fields forward first.
** org-agenda-recenter =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-recenter
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-recenter&sr=1][Find modifications in git logs]]

: Display the Org file which contains the item at point and recenter.
** org-attach-delete-all =(&optional force)=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-delete-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-delete-all&sr=1][Find modifications in git logs]]

: Delete all attachments from the current task.
: This actually deletes the entire attachment directory.
: A safer way is to open the directory in dired and delete from there.
** org-toggle-inline-images =(&optional include-linked)=
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-inline-images
   :END:

- *Access:* ~C-c C-x C-v~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-inline-images&sr=1][Find modifications in git logs]]

: Toggle the display of inline images.
: INCLUDE-LINKED is passed to ‘org-display-inline-images’.
** org-columns-insert-dblock
   :PROPERTIES:
   :CUSTOM_ID: org-columns-insert-dblock
   :END:

- *Access:* ~C-c C-x i, <menu-bar> <Org> <TAGS and Properties> <Insert Column View DBlock>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-insert-dblock&sr=1][Find modifications in git logs]]

: Create a dynamic block capturing a column view table.
** org-feed-goto-inbox =(feed)=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-goto-inbox
   :END:

- *Access:* ~C-c C-x G, <menu-bar> <Org> <TODO Lists> <Go to the inbox of a feed...>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-goto-inbox&sr=1][Find modifications in git logs]]

: Go to the inbox that captures the feed named FEED.
** org-decrease-number-at-point =(&optional inc)=
   :PROPERTIES:
   :CUSTOM_ID: org-decrease-number-at-point
   :END:

- *Access:* ~<C-M-S-left>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-decrease-number-at-point&sr=1][Find modifications in git logs]]

: Decrement the number at point.
: With an optional prefix numeric argument INC, decrement using
: this numeric value.
** org-edit-src-abort
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-abort
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-abort&sr=1][Find modifications in git logs]]

: Abort editing of the src code and return to the Org buffer.
** org-id-store-link
   :PROPERTIES:
   :CUSTOM_ID: org-id-store-link
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-store-link&sr=1][Find modifications in git logs]]

: Store a link to the current entry, using its ID.
** org-tags-sparse-tree =(&optional todo-only match)=
   :PROPERTIES:
   :CUSTOM_ID: org-tags-sparse-tree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tags-sparse-tree&sr=1][Find modifications in git logs]]

: Create a sparse tree according to tags string MATCH.
: 
: MATCH is a string with match syntax.  It can contain a selection
: of tags ("+work+urgent-boss"), properties ("LEVEL>3"), and
: TODO keywords ("TODO=\"WAITING\"") or a combination of
: those.  See the manual for details.
: 
: If optional argument TODO-ONLY is non-nil, only select lines that
: are also TODO tasks.
** org-agenda-bulk-toggle
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-toggle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-toggle&sr=1][Find modifications in git logs]]

: Toggle the mark at point for bulk action.
** org-ctrl-c-ret
   :PROPERTIES:
   :CUSTOM_ID: org-ctrl-c-ret
   :END:

- *Access:* ~C-c RET~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctrl-c-ret&sr=1][Find modifications in git logs]]

: Call ‘org-table-hline-and-move’ or ‘org-insert-heading’ dep. on context.
** org-agenda-date-earlier-minutes =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-date-earlier-minutes
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-date-earlier-minutes&sr=1][Find modifications in git logs]]

: Change the time of this item, in units of ‘org-time-stamp-rounding-minutes’.
** org-agenda-bulk-mark-all
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-mark-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-mark-all&sr=1][Find modifications in git logs]]

: Mark all entries for future agenda bulk action.
** org-cancel-repeater
   :PROPERTIES:
   :CUSTOM_ID: org-cancel-repeater
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cancel-repeater&sr=1][Find modifications in git logs]]

: Cancel a repeater by setting its numeric value to zero.
** org-babel-lilypond-toggle-arrange-mode
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-toggle-arrange-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-toggle-arrange-mode&sr=1][Find modifications in git logs]]

: Toggle whether in Arrange mode or Basic mode.
** org-footnote-goto-definition =(label &optional location)=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-goto-definition
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-goto-definition&sr=1][Find modifications in git logs]]

: Move point to the definition of the footnote LABEL.
: 
: LOCATION, when non-nil specifies the buffer position of the
: definition.
: 
: Throw an error if there is no definition or if it cannot be
: reached from current narrowed part of buffer.  Return a non-nil
: value if point was successfully moved.
** org-agenda-filter-by-regexp =(strip)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-filter-by-regexp
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-filter-by-regexp&sr=1][Find modifications in git logs]]

: Filter agenda entries by a regular expression.
: Regexp filters are cumulative.
: With no prefix argument, keep entries matching the regexp.
: With one prefix argument, filter out entries matching the regexp.
: With two prefix arguments, remove the regexp filters.
** org-agenda-fontify-priorities
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-fontify-priorities
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-fontify-priorities&sr=1][Find modifications in git logs]]

: Make highest priority lines bold, and lowest italic.
** org-shiftright =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftright
   :END:

- *Access:* ~<S-right>, <menu-bar> <Org> <TODO Lists> <Select keyword> <Next keyword>, <menu-bar> <Org> <Dates and Scheduling> <Change Date> <1 Day Later>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftright&sr=1][Find modifications in git logs]]

: Cycle the thing at point or in the current line, depending on context.
: Depending on context, this does one of the following:
: 
: - switch a timestamp at point one day into the future
: - on a headline, switch to the next TODO keyword.
: - on an item, switch entire list to the next bullet type
: - on a property line, switch to the next allowed value
: - on a clocktable definition line, move time block into the future
** org-agenda-refile =(&optional goto rfloc no-update)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-refile
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-refile&sr=1][Find modifications in git logs]]

: Refile the item at point.
: 
: When called with ‘C-u C-u’, go to the location of the last
: refiled item.
: 
: When called with ‘C-u C-u C-u’ prefix or when GOTO is 0, clear
: the refile cache.
: 
: RFLOC can be a refile location obtained in a different way.
: 
: When NO-UPDATE is non-nil, don’t redo the agenda buffer.
** org-caldav-sync
   :PROPERTIES:
   :CUSTOM_ID: org-caldav-sync
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-caldav.el;hb=HEAD][org-caldav.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-caldav-sync&sr=1][Find modifications in git logs]]

: Sync Org with calendar.
** org-shiftmetaleft
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetaleft
   :END:

- *Access:* ~<M-S-left>, <menu-bar> <Org> <Edit Structure> <Promote Subtree>, <menu-bar> <Tbl> <Column> <Delete Column>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetaleft&sr=1][Find modifications in git logs]]

: Promote subtree or delete table column.
: Calls ‘org-promote-subtree’, ‘org-outdent-item-tree’, or
: ‘org-table-delete-column’, depending on context.  See the
: individual commands for more information.
** org-habit-toggle-habits
   :PROPERTIES:
   :CUSTOM_ID: org-habit-toggle-habits
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-toggle-habits&sr=1][Find modifications in git logs]]

: Toggle display of habits in an agenda buffer.
** org-columns-move-left
   :PROPERTIES:
   :CUSTOM_ID: org-columns-move-left
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-move-left&sr=1][Find modifications in git logs]]

: Swap this column with the one to the left.
** org-bibtex-read-buffer =(buffer)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-read-buffer
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-read-buffer&sr=1][Find modifications in git logs]]

: Read all bibtex entries in BUFFER and save to ‘org-bibtex-entries’.
: Return the number of saved entries.
** org-agenda-show-scroll-down
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-scroll-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-scroll-down&sr=1][Find modifications in git logs]]

: Scroll down the window showing the agenda.
** org-clock-timestamps-up =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-timestamps-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-timestamps-up&sr=1][Find modifications in git logs]]

: Increase CLOCK timestamps at cursor.
: Optional argument N tells to change by that many units.
** org-w3m-copy-for-org-mode
   :PROPERTIES:
   :CUSTOM_ID: org-w3m-copy-for-org-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-w3m.el;hb=HEAD][org-w3m.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-w3m-copy-for-org-mode&sr=1][Find modifications in git logs]]

: Copy current buffer content or active region with ‘org-mode’ style links.
: This will encode ‘link-title’ and ‘link-location’ with
: ‘org-make-link-string’, and insert the transformed test into the kill ring,
: so that it can be yanked into an Org  buffer with links working correctly.
** org-next-visible-heading =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-next-visible-heading
   :END:

- *Access:* ~C-c C-n, <menu-bar> <Org> <Navigate Headings> <Next>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-next-visible-heading&sr=1][Find modifications in git logs]]

: Move to the next visible heading.
: 
: This function wraps ‘outline-next-visible-heading’ with
: ‘org-with-limited-levels’ in order to skip over inline tasks and
: respect customization of ‘org-odd-levels-only’.
** org-encrypt-entry
   :PROPERTIES:
   :CUSTOM_ID: org-encrypt-entry
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-crypt.el;hb=HEAD][org-crypt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-encrypt-entry&sr=1][Find modifications in git logs]]

: Encrypt the content of the current headline.
** org-columns-previous-allowed-value
   :PROPERTIES:
   :CUSTOM_ID: org-columns-previous-allowed-value
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-previous-allowed-value&sr=1][Find modifications in git logs]]

: Switch to the previous allowed value for this column.
** org-delete-directory =(directory &optional recursive trash)=
   :PROPERTIES:
   :CUSTOM_ID: org-delete-directory
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-delete-directory&sr=1][Find modifications in git logs]]

: Delete the directory named DIRECTORY.  Does not follow symlinks.
: If RECURSIVE is non-nil, delete files in DIRECTORY as well, with
: no error if something else is simultaneously deleting them.
: TRASH non-nil means to trash the directory instead, provided
: ‘delete-by-moving-to-trash’ is non-nil.
: 
: When called interactively, TRASH is nil if and only if a prefix
: argument is given, and a further prompt asks the user for
: RECURSIVE if DIRECTORY is nonempty.
: 
: (fn DIRECTORY &optional RECURSIVE TRASH)
** org-table-paste-rectangle
   :PROPERTIES:
   :CUSTOM_ID: org-table-paste-rectangle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-paste-rectangle&sr=1][Find modifications in git logs]]

: Paste a rectangular region into a table.
: The upper right corner ends up in the current field.  All involved fields
: will be overwritten.  If the rectangle does not fit into the present table,
: the table is enlarged as needed.  The process ignores horizontal separator
: lines.
** org-babel-exp-src-block
   :PROPERTIES:
   :CUSTOM_ID: org-babel-exp-src-block
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-exp.el;hb=HEAD][ob-exp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-exp-src-block&sr=1][Find modifications in git logs]]

: Process source block for export.
: Depending on the ":export" header argument, replace the source
: code block like this:
: 
: both ---- display the code and the results
: 
: code ---- the default, display the code inside the block but do
:           not process
: 
: results - just like none only the block is run on export ensuring
:           that its results are present in the Org mode buffer
: 
: none ---- do not display either code or results upon export
: 
: Assume point is at block opening line.
** org-indent-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-indent.el;hb=HEAD][org-indent.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-mode&sr=1][Find modifications in git logs]]

: When active, indent text according to outline structure.
: 
: Internally this works by adding ‘line-prefix’ and ‘wrap-prefix’
: properties, after each buffer modification, on the modified zone.
: 
: The process is synchronous.  Though, initial indentation of
: buffer, which can take a few seconds on large buffers, is done
: during idle time.
** org-cdlatex-underscore-caret =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-cdlatex-underscore-caret
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cdlatex-underscore-caret&sr=1][Find modifications in git logs]]

: Execute ‘cdlatex-sub-superscript’ in LaTeX fragments.
: Revert to the normal definition outside of these fragments.
** org-src-do-key-sequence-at-code-block =(&optional key)=
   :PROPERTIES:
   :CUSTOM_ID: org-src-do-key-sequence-at-code-block
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-do-key-sequence-at-code-block&sr=1][Find modifications in git logs]]

: Execute key sequence at code block in the source Org buffer.
: The command bound to KEY in the Org-babel key map is executed
: remotely with point temporarily at the start of the code block in
: the Org buffer.
: 
: This command is not bound to a key by default, to avoid conflicts
: with language major mode bindings.  To bind it to C-c @ in all
: language major modes, you could use
: 
:   (add-hook 'org-src-mode-hook
:             (lambda () (define-key org-src-mode-map "\C-c@"
:                     'org-src-do-key-sequence-at-code-block)))
: 
: In that case, for example, C-c @ t issued in code edit buffers
: would tangle the current Org code block, C-c @ e would execute
: the block and C-c @ h would display the other available
: Org-babel commands.
** org-texinfo-export-to-texinfo =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-export-to-texinfo
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-export-to-texinfo&sr=1][Find modifications in git logs]]

: Export current buffer to a Texinfo file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return output file’s name.
** org-indent-item
   :PROPERTIES:
   :CUSTOM_ID: org-indent-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-item&sr=1][Find modifications in git logs]]

: Indent a local list item, but not its children.
: If a region is active, all items inside will be moved.
** org-table-recalculate-buffer-tables
   :PROPERTIES:
   :CUSTOM_ID: org-table-recalculate-buffer-tables
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-recalculate-buffer-tables&sr=1][Find modifications in git logs]]

: Recalculate all tables in the current buffer.
** org-toggle-heading =(&optional nstars)=
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-heading
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-heading&sr=1][Find modifications in git logs]]

: Convert headings to normal text, or items or text to headings.
: If there is no active region, only convert the current line.
: 
: With a ‘C-u’ prefix, convert the whole list at
: point into heading.
: 
: In a region:
: 
: - If the first non blank line is a headline, remove the stars
:   from all headlines in the region.
: 
: - If it is a normal line, turn each and every normal line (i.e.,
:   not an heading or an item) in the region into headings.  If you
:   want to convert only the first line of this region, use one
:   universal prefix argument.
: 
: - If it is a plain list item, turn all plain list items into headings.
: 
: When converting a line into a heading, the number of stars is chosen
: such that the lines become children of the current entry.  However,
: when a numeric prefix argument is given, its value determines the
: number of stars to add.
** org-shiftmetadown =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftmetadown
   :END:

- *Access:* ~<M-S-down>, <menu-bar> <Tbl> <Row> <Insert Row>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftmetadown&sr=1][Find modifications in git logs]]

: Drag the line at point down.
: In a table, insert an empty row at the current line.
: On a clock timestamp, update the value of the timestamp like ‘S-<down>’
: but also adjust the previous clocked item in the clock history.
: Everywhere else, drag the line at point down.
** org-content =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-content
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-content&sr=1][Find modifications in git logs]]

: Show all headlines in the buffer, like a table of contents.
: With numerical argument N, show content up to level N.
** org-outdent-item
   :PROPERTIES:
   :CUSTOM_ID: org-outdent-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-outdent-item&sr=1][Find modifications in git logs]]

: Outdent a local list item, but not its children.
: If a region is active, all items inside will be moved.
** org-latex-convert-region-to-latex
   :PROPERTIES:
   :CUSTOM_ID: org-latex-convert-region-to-latex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-convert-region-to-latex&sr=1][Find modifications in git logs]]

: Assume the current region has Org syntax, and convert it to LaTeX.
: This can be used in any buffer.  For example, you can write an
: itemized list in Org syntax in an LaTeX buffer and use this
: command to convert it.
** org-bibtex-yank
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-yank
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-yank&sr=1][Find modifications in git logs]]

: If kill ring holds a bibtex entry yank it as an Org headline.
** org-columns-move-right
   :PROPERTIES:
   :CUSTOM_ID: org-columns-move-right
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-move-right&sr=1][Find modifications in git logs]]

: Swap this column with the one to the right.
** org-latex-export-as-latex =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-export-as-latex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-export-as-latex&sr=1][Find modifications in git logs]]

: Export current buffer as a LaTeX buffer.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Export is done in a buffer named "*Org LATEX Export*", which
: will be displayed when ‘org-export-show-temporary-export-buffer’
: is non-nil.
** org-agenda-write =(file &optional open nosettings agenda-bufname)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-write
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-write&sr=1][Find modifications in git logs]]

: Write the current buffer (an agenda view) as a file.
: 
: Depending on the extension of the file name, plain text (.txt),
: HTML (.html or .htm), PDF (.pdf) or Postscript (.ps) is produced.
: If the extension is .ics, translate visible agenda into iCalendar
: format.  If the extension is .org, collect all subtrees
: corresponding to the agenda entries and add them in an .org file.
: 
: With prefix argument OPEN, open the new file immediately.  If
: NOSETTINGS is given, do not scope the settings of
: ‘org-agenda-exporter-settings’ into the export commands.  This is
: used when the settings have already been scoped and we do not
: wish to overrule other, higher priority settings.  If
: AGENDA-BUFFER-NAME is provided, use this as the buffer name for
: the agenda to write.
** org-move-item-down
   :PROPERTIES:
   :CUSTOM_ID: org-move-item-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-move-item-down&sr=1][Find modifications in git logs]]

: Move the item at point down, i.e. swap with following item.
: Sub-items (items with larger indentation) are considered part of
: the item, so this really moves item trees.
** org-bibtex-write
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-write
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-write&sr=1][Find modifications in git logs]]

: Insert a heading built from the first element of ‘org-bibtex-entries’.
** org-cut-special
   :PROPERTIES:
   :CUSTOM_ID: org-cut-special
   :END:

- *Access:* ~C-c C-x C-w, <menu-bar> <Org> <Edit Structure> <Cut Subtree>, <menu-bar> <Tbl> <Rectangle> <Cut Rectangle>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cut-special&sr=1][Find modifications in git logs]]

: Cut region in table or cut current subtree.
: Calls ‘org-table-cut-region’ or ‘org-cut-subtree’, depending on
: context.  See the individual commands for more information.
** org-occur-link-in-agenda-files
   :PROPERTIES:
   :CUSTOM_ID: org-occur-link-in-agenda-files
   :END:

- *Access:* ~<menu-bar> <Org> <Hyperlinks> <Find existing link to here>, C-c L~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-occur-link-in-agenda-files&sr=1][Find modifications in git logs]]

: Create a link and search for it in the agendas.
: The link is not stored in ‘org-stored-links’, it is just created
: for the search purpose.
** org-update-dblock
   :PROPERTIES:
   :CUSTOM_ID: org-update-dblock
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-update-dblock&sr=1][Find modifications in git logs]]

: Update the dynamic block at point.
: This means to empty the block, parse for parameters and then call
: the correct writing function.
** org-odt-export-to-odt =(&optional async subtreep visible-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-export-to-odt
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-export-to-odt&sr=1][Find modifications in git logs]]

: Export current buffer to a ODT file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return output file’s name.
** org-table-fedit-line-down
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-line-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-line-down&sr=1][Find modifications in git logs]]

: Move cursor one line down in the window showing the table.
** org-calendar-select
   :PROPERTIES:
   :CUSTOM_ID: org-calendar-select
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-calendar-select&sr=1][Find modifications in git logs]]

: Return to ‘org-read-date’ with the date currently selected.
: This is used by ‘org-read-date’ in a temporary keymap for the calendar buffer.
** org-bibtex-export-to-kill-ring
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-export-to-kill-ring
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-export-to-kill-ring&sr=1][Find modifications in git logs]]

: Export current headline to kill ring as bibtex entry.
** org-beamer-export-to-latex =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-export-to-latex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-export-to-latex&sr=1][Find modifications in git logs]]

: Export current buffer as a Beamer presentation (tex).
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return output file’s name.
** org-search-view =(&optional todo-only string edit-at)=
   :PROPERTIES:
   :CUSTOM_ID: org-search-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-search-view&sr=1][Find modifications in git logs]]

: Show all entries that contain a phrase or words or regular expressions.
: 
: With optional prefix argument TODO-ONLY, only consider entries that are
: TODO entries.  The argument STRING can be used to pass a default search
: string into this function.  If EDIT-AT is non-nil, it means that the
: user should get a chance to edit this string, with cursor at position
: EDIT-AT.
: 
: The search string can be viewed either as a phrase that should be found as
: is, or it can be broken into a number of snippets, each of which must match
: in a Boolean way to select an entry.  The default depends on the variable
: ‘org-agenda-search-view-always-boolean’.
: Even if this is turned off (the default) you can always switch to
: Boolean search dynamically by preceding the first word with  "+" or "-".
: 
: The default is a direct search of the whole phrase, where each space in
: the search string can expand to an arbitrary amount of whitespace,
: including newlines.
: 
: If using a Boolean search, the search string is split on whitespace and
: each snippet is searched separately, with logical AND to select an entry.
: Words prefixed with a minus must *not* occur in the entry.  Words without
: a prefix or prefixed with a plus must occur in the entry.  Matching is
: case-insensitive.  Words are enclosed by word delimiters (i.e. they must
: match whole words, not parts of a word) if
: ‘org-agenda-search-view-force-full-words’ is set (default is nil).
: 
: Boolean search snippets enclosed by curly braces are interpreted as
: regular expressions that must or (when preceded with "-") must not
: match in the entry.  Snippets enclosed into double quotes will be taken
: as a whole, to include whitespace.
: 
: - If the search string starts with an asterisk, search only in headlines.
: - If (possibly after the leading star) the search string starts with an
:   exclamation mark, this also means to look at TODO entries only, an effect
:   that can also be achieved with a prefix argument.
: - If (possibly after star and exclamation mark) the search string starts
:   with a colon, this will mean that the (non-regexp) snippets of the
:   Boolean search must match as full words.
: 
: This command searches the agenda files, and in addition the files listed
: in ‘org-agenda-text-search-extra-files’.
** org-table-goto-column =(n &optional on-delim force)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-goto-column
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-goto-column&sr=1][Find modifications in git logs]]

: Move the cursor to the Nth column in the current table line.
: With optional argument ON-DELIM, stop with point before the left delimiter
: of the field.
: If there are less than N fields, just go to after the last delimiter.
: However, when FORCE is non-nil, create new columns if necessary.
** org-evaluate-time-range =(&optional to-buffer)=
   :PROPERTIES:
   :CUSTOM_ID: org-evaluate-time-range
   :END:

- *Access:* ~C-c C-y, <menu-bar> <Org> <Dates and Scheduling> <Compute Time Range>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-evaluate-time-range&sr=1][Find modifications in git logs]]

: Evaluate a time range by computing the difference between start and end.
: Normally the result is just printed in the echo area, but with prefix arg
: TO-BUFFER, the result is inserted just after the date stamp into the buffer.
: If the time range is actually in a table, the result is inserted into the
: next column.
: For time difference computation, a year is assumed to be exactly 365
: days in order to avoid rounding problems.
** org-shiftcontrolup =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftcontrolup
   :END:

- *Access:* ~<C-S-up>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftcontrolup&sr=1][Find modifications in git logs]]

: Change timestamps synchronously up in CLOCK log lines.
: Optional argument N tells to change by that many units.
** org-copy
   :PROPERTIES:
   :CUSTOM_ID: org-copy
   :END:

- *Access:* ~C-c M-w~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-copy&sr=1][Find modifications in git logs]]

: Like ‘org-refile’, but copy.
** org-agenda-manipulate-query-subtract-re
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-manipulate-query-subtract-re
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-manipulate-query-subtract-re&sr=1][Find modifications in git logs]]

: Manipulate the query by adding a search regexp with negative selection.
: Negative selection means regexp must not match for selection of an entry.
** org-babel-goto-named-result =(name)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-goto-named-result
   :END:

- *Access:* ~C-c C-v C-r, C-c C-v r~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-goto-named-result&sr=1][Find modifications in git logs]]

: Go to a named result.
** org-check-deadlines =(ndays)=
   :PROPERTIES:
   :CUSTOM_ID: org-check-deadlines
   :END:

- *Access:* ~<menu-bar> <Org> <Special views current file> <Check Deadlines>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-check-deadlines&sr=1][Find modifications in git logs]]

: Check if there are any deadlines due or past due.
: A deadline is considered due if it happens within ‘org-deadline-warning-days’
: days from today’s date.  If the deadline appears in an entry marked DONE,
: it is not shown.  A numeric prefix argument NDAYS can be used to test that
: many days.  If the prefix is a raw ‘C-u’, all deadlines are shown.
** org-advertized-archive-subtree =(&optional find-done)=
   :PROPERTIES:
   :CUSTOM_ID: org-advertized-archive-subtree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-advertized-archive-subtree&sr=1][Find modifications in git logs]]

: Move the current subtree to the archive.
: The archive can be a certain top-level heading in the current
: file, or in a different file.  The tree will be moved to that
: location, the subtree heading be marked DONE, and the current
: time will be added.
: 
: When called with a single prefix argument FIND-DONE, find whole
: trees without any open TODO items and archive them (after getting
: confirmation from the user).  When called with a double prefix
: argument, find whole trees with timestamps before today and
: archive them (after getting confirmation from the user).  If the
: cursor is not at a headline when these commands are called, try
: all level 1 trees.  If the cursor is on a headline, only try the
: direct children of this heading.
** org-texinfo-export-to-info =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-export-to-info
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-export-to-info&sr=1][Find modifications in git logs]]

: Export current buffer to Texinfo then process through to INFO.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: When optional argument PUB-DIR is set, use it as the publishing
: directory.
: 
: Return INFO file’s name.
** org-drag-element-forward
   :PROPERTIES:
   :CUSTOM_ID: org-drag-element-forward
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-drag-element-forward&sr=1][Find modifications in git logs]]

: Move forward element at point.
** org-mouse-insert-checkbox
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-insert-checkbox
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-insert-checkbox&sr=1][Find modifications in git logs]]


** org-cycle-level
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-level
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-level&sr=1][Find modifications in git logs]]

: Cycle the level of an empty headline through possible states.
: This goes first to child, then to parent, level, then up the hierarchy.
: After top level, it switches back to sibling level.
** org-table-move-row-up
   :PROPERTIES:
   :CUSTOM_ID: org-table-move-row-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-move-row-up&sr=1][Find modifications in git logs]]

: Move table row up.
** org-mouse-show-context-menu =(event prefix)=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-show-context-menu
   :END:

- *Access:* ~<mouse-3>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-show-context-menu&sr=1][Find modifications in git logs]]

: Invoke the context menu.
: 
: If the value of ‘org-mouse-context-menu-function’ is a function, then
: this function is called.  Otherwise, the current major mode menu is used.
** org-org-export-to-org =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-org-export-to-org
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-org.el;hb=HEAD][ox-org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-org-export-to-org&sr=1][Find modifications in git logs]]

: Export current buffer to an org file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, strip document
: keywords from output.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return output file name.
** org-delete-indentation =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-delete-indentation
   :END:

- *Access:* ~M-^~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-delete-indentation&sr=1][Find modifications in git logs]]

: Join current line to previous and fix whitespace at join.
: 
: If previous line is a headline add to headline title.  Otherwise
: the function calls ‘delete-indentation’.
: 
: With a non-nil optional argument, join it to the following one.
** org-table-maybe-recalculate-line
   :PROPERTIES:
   :CUSTOM_ID: org-table-maybe-recalculate-line
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-maybe-recalculate-line&sr=1][Find modifications in git logs]]

: Recompute the current line if marked for it, and if we haven’t just done it.
** org-bibtex-check-all =(&optional optional)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-check-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-check-all&sr=1][Find modifications in git logs]]

: Check all headlines in the current file.
: With prefix argument OPTIONAL also prompt for optional fields.
** org-columns-compute =(property)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-compute
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-compute&sr=1][Find modifications in git logs]]

: Summarize the values of PROPERTY hierarchically.
: Also update existing values for PROPERTY according to the first
: column specification.
** org-caldav-goto-uid
   :PROPERTIES:
   :CUSTOM_ID: org-caldav-goto-uid
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-caldav.el;hb=HEAD][org-caldav.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-caldav-goto-uid&sr=1][Find modifications in git logs]]

: Jump to UID unter point.
** org-babel-demarcate-block =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-demarcate-block
   :END:

- *Access:* ~C-c C-v d, C-c C-v C-d~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-demarcate-block&sr=1][Find modifications in git logs]]

: Wrap or split the code in the region or on the point.
: When called from inside of a code block the current block is
: split.  When called from outside of a code block a new code block
: is created.  In both cases if the region is demarcated and if the
: region is not active then the point is demarcated.
** org-insert-todo-heading =(arg &optional force-heading)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-todo-heading
   :END:

- *Access:* ~<M-S-return>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-todo-heading&sr=1][Find modifications in git logs]]

: Insert a new heading with the same level and TODO state as current heading.
: 
: If the heading has no TODO state, or if the state is DONE, use
: the first state (TODO by default).  Also with one prefix arg,
: force first state.  With two prefix args, force inserting at the
: end of the parent subtree.
: 
: When called at a plain list item, insert a new item with an
: unchecked check box.
** org-sort-entries =(&optional with-case sorting-type getkey-func compare-func property interactive?)=
   :PROPERTIES:
   :CUSTOM_ID: org-sort-entries
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sort-entries&sr=1][Find modifications in git logs]]

: Sort entries on a certain level of an outline tree.
: If there is an active region, the entries in the region are sorted.
: Else, if the cursor is before the first entry, sort the top-level items.
: Else, the children of the entry at point are sorted.
: 
: Sorting can be alphabetically, numerically, by date/time as given by
: a time stamp, by a property, by priority order, or by a custom function.
: 
: The command prompts for the sorting type unless it has been given to the
: function through the SORTING-TYPE argument, which needs to be a character,
: (?n ?N ?a ?A ?t ?T ?s ?S ?d ?D ?p ?P ?o ?O ?r ?R ?f ?F ?k ?K).  Here is
: the precise meaning of each character:
: 
: a   Alphabetically, ignoring the TODO keyword and the priority, if any.
: c   By creation time, which is assumed to be the first inactive time stamp
:     at the beginning of a line.
: d   By deadline date/time.
: k   By clocking time.
: n   Numerically, by converting the beginning of the entry/item to a number.
: o   By order of TODO keywords.
: p   By priority according to the cookie.
: r   By the value of a property.
: s   By scheduled date/time.
: t   By date/time, either the first active time stamp in the entry, or, if
:     none exist, by the first inactive one.
: 
: Capital letters will reverse the sort order.
: 
: If the SORTING-TYPE is ?f or ?F, then GETKEY-FUNC specifies a function to be
: called with point at the beginning of the record.  It must return a
: value that is compatible with COMPARE-FUNC, the function used to
: compare entries.
: 
: Comparing entries ignores case by default.  However, with an optional argument
: WITH-CASE, the sorting considers case as well.
: 
: Sorting is done against the visible part of the headlines, it ignores hidden
: links.
: 
: When sorting is done, call ‘org-after-sorting-entries-or-items-hook’.
: 
: A non-nil value for INTERACTIVE? is used to signal that this
: function is being called interactively.
** orgtbl-self-insert-command =(N)=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-self-insert-command
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-self-insert-command&sr=1][Find modifications in git logs]]

: Like ‘self-insert-command’, use overwrite-mode for whitespace in tables.
: If the cursor is in a table looking at whitespace, the whitespace is
: overwritten, and the table is not marked as requiring realignment.
** org-table-sort-lines =(&optional with-case sorting-type getkey-func compare-func interactive?)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-sort-lines
   :END:

- *Access:* ~<menu-bar> <Tbl> <Row> <Sort lines in region>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-sort-lines&sr=1][Find modifications in git logs]]

: Sort table lines according to the column at point.
: 
: The position of point indicates the column to be used for
: sorting, and the range of lines is the range between the nearest
: horizontal separator lines, or the entire table of no such lines
: exist.  If point is before the first column, you will be prompted
: for the sorting column.  If there is an active region, the mark
: specifies the first line and the sorting column, while point
: should be in the last line to be included into the sorting.
: 
: The command then prompts for the sorting type which can be
: alphabetically, numerically, or by time (as given in a time stamp
: in the field, or as a HH:MM value).  Sorting in reverse order is
: also possible.
: 
: With prefix argument WITH-CASE, alphabetic sorting will be case-sensitive.
: 
: If SORTING-TYPE is specified when this function is called from a Lisp
: program, no prompting will take place.  SORTING-TYPE must be a character,
: any of (?a ?A ?n ?N ?t ?T ?f ?F) where the capital letters indicate that
: sorting should be done in reverse order.
: 
: If the SORTING-TYPE is ?f or ?F, then GETKEY-FUNC specifies
: a function to be called to extract the key.  It must return a value
: that is compatible with COMPARE-FUNC, the function used to compare
: entries.
: 
: A non-nil value for INTERACTIVE? is used to signal that this
: function is being called interactively.
** org-agenda-clock-goto
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-clock-goto
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-clock-goto&sr=1][Find modifications in git logs]]

: Jump to the currently clocked in task within the agenda.
: If the currently clocked in task is not listed in the agenda
: buffer, display it in another window.
** org-agenda-backward-block
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-backward-block
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-backward-block&sr=1][Find modifications in git logs]]

: Move backward by one agenda block.
** org-priority-down
   :PROPERTIES:
   :CUSTOM_ID: org-priority-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-priority-down&sr=1][Find modifications in git logs]]

: Decrease the priority of the current item.
** org-agenda-list =(&optional arg start-day span with-hour)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-list
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-list&sr=1][Find modifications in git logs]]

: Produce a daily/weekly view from all files in variable ‘org-agenda-files’.
: The view will be for the current day or week, but from the overview buffer
: you will be able to go to other days/weeks.
: 
: With a numeric prefix argument in an interactive call, the agenda will
: span ARG days.  Lisp programs should instead specify SPAN to change
: the number of days.  SPAN defaults to ‘org-agenda-span’.
: 
: START-DAY defaults to TODAY, or to the most recent match for the weekday
: given in ‘org-agenda-start-on-weekday’.
: 
: When WITH-HOUR is non-nil, only include scheduled and deadline
: items if they have an hour specification like [h]h:mm.
** org-rss-export-to-rss =(&optional async subtreep visible-only)=
   :PROPERTIES:
   :CUSTOM_ID: org-rss-export-to-rss
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-rss.el;hb=HEAD][ox-rss.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-rss-export-to-rss&sr=1][Find modifications in git logs]]

: Export current buffer to a RSS file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: Return output file’s name.
** org-agenda-archive-to-archive-sibling
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-archive-to-archive-sibling
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-archive-to-archive-sibling&sr=1][Find modifications in git logs]]

: Move the entry to the archive sibling.
** org-icalendar-export-agenda-files =(&optional async)=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-export-agenda-files
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-export-agenda-files&sr=1][Find modifications in git logs]]

: Export all agenda files to iCalendar files.
: When optional argument ASYNC is non-nil, export happens in an
: external process.
** org-toggle-pretty-entities
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-pretty-entities
   :END:

- *Access:* ~C-c C-x \~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-pretty-entities&sr=1][Find modifications in git logs]]

: Toggle the composition display of entities as UTF8 characters.
** org-set-tags =(&optional arg just-align)=
   :PROPERTIES:
   :CUSTOM_ID: org-set-tags
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-set-tags&sr=1][Find modifications in git logs]]

: Set the tags for the current headline.
: With prefix ARG, realign all tags in headings in the current buffer.
: When JUST-ALIGN is non-nil, only align tags.
** org-babel-sha1-hash =(&optional info)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-sha1-hash
   :END:

- *Access:* ~C-c C-v a, C-c C-v C-a~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-sha1-hash&sr=1][Find modifications in git logs]]

: Generate an sha1 hash based on the value of info.
** org-edit-src-continue =(e)=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-continue
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-continue&sr=1][Find modifications in git logs]]

: Unconditionally return to buffer editing area under point.
: Throw an error if there is no such buffer.
** org-edit-footnote-reference
   :PROPERTIES:
   :CUSTOM_ID: org-edit-footnote-reference
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-footnote-reference&sr=1][Find modifications in git logs]]

: Edit definition of footnote reference at point.
** org-shiftcontrolleft
   :PROPERTIES:
   :CUSTOM_ID: org-shiftcontrolleft
   :END:

- *Access:* ~<C-S-left>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftcontrolleft&sr=1][Find modifications in git logs]]

: Switch to previous TODO set.
** org-delete-char =(N)=
   :PROPERTIES:
   :CUSTOM_ID: org-delete-char
   :END:

- *Access:* ~C-d~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-delete-char&sr=1][Find modifications in git logs]]

: Like ‘delete-char’, but insert whitespace at field end in tables.
: When deleting characters, in tables this function will insert whitespace in
: front of the next "|" separator, to keep the table aligned.  The table will
: still be marked for re-alignment if the field did fill the entire column,
: because, in this case the deletion might narrow the column.
** org-babel-lilypond-toggle-png-generation
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-toggle-png-generation
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-toggle-png-generation&sr=1][Find modifications in git logs]]

: Toggle whether png image will be generated by compilation.
** org-mark-element
   :PROPERTIES:
   :CUSTOM_ID: org-mark-element
   :END:

- *Access:* ~M-h~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mark-element&sr=1][Find modifications in git logs]]

: Put point at beginning of this element, mark at end.
: 
: Interactively, if this command is repeated or (in Transient Mark
: mode) if the mark is active, it marks the next element after the
: ones already marked.
** org-attach-attach =(file &optional visit-dir method)=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-attach
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-attach&sr=1][Find modifications in git logs]]

: Move/copy/link FILE into the attachment directory of the current task.
: If VISIT-DIR is non-nil, visit the directory with dired.
: METHOD may be ‘cp’, ‘mv’, ‘ln’, ‘lns’ or ‘url’ default taken from
: ‘org-attach-method’.
** org-table-wrap-region =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-wrap-region
   :END:

- *Access:* ~<menu-bar> <Tbl> <Rectangle> <Fill Rectangle>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-wrap-region&sr=1][Find modifications in git logs]]

: Wrap several fields in a column like a paragraph.
: This is useful if you’d like to spread the contents of a field over several
: lines, in order to keep the table compact.
: 
: If there is an active region, and both point and mark are in the same column,
: the text in the column is wrapped to minimum width for the given number of
: lines.  Generally, this makes the table more compact.  A prefix ARG may be
: used to change the number of desired lines.  For example, ‘C-2 M-x org-table-wrap-region’
: formats the selected text to two lines.  If the region was longer than two
: lines, the remaining lines remain empty.  A negative prefix argument reduces
: the current number of lines by that amount.  The wrapped text is pasted back
: into the table.  If you formatted it to more lines than it was before, fields
: further down in the table get overwritten - so you might need to make space in
: the table first.
: 
: If there is no region, the current field is split at the cursor position and
: the text fragment to the right of the cursor is prepended to the field one
: line down.
: 
: If there is no region, but you specify a prefix ARG, the current field gets
: blank, and the content is appended to the field above.
** org-demote-subtree
   :PROPERTIES:
   :CUSTOM_ID: org-demote-subtree
   :END:

- *Access:* ~C-c C->~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-demote-subtree&sr=1][Find modifications in git logs]]

: Demote the entire subtree.
: See ‘org-demote’ and ‘org-promote’.
** org-columns-menu =(event)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-menu
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-menu&sr=1][Find modifications in git logs]]

: Org Column Menu
** org-table-move-column =(&optional left)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-move-column
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-move-column&sr=1][Find modifications in git logs]]

: Move the current column to the right.  With arg LEFT, move to the left.
** org-insert-heading =(&optional arg invisible-ok top)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-heading
   :END:

- *Access:* ~<menu-bar> <Org> <New Heading>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-heading&sr=1][Find modifications in git logs]]

: Insert a new heading or an item with the same depth at point.
: 
: If point is at the beginning of a heading, insert a new heading
: or a new headline above the current one.  When at the beginning
: of a regular line of text, turn it into a heading.
: 
: If point is in the middle of a line, split it and create a new
: headline with the text in the current line after point (see
: ‘org-M-RET-may-split-line’ on how to modify this behavior).  As
: a special case, on a headline, splitting can only happen on the
: title itself.  E.g., this excludes breaking stars or tags.
: 
: With a ‘C-u’ prefix, set ‘org-insert-heading-respect-content’ to
: a non-nil value for the duration of the command.  This forces the
: insertion of a heading after the current subtree, independently
: on the location of point.
: 
: With a ‘C-u C-u’ prefix, insert the heading at the end of the tree
: above the current heading.  For example, if point is within a
: 2nd-level heading, then it will insert a 2nd-level heading at
: the end of the 1st-level parent subtree.
: 
: When INVISIBLE-OK is set, stop at invisible headlines when going
: back.  This is important for non-interactive uses of the
: command.
: 
: When optional argument TOP is non-nil, insert a level 1 heading,
: unconditionally.
** org-shiftcontroldown =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftcontroldown
   :END:

- *Access:* ~<C-S-down>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftcontroldown&sr=1][Find modifications in git logs]]

: Change timestamps synchronously down in CLOCK log lines.
: Optional argument N tells to change by that many units.
** org-agenda-to-appt =(&optional refresh filter &rest args)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-to-appt
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-to-appt&sr=1][Find modifications in git logs]]

: Activate appointments found in ‘org-agenda-files’.
: 
: With a ‘C-u’ prefix, refresh the list of appointments.
: 
: If FILTER is t, interactively prompt the user for a regular
: expression, and filter out entries that don’t match it.
: 
: If FILTER is a string, use this string as a regular expression
: for filtering entries out.
: 
: If FILTER is a function, filter out entries against which
: calling the function returns nil.  This function takes one
: argument: an entry from ‘org-agenda-get-day-entries’.
: 
: FILTER can also be an alist with the car of each cell being
: either ‘headline’ or ‘category’.  For example:
: 
:   '((headline "IMPORTANT")
:     (category "Work"))
: 
: will only add headlines containing IMPORTANT or headlines
: belonging to the "Work" category.
: 
: ARGS are symbols indicating what kind of entries to consider.
: By default ‘org-agenda-to-appt’ will use :deadline*, :scheduled*
: (i.e., deadlines and scheduled items with a hh:mm specification)
: and :timestamp entries.  See the docstring of ‘org-diary’ for
: details and examples.
: 
: If an entry has a APPT_WARNTIME property, its value will be used
: to override ‘appt-message-warning-time’.
** org-plot/gnuplot =(&optional params)=
   :PROPERTIES:
   :CUSTOM_ID: org-plot/gnuplot
   :END:

- *Access:* ~C-c " g, <menu-bar> <Tbl> <Plot> <Gnuplot>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-plot.el;hb=HEAD][org-plot.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-plot/gnuplot&sr=1][Find modifications in git logs]]

: Plot table using gnuplot.  Gnuplot options can be specified with PARAMS.
: If not given options will be taken from the +PLOT
: line directly before or after the table.
** org-goto-calendar =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-goto-calendar
   :END:

- *Access:* ~C-c >, <menu-bar> <Org> <Dates and Scheduling> <Goto Calendar>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-calendar&sr=1][Find modifications in git logs]]

: Go to the Emacs calendar at the current date.
: If there is a time stamp in the current line, go to that date.
: A prefix ARG can be used to force the current date.
** org-footnote-goto-previous-reference =(label)=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-goto-previous-reference
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-goto-previous-reference&sr=1][Find modifications in git logs]]

: Find the first closest (to point) reference of footnote with label LABEL.
** org-table-export =(&optional file format)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-export
   :END:

- *Access:* ~<menu-bar> <Tbl> <Export to File>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-export&sr=1][Find modifications in git logs]]

: Export table to a file, with configurable format.
: Such a file can be imported into usual spreadsheet programs.
: 
: FILE can be the output file name.  If not given, it will be taken
: from a TABLE_EXPORT_FILE property in the current entry or higher
: up in the hierarchy, or the user will be prompted for a file
: name.  FORMAT can be an export format, of the same kind as it
: used when ‘orgtbl-mode’ sends a table in a different format.
: 
: The command suggests a format depending on TABLE_EXPORT_FORMAT,
: whether it is set locally or up in the hierarchy, then on the
: extension of the given file name, and finally on the variable
: ‘org-table-export-default-format’.
** org-global-cycle =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-global-cycle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-global-cycle&sr=1][Find modifications in git logs]]

: Cycle the global visibility.  For details see ‘org-cycle’.
: With ‘C-u’ prefix ARG, switch to startup visibility.
: With a numeric prefix, show all headlines up to that level.
** org-shiftleft =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftleft
   :END:

- *Access:* ~<S-left>, <menu-bar> <Org> <TODO Lists> <Select keyword> <Previous keyword>, <menu-bar> <Org> <Dates and Scheduling> <Change Date> <1 Day Earlier>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftleft&sr=1][Find modifications in git logs]]

: Cycle the thing at point or in the current line, depending on context.
: Depending on context, this does one of the following:
: 
: - switch a timestamp at point one day into the past
: - on a headline, switch to the previous TODO keyword.
: - on an item, switch entire list to the previous bullet type
: - on a property line, switch to the previous allowed value
: - on a clocktable definition line, move time block into the past
** org-time-stamp =(arg &optional inactive)=
   :PROPERTIES:
   :CUSTOM_ID: org-time-stamp
   :END:

- *Access:* ~C-c ., <menu-bar> <Org> <Dates and Scheduling> <Timestamp>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-time-stamp&sr=1][Find modifications in git logs]]

: Prompt for a date/time and insert a time stamp.
: 
: If the user specifies a time like HH:MM or if this command is
: called with at least one prefix argument, the time stamp contains
: the date and the time.  Otherwise, only the date is included.
: 
: All parts of a date not specified by the user are filled in from
: the timestamp at point, if any, or the current date/time
: otherwise.
: 
: If there is already a timestamp at the cursor, it is replaced.
: 
: With two universal prefix arguments, insert an active timestamp
: with the current time without prompting the user.
: 
: When called from lisp, the timestamp is inactive if INACTIVE is
: non-nil.
** org-ctags-create-tags =(&optional directory-name)=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-create-tags
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-create-tags&sr=1][Find modifications in git logs]]

: (Re)create tags file in the directory of the active buffer.
: The file will contain tag definitions for all the files in the
: directory and its subdirectories which are recognized by ctags.
: This will include files ending in ‘.org’ as well as most other
: source files (.C, .H, .EL, .LISP, etc).  All the resulting tags
: end up in one file, called TAGS, located in the directory.  This
: function may take several seconds to finish if the directory or
: its subdirectories contain large numbers of taggable files.
** org-columns--display-here-title
   :PROPERTIES:
   :CUSTOM_ID: org-columns--display-here-title
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns--display-here-title&sr=1][Find modifications in git logs]]

: Overlay the newline before the current line with the table title.
** org-babel-switch-to-session =(&optional arg info)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-switch-to-session
   :END:

- *Access:* ~C-c C-v C-z~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-switch-to-session&sr=1][Find modifications in git logs]]

: Switch to the session of the current code block.
: Uses ‘org-babel-initiate-session’ to start the session.  If called
: with a prefix argument then this is passed on to
: ‘org-babel-initiate-session’.
** org-sparse-tree =(&optional arg type)=
   :PROPERTIES:
   :CUSTOM_ID: org-sparse-tree
   :END:

- *Access:* ~C-c /, <menu-bar> <Org> <Show/Hide> <Sparse Tree...>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sparse-tree&sr=1][Find modifications in git logs]]

: Create a sparse tree, prompt for the details.
: This command can create sparse trees.  You first need to select the type
: of match used to create the tree:
: 
: t      Show all TODO entries.
: T      Show entries with a specific TODO keyword.
: m      Show entries selected by a tags/property match.
: p      Enter a property name and its value (both with completion on existing
:        names/values) and show entries with that property.
: r      Show entries matching a regular expression (‘/’ can be used as well).
: b      Show deadlines and scheduled items before a date.
: a      Show deadlines and scheduled items after a date.
: d      Show deadlines due within ‘org-deadline-warning-days’.
: D      Show deadlines and scheduled items between a date range.
** org-capture =(&optional goto keys)=
   :PROPERTIES:
   :CUSTOM_ID: org-capture
   :END:

- *Access:* ~C-c c~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture&sr=1][Find modifications in git logs]]

: Capture something.
: 
: This will let you select a template from ‘org-capture-templates’, and
: then file the newly captured information.  The text is immediately
: inserted at the target location, and an indirect buffer is shown where
: you can edit it.  Pressing ‘C-c C-c’ brings you back to the previous
: state of Emacs, so that you can continue your work.
: 
: When called interactively with a ‘C-u’ prefix argument GOTO, don’t
: capture anything, just go to the file/headline where the selected
: template stores its notes.
: 
: With a ‘C-u C-u’ prefix argument, go to the last note stored.
: 
: When called with a ‘C-0’ (zero) prefix, insert a template at point.
: 
: When called with a ‘C-1’ (one) prefix, force prompting for a date when
: a datetree entry is made.
: 
: ELisp programs can set KEYS to a string associated with a template
: in ‘org-capture-templates’.  In this case, interactive selection
: will be bypassed.
: 
: If ‘org-capture-use-agenda-date’ is non-nil, capturing from the
: agenda will use the date at point as the default date.  Then, a
: ‘C-1’ prefix will tell the capture process to use the HH:MM time
: of the day at point (if any) or the current HH:MM time.
** org-forward-paragraph
   :PROPERTIES:
   :CUSTOM_ID: org-forward-paragraph
   :END:

- *Access:* ~<C-down>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-forward-paragraph&sr=1][Find modifications in git logs]]

: Move forward to beginning of next paragraph or equivalent.
: 
: The function moves point to the beginning of the next visible
: structural element, which can be a paragraph, a table, a list
: item, etc.  It also provides some special moves for convenience:
: 
:   - On an affiliated keyword, jump to the beginning of the
:     relative element.
:   - On an item or a footnote definition, move to the second
:     element inside, if any.
:   - On a table or a property drawer, jump after it.
:   - On a verse or source block, stop after blank lines.
** org-protocol-create-for-org
   :PROPERTIES:
   :CUSTOM_ID: org-protocol-create-for-org
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-protocol.el;hb=HEAD][org-protocol.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-protocol-create-for-org&sr=1][Find modifications in git logs]]

: Create a Org protocol project for the current file’s project.
: The visited file needs to be part of a publishing project in
: ‘org-publish-project-alist’ for this to work.  The function
: delegates most of the work to ‘org-protocol-create’.
** org-agenda-open-link =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-open-link
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-open-link&sr=1][Find modifications in git logs]]

: Open the link(s) in the current entry, if any.
: This looks for a link in the displayed line in the agenda.
: It also looks at the text of the entry itself.
** org-edit-special =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-special
   :END:

- *Access:* ~C-c ', <menu-bar> <Org> <Editing> <Edit Source Example>, <menu-bar> <Tbl> <Calculate> <Edit Formulas>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-special&sr=1][Find modifications in git logs]]

: Call a special editor for the element at point.
: When at a table, call the formula editor with ‘org-table-edit-formulas’.
: When in a source code block, call ‘org-edit-src-code’.
: When in a fixed-width region, call ‘org-edit-fixed-width-region’.
: When in an export block, call ‘org-edit-export-block’.
: When in a LaTeX environment, call ‘org-edit-latex-environment’.
: When at an #+INCLUDE keyword, visit the included file.
: When at a footnote reference, call ‘org-edit-footnote-reference’
: On a link, call ‘ffap’ to visit the link at point.
: Otherwise, return a user error.
** org-display-inline-images =(&optional include-linked refresh beg end)=
   :PROPERTIES:
   :CUSTOM_ID: org-display-inline-images
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-display-inline-images&sr=1][Find modifications in git logs]]

: Display inline images.
: 
: An inline image is a link which follows either of these
: conventions:
: 
:   1. Its path is a file with an extension matching return value
:      from ‘image-file-name-regexp’ and it has no contents.
: 
:   2. Its description consists in a single link of the previous
:      type.
: 
: When optional argument INCLUDE-LINKED is non-nil, also links with
: a text description part will be inlined.  This can be nice for
: a quick look at those images, but it does not reflect what
: exported files will look like.
: 
: When optional argument REFRESH is non-nil, refresh existing
: images between BEG and END.  This will create new image displays
: only if necessary.  BEG and END default to the buffer
: boundaries.
** org-capture-goto-last-stored
   :PROPERTIES:
   :CUSTOM_ID: org-capture-goto-last-stored
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-goto-last-stored&sr=1][Find modifications in git logs]]

: Go to the location where the last capture note was stored.
** org-show-todo-tree =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-show-todo-tree
   :END:

- *Access:* ~<menu-bar> <Org> <TODO Lists> <Show TODO Tree>, <menu-bar> <Org> <Special views current file> <TODO Tree>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-todo-tree&sr=1][Find modifications in git logs]]

: Make a compact tree which shows all headlines marked with TODO.
: The tree will show the lines where the regexp matches, and all higher
: headlines above the match.
: With a ‘C-u’ prefix, prompt for a regexp to match.
: With a numeric prefix N, construct a sparse tree for the Nth element
: of ‘org-todo-keywords-1’.
** org-shiftdown =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-shiftdown
   :END:

- *Access:* ~<S-down>, <menu-bar> <Org> <TODO Lists> <Priority Down>, <menu-bar> <Org> <Dates and Scheduling> <Change Date> <1 ... Earlier>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shiftdown&sr=1][Find modifications in git logs]]

: Decrease item in timestamp or decrease priority of current headline.
: Calls ‘org-timestamp-down’ or ‘org-priority-down’, or ‘org-next-item’
: depending on context.  See the individual commands for more information.
** org-agenda-entry-text-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-entry-text-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-entry-text-mode&sr=1][Find modifications in git logs]]

: Toggle entry text mode in an agenda buffer.
** org-find-file-at-mouse =(ev)=
   :PROPERTIES:
   :CUSTOM_ID: org-find-file-at-mouse
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-find-file-at-mouse&sr=1][Find modifications in git logs]]

: Open file link or URL at mouse.
** org-table-next-row
   :PROPERTIES:
   :CUSTOM_ID: org-table-next-row
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-next-row&sr=1][Find modifications in git logs]]

: Go to the next row (same column) in the current table.
: Before doing so, re-align the table if necessary.
** org-goto =(&optional alternative-interface)=
   :PROPERTIES:
   :CUSTOM_ID: org-goto
   :END:

- *Access:* ~C-c C-j, <menu-bar> <Org> <Navigate Headings> <Jump>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto&sr=1][Find modifications in git logs]]

: Look up a different location in the current file, keeping current visibility.
: 
: When you want look-up or go to a different location in a
: document, the fastest way is often to fold the entire buffer and
: then dive into the tree.  This method has the disadvantage, that
: the previous location will be folded, which may not be what you
: want.
: 
: This command works around this by showing a copy of the current
: buffer in an indirect buffer, in overview mode.  You can dive
: into the tree in that copy, use org-occur and incremental search
: to find a location.  When pressing RET or ‘Q’, the command
: returns to the original buffer in which the visibility is still
: unchanged.  After RET it will also jump to the location selected
: in the indirect buffer and expose the headline hierarchy above.
: 
: With a prefix argument, use the alternative interface: e.g., if
: ‘org-goto-interface’ is ‘outline’ use ‘outline-path-completion’.
** org-agenda-goto-mouse =(ev)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-goto-mouse
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-goto-mouse&sr=1][Find modifications in git logs]]

: Go to the Org file which contains the item at the mouse click.
** org-feed-update-all
   :PROPERTIES:
   :CUSTOM_ID: org-feed-update-all
   :END:

- *Access:* ~C-c C-x g, <menu-bar> <Org> <TODO Lists> <Get news from all feeds>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-update-all&sr=1][Find modifications in git logs]]

: Get inbox items from all feeds in ‘org-feed-alist’.
** org-mouse-transform-to-outline
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-transform-to-outline
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-transform-to-outline&sr=1][Find modifications in git logs]]


** org-insert-item =(&optional checkbox)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-item&sr=1][Find modifications in git logs]]

: Insert a new item at the current level.
: If cursor is before first character after bullet of the item, the
: new item will be created before the current one.
: 
: If CHECKBOX is non-nil, add a checkbox next to the bullet.
: 
: Return t when things worked, nil when we are not in an item, or
: item is invisible.
** org-id-update-id-locations =(&optional files silent)=
   :PROPERTIES:
   :CUSTOM_ID: org-id-update-id-locations
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-update-id-locations&sr=1][Find modifications in git logs]]

: Scan relevant files for IDs.
: Store the relation between files and corresponding IDs.
: This will scan all agenda files, all associated archives, and all
: files currently mentioned in ‘org-id-locations’.
: When FILES is given, scan these files instead.
** org-id-get-create =(&optional force)=
   :PROPERTIES:
   :CUSTOM_ID: org-id-get-create
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-get-create&sr=1][Find modifications in git logs]]

: Create an ID for the current entry and return it.
: If the entry already has an ID, just return it.
: With optional argument FORCE, force the creation of a new ID.
** org-tags-view =(&optional todo-only match)=
   :PROPERTIES:
   :CUSTOM_ID: org-tags-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tags-view&sr=1][Find modifications in git logs]]

: Show all headlines for all ‘org-agenda-files’ matching a TAGS criterion.
: The prefix arg TODO-ONLY limits the search to TODO entries.
** org-agenda-diary-entry
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-diary-entry
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-diary-entry&sr=1][Find modifications in git logs]]

: Make a diary entry, like the ‘i’ command from the calendar.
: All the standard commands work: block, weekly etc.
: When ‘org-agenda-diary-file’ points to a file,
: ‘org-agenda-diary-entry-in-org-file’ is called instead to create
: entries in that Org file.
** org-insert-link-global
   :PROPERTIES:
   :CUSTOM_ID: org-insert-link-global
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-link-global&sr=1][Find modifications in git logs]]

: Insert a link like Org mode does.
: This command can be called in any mode to insert a link in Org syntax.
** org-bibtex-create =(&optional arg nonew)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-create
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-create&sr=1][Find modifications in git logs]]

: Create a new entry at the given level.
: With a prefix arg, query for optional fields as well.
: If nonew is t, add data to the headline of the entry at point.
** org-table-create-with-table.el
   :PROPERTIES:
   :CUSTOM_ID: org-table-create-with-table.el
   :END:

- *Access:* ~C-c ~, <menu-bar> <Tbl> <Create/Convert from/to table.el>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-create-with-table.el&sr=1][Find modifications in git logs]]

: Use the table.el package to insert a new table.
: If there is already a table at point, convert between Org tables
: and table.el tables.
** orgtbl-ascii-plot =(&optional ask)=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-ascii-plot
   :END:

- *Access:* ~C-c " a, <menu-bar> <Tbl> <Plot> <Ascii plot>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-ascii-plot&sr=1][Find modifications in git logs]]

: Draw an ASCII bar plot in a column.
: 
: With cursor in a column containing numerical values, this function
: will draw a plot in a new column.
: 
: ASK, if given, is a numeric prefix to override the default 12
: characters width of the plot.  ASK may also be the ‘C-u’ prefix,
: which will prompt for the width.
** org-copy-visible =(beg end)=
   :PROPERTIES:
   :CUSTOM_ID: org-copy-visible
   :END:

- *Access:* ~C-c C-x v, <menu-bar> <Org> <Edit Structure> <Copy visible text>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-copy-visible&sr=1][Find modifications in git logs]]

: Copy the visible parts of the region.
** org-next-item
   :PROPERTIES:
   :CUSTOM_ID: org-next-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-next-item&sr=1][Find modifications in git logs]]

: Move to the beginning of the next item.
: Throw an error when not in a list.  Also throw an error when at
: last item, unless ‘org-list-use-circular-motion’ is non-nil.
** org-toggle-ordered-property
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-ordered-property
   :END:

- *Access:* ~C-c C-x o, <menu-bar> <Org> <TODO Lists> <Do Children sequentially>, <menu-bar> <Org> <TODO Lists> <Do Children parallel>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-ordered-property&sr=1][Find modifications in git logs]]

: Toggle the ORDERED property of the current entry.
: For better visibility, you can track the value of this property with a tag.
: See variable ‘org-track-ordered-property-with-tag’.
** org-babel-remove-result-one-or-many =(x)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-remove-result-one-or-many
   :END:

- *Access:* ~C-c C-v k~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-remove-result-one-or-many&sr=1][Find modifications in git logs]]

: Remove the result of the current source block.
: If called with a prefix argument, remove all result blocks
: in the buffer.
** org-agenda-toggle-diary
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-toggle-diary
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-toggle-diary&sr=1][Find modifications in git logs]]

: Toggle diary inclusion in an agenda buffer.
** org-compute-property-at-point
   :PROPERTIES:
   :CUSTOM_ID: org-compute-property-at-point
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-compute-property-at-point&sr=1][Find modifications in git logs]]

: Compute the property at point.
: This looks for an enclosing column format, extracts the operator and
: then applies it to the property in the column format’s scope.
** org-open-line =(n)=
   :PROPERTIES:
   :CUSTOM_ID: org-open-line
   :END:

- *Access:* ~C-o, <insertline>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-line&sr=1][Find modifications in git logs]]

: Insert a new row in tables, call ‘open-line’ elsewhere.
: If ‘org-special-ctrl-o’ is nil, just call ‘open-line’ everywhere.
: As a special case, when a document starts with a table, allow to
: call ‘open-line’ on the very first character.
** org-insert-todo-heading-respect-content =(&optional force-state)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-todo-heading-respect-content
   :END:

- *Access:* ~<C-S-return>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-todo-heading-respect-content&sr=1][Find modifications in git logs]]

: Insert TODO heading with ‘org-insert-heading-respect-content’ set to t.
** org-columns-todo =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-todo
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-todo&sr=1][Find modifications in git logs]]

: Change the TODO state during column view.
** org-plot/goto-nearest-table
   :PROPERTIES:
   :CUSTOM_ID: org-plot/goto-nearest-table
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-plot.el;hb=HEAD][org-plot.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-plot/goto-nearest-table&sr=1][Find modifications in git logs]]

: Move the point forward to the beginning of nearest table.
: Return value is the point at the beginning of the table.
** org-clock-jump-to-current-clock =(&optional effective-clock)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-jump-to-current-clock
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-jump-to-current-clock&sr=1][Find modifications in git logs]]


** org-open-at-point =(&rest rest)=
   :PROPERTIES:
   :CUSTOM_ID: org-open-at-point
   :END:

- *Access:* ~C-c C-o, <menu-bar> <Org> <Hyperlinks> <Follow Link>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-at-point&sr=1][Find modifications in git logs]]

: :around advice: ‘ad-Advice-org-open-at-point’
: 
: Open link, timestamp, footnote or tags at point.
: 
: When point is on a link, follow it.  Normally, files will be
: opened by an appropriate application.  If the optional prefix
: argument ARG is non-nil, Emacs will visit the file.  With
: a double prefix argument, try to open outside of Emacs, in the
: application the system uses for this file type.
: 
: When point is on a timestamp, open the agenda at the day
: specified.
: 
: When point is a footnote definition, move to the first reference
: found.  If it is on a reference, move to the associated
: definition.
: 
: When point is on a headline, display a list of every link in the
: entry, so it is possible to pick one, or all, of them.  If point
: is on a tag, call ‘org-tags-view’ instead.
: 
: When optional argument REFERENCE-BUFFER is non-nil, it should
: specify a buffer from where the link search should happen.  This
: is used internally by ‘org-open-link-from-string’.
: 
: On top of syntactically correct links, this function will also
: try to open links and time-stamps in comments, example
: blocks... i.e., whenever point is on something looking like
: a timestamp or a link.
: 
: (fn &optional ARG REFERENCE-BUFFER)
** org-agenda-sunrise-sunset =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-sunrise-sunset
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-sunrise-sunset&sr=1][Find modifications in git logs]]

: Display sunrise and sunset for the cursor date.
: Latitude and longitude can be specified with the variables
: ‘calendar-latitude’ and ‘calendar-longitude’.  When called with prefix
: argument, latitude and longitude will be prompted for.
** org-remove-file =(&optional file)=
   :PROPERTIES:
   :CUSTOM_ID: org-remove-file
   :END:

- *Access:* ~C-c ], <menu-bar> <Org> <File List for Agenda> <Remove Current File from List>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-remove-file&sr=1][Find modifications in git logs]]

: Remove current file from the list of files in variable ‘org-agenda-files’.
: These are the files which are being checked for agenda entries.
: Optional argument FILE means use this file instead of the current.
** org-table-fedit-line-up
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-line-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-line-up&sr=1][Find modifications in git logs]]

: Move cursor one line up in the window showing the table.
** org-agenda-bulk-mark-regexp =(regexp)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-mark-regexp
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-mark-regexp&sr=1][Find modifications in git logs]]

: Mark entries matching REGEXP for future agenda bulk action.
** org-mouse-move-tree-start =(_event)=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-move-tree-start
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-move-tree-start&sr=1][Find modifications in git logs]]


** org-agenda-goto-today
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-goto-today
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-goto-today&sr=1][Find modifications in git logs]]

: Go to today.
** org-table-fedit-ref-up
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-ref-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-ref-up&sr=1][Find modifications in git logs]]

: Shift the reference at point one row/hline up.
** org-transpose-element
   :PROPERTIES:
   :CUSTOM_ID: org-transpose-element
   :END:

- *Access:* ~C-M-t~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-transpose-element&sr=1][Find modifications in git logs]]

: Transpose current and previous elements, keeping blank lines between.
: Point is moved after both elements.
** org-babel-tangle-jump-to-org
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-jump-to-org
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-jump-to-org&sr=1][Find modifications in git logs]]

: Jump from a tangled code file to the related Org mode file.
** org-narrow-to-subtree
   :PROPERTIES:
   :CUSTOM_ID: org-narrow-to-subtree
   :END:

- *Access:* ~C-x n s~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-narrow-to-subtree&sr=1][Find modifications in git logs]]

: Narrow buffer to the current subtree.
** org-agenda-prepare-buffers =(files)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-prepare-buffers
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-prepare-buffers&sr=1][Find modifications in git logs]]

: Create buffers for all agenda files, protect archived trees and comments.
** org-toggle-link-display
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-link-display
   :END:

- *Access:* ~<menu-bar> <Org> <Hyperlinks> <Descriptive Links>, <menu-bar> <Org> <Hyperlinks> <Literal Links>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-link-display&sr=1][Find modifications in git logs]]

: Toggle the literal or descriptive display of links.
** org-babel-haskell-export-to-lhs =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-haskell-export-to-lhs
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-haskell.el;hb=HEAD][ob-haskell.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-haskell-export-to-lhs&sr=1][Find modifications in git logs]]

: Export to a .lhs file with all haskell code blocks escaped.
: When called with a prefix argument the resulting
: .lhs file will be exported to a .tex file.  This function will
: create two new files, base-name.lhs and base-name.tex where
: base-name is the name of the current Org file.
: 
: Note that all standard Babel literate programming
: constructs (header arguments, no-web syntax etc...) are ignored.
** org-agenda-do-date-earlier =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-do-date-earlier
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-do-date-earlier&sr=1][Find modifications in git logs]]


** org-toggle-timestamp-type
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-timestamp-type
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-timestamp-type&sr=1][Find modifications in git logs]]

: Toggle the type (<active> or [inactive]) of a time stamp.
** org-table-toggle-formula-debugger
   :PROPERTIES:
   :CUSTOM_ID: org-table-toggle-formula-debugger
   :END:

- *Access:* ~C-c {, <menu-bar> <Tbl> <Debug Formulas>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-toggle-formula-debugger&sr=1][Find modifications in git logs]]

: Toggle the formula debugger in tables.
** org-bibtex-read
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-read
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-read&sr=1][Find modifications in git logs]]

: Read a bibtex entry and save to ‘org-bibtex-entries’.
: This uses ‘bibtex-parse-entry’.
** org-match-sparse-tree =(&optional todo-only match)=
   :PROPERTIES:
   :CUSTOM_ID: org-match-sparse-tree
   :END:

- *Access:* ~C-c \, <menu-bar> <Org> <Special views current file> <Tags/Property tree>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-match-sparse-tree&sr=1][Find modifications in git logs]]

: Create a sparse tree according to tags string MATCH.
: 
: MATCH is a string with match syntax.  It can contain a selection
: of tags ("+work+urgent-boss"), properties ("LEVEL>3"), and
: TODO keywords ("TODO=\"WAITING\"") or a combination of
: those.  See the manual for details.
: 
: If optional argument TODO-ONLY is non-nil, only select lines that
: are also TODO tasks.
** org-show-priority
   :PROPERTIES:
   :CUSTOM_ID: org-show-priority
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-priority&sr=1][Find modifications in git logs]]

: Show the priority of the current item.
: This priority is composed of the main priority given with the [#A] cookies,
: and by additional input from the age of a schedules or deadline entry.
** org-agenda-previous-line
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-previous-line
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-previous-line&sr=1][Find modifications in git logs]]

: Move cursor to the previous line, and show if follow-mode is active.
** org-agenda-reset-view
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-reset-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-reset-view&sr=1][Find modifications in git logs]]

: Switch to default view for agenda.
** org-table-sum =(&optional beg end nlast)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-sum
   :END:

- *Access:* ~C-c +, <menu-bar> <Tbl> <Calculate> <Sum Column/Rectangle>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-sum&sr=1][Find modifications in git logs]]

: Sum numbers in region of current table column.
: The result will be displayed in the echo area, and will be available
: as kill to be inserted with <S-insertchar>.
: 
: If there is an active region, it is interpreted as a rectangle and all
: numbers in that rectangle will be summed.  If there is no active
: region and point is located in a table column, sum all numbers in that
: column.
: 
: If at least one number looks like a time HH:MM or HH:MM:SS, all other
: numbers are assumed to be times as well (in decimal hours) and the
: numbers are added as such.
: 
: If NLAST is a number, only the NLAST fields will actually be summed.
** org-koma-letter-export-as-latex =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-export-as-latex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-export-as-latex&sr=1][Find modifications in git logs]]

: Export current buffer as a KOMA Scrlttr2 letter.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting buffer should be accessible
: through the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{letter}" and "\end{letter}".
: 
: EXT-PLIST, when provided, is a proeprty list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Export is done in a buffer named "*Org KOMA-LETTER Export*".  It
: will be displayed if ‘org-export-show-temporary-export-buffer’ is
: non-nil.
** org-babel-lilypond-toggle-pdf-display
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-toggle-pdf-display
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-toggle-pdf-display&sr=1][Find modifications in git logs]]

: Toggle whether pdf will be displayed following a successful compilation.
** org-babel-execute-subtree =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-execute-subtree
   :END:

- *Access:* ~C-c C-v s, C-c C-v C-s~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-execute-subtree&sr=1][Find modifications in git logs]]

: Execute source code blocks in a subtree.
: Call ‘org-babel-execute-src-block’ on every source block in
: the current subtree.
** org-attach-attach-cp
   :PROPERTIES:
   :CUSTOM_ID: org-attach-attach-cp
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-attach-cp&sr=1][Find modifications in git logs]]

: Attach a file by copying it.
** org-export-stack-mode
   :PROPERTIES:
   :CUSTOM_ID: org-export-stack-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-stack-mode&sr=1][Find modifications in git logs]]

: Mode for displaying asynchronous export stack.
: 
: Type ‘M-x org-export-stack’ to visualize the asynchronous export
: stack.
: 
: In an Org Export Stack buffer, use ‘RET’ to view export output
: on current line, ‘d’ to remove it from the stack and ‘C’ to clear
: stack completely.
: 
: Removing entries in a stack buffer does not affect files
: or buffers, only display.
: 
: key             binding
: ---             -------
: 
: TAB		forward-button
: RET		org-export-stack-view
: C-n		next-line
: C-p		previous-line
: ESC		Prefix Command
: SPC		next-line
: -		negative-argument
: 0 .. 9		digit-argument
: <		beginning-of-buffer
: >		end-of-buffer
: ?		describe-mode
: C		org-export-stack-clear
: S		tabulated-list-sort
: d		org-export-stack-remove
: g		revert-buffer
: h		describe-mode
: n		next-line
: p		previous-line
: q		quit-window
: v		org-export-stack-view
: DEL		previous-line
: S-SPC		scroll-down-command
: <backtab>	backward-button
: <down>		next-line
: <follow-link>	mouse-face
: <mouse-2>	mouse-select-window
: <remap>		Prefix Command
: <up>		previous-line
: 
: C-M-i		backward-button
: 
: 
: 
: In addition to any hooks its parent mode ‘tabulated-list-mode’ might have run,
: this mode runs the hook ‘org-export-stack-mode-hook’, as the final or penultimate step
: during initialization.
** org-insert-heading-respect-content =(&optional invisible-ok)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-heading-respect-content
   :END:

- *Access:* ~<C-return>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-heading-respect-content&sr=1][Find modifications in git logs]]

: Insert heading with ‘org-insert-heading-respect-content’ set to t.
** org-agenda-list-stuck-projects =(&rest ignore)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-list-stuck-projects
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-list-stuck-projects&sr=1][Find modifications in git logs]]

: Create agenda view for projects that are stuck.
: Stuck projects are project that have no next actions.  For the definitions
: of what a project is and how to check if it stuck, customize the variable
: ‘org-stuck-projects’.
** org-cdlatex-math-modify =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-cdlatex-math-modify
   :END:

- *Access:* ~<menu-bar> <Org> <LaTeX> <Modify math symbol>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cdlatex-math-modify&sr=1][Find modifications in git logs]]

: Execute ‘cdlatex-math-modify’ in LaTeX fragments.
: Revert to the normal definition outside of these fragments.
** org-create-customize-menu
   :PROPERTIES:
   :CUSTOM_ID: org-create-customize-menu
   :END:

- *Access:* ~<menu-bar> <Org> <Customize> <Expand This Menu>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-create-customize-menu&sr=1][Find modifications in git logs]]

: Create a full customization menu for Org mode, insert it into the menu.
** org-table-create =(&optional size)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-create
   :END:

- *Access:* ~<menu-bar> <Tbl> <Create>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-create&sr=1][Find modifications in git logs]]

: Query for a size and insert a table skeleton.
: SIZE is a string Columns x Rows like for example "3x2".
** org-html-convert-region-to-html
   :PROPERTIES:
   :CUSTOM_ID: org-html-convert-region-to-html
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-convert-region-to-html&sr=1][Find modifications in git logs]]

: Assume the current region has Org syntax, and convert it to HTML.
: This can be used in any buffer.  For example, you can write an
: itemized list in Org syntax in an HTML buffer and use this command
: to convert it.
** org-attach-attach-ln
   :PROPERTIES:
   :CUSTOM_ID: org-attach-attach-ln
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-attach-ln&sr=1][Find modifications in git logs]]

: Attach a file by creating a hard link to it.
: Beware that this does not work on systems that do not support hard links.
: On some systems, this apparently does copy the file instead.
** org-html-htmlize-generate-css
   :PROPERTIES:
   :CUSTOM_ID: org-html-htmlize-generate-css
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-htmlize-generate-css&sr=1][Find modifications in git logs]]

: Create the CSS for all font definitions in the current Emacs session.
: Use this to create face definitions in your CSS style file that can then
: be used by code snippets transformed by htmlize.
: This command just produces a buffer that contains class definitions for all
: faces used in the current Emacs session.  You can copy and paste the ones you
: need into your CSS file.
: 
: If you then set ‘org-html-htmlize-output-type’ to ‘css’, calls
: to the function ‘org-html-htmlize-region-for-paste’ will
: produce code that uses these same face definitions.
** org-check-after-date =(d)=
   :PROPERTIES:
   :CUSTOM_ID: org-check-after-date
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-check-after-date&sr=1][Find modifications in git logs]]

: Check if there are deadlines or scheduled entries after date D.
** org-toggle-comment
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-comment
   :END:

- *Access:* ~C-c ;~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-comment&sr=1][Find modifications in git logs]]

: Change the COMMENT state of an entry.
** org-attach-attach-mv
   :PROPERTIES:
   :CUSTOM_ID: org-attach-attach-mv
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-attach-mv&sr=1][Find modifications in git logs]]

: Attach a file by moving (renaming) it.
** org-remove-inline-images
   :PROPERTIES:
   :CUSTOM_ID: org-remove-inline-images
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-remove-inline-images&sr=1][Find modifications in git logs]]

: Remove inline display of images.
** org-return-indent
   :PROPERTIES:
   :CUSTOM_ID: org-return-indent
   :END:

- *Access:* ~C-j~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-return-indent&sr=1][Find modifications in git logs]]

: Goto next table row or insert a newline and indent.
: Calls ‘org-table-next-row’ or ‘newline-and-indent’, depending on
: context.  See the individual commands for more information.
** org-delete-property-globally =(property)=
   :PROPERTIES:
   :CUSTOM_ID: org-delete-property-globally
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-delete-property-globally&sr=1][Find modifications in git logs]]

: Remove PROPERTY globally, from all entries.
: This function ignores narrowing, if any.
** org-table-fedit-scroll =(N)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-scroll
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-scroll&sr=1][Find modifications in git logs]]


** org-unindent-buffer
   :PROPERTIES:
   :CUSTOM_ID: org-unindent-buffer
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-unindent-buffer&sr=1][Find modifications in git logs]]

: Un-indent the visible part of the buffer.
: Relative indentation (between items, inside blocks, etc.) isn’t
: modified.
** orgtbl-ctrl-c-ctrl-c =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-ctrl-c-ctrl-c
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-ctrl-c-ctrl-c&sr=1][Find modifications in git logs]]

: If the cursor is inside a table, realign the table.
: If it is a table to be sent away to a receiver, do it.
: With prefix arg, also recompute table.
** org-insert-subheading =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-subheading
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-subheading&sr=1][Find modifications in git logs]]

: Insert a new subheading and demote it.
: Works for outline headings and for plain lists alike.
** org-agenda-earlier =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-earlier
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-earlier&sr=1][Find modifications in git logs]]

: Go backward in time by the current span.
: With prefix ARG, go backward that many times the current span.
** org-attach-delete-one =(&optional file)=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-delete-one
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-delete-one&sr=1][Find modifications in git logs]]

: Delete a single attachment.
** org-columns-content
   :PROPERTIES:
   :CUSTOM_ID: org-columns-content
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-content&sr=1][Find modifications in git logs]]

: Switch to contents view while in columns view.
** org-attach-attach-lns
   :PROPERTIES:
   :CUSTOM_ID: org-attach-attach-lns
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-attach-lns&sr=1][Find modifications in git logs]]

: Attach a file by creating a symbolic link to it.
: 
: Beware that this does not work on systems that do not support symbolic links.
: On some systems, this apparently does copy the file instead.
** org-agenda-manipulate-query-add
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-manipulate-query-add
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-manipulate-query-add&sr=1][Find modifications in git logs]]

: Manipulate the query by adding a search term with positive selection.
: Positive selection means the term must be matched for selection of an entry.
** org-beginning-of-line =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-beginning-of-line
   :END:

- *Access:* ~C-a~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beginning-of-line&sr=1][Find modifications in git logs]]

: Go to the beginning of the current visible line.
: 
: If this is a headline, and ‘org-special-ctrl-a/e’ is set, ignore
: tags on the first attempt, and only move to after the tags when
: the cursor is already beyond the end of the headline.
: 
: With argument N not nil or 1, move forward N - 1 lines first.
** org-agenda-deadline =(arg &optional time)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-deadline
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-deadline&sr=1][Find modifications in git logs]]

: Schedule the item at point.
: ARG is passed through to ‘org-deadline’.
** org-agenda-priority =(&optional force-direction)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-priority
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-priority&sr=1][Find modifications in git logs]]

: Set the priority of line at point, also in Org file.
: This changes the line at point, all other lines in the agenda referring to
: the same tree node, and the headline of the tree node in the Org file.
: Called with a universal prefix arg, show the priority instead of setting it.
** org-ascii-export-to-ascii =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-export-to-ascii
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-export-to-ascii&sr=1][Find modifications in git logs]]

: Export current buffer to a text file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, strip title and
: table of contents from output.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return output file’s name.
** org-fill-paragraph =(&optional justify region)=
   :PROPERTIES:
   :CUSTOM_ID: org-fill-paragraph
   :END:

- *Access:* ~M-q~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-fill-paragraph&sr=1][Find modifications in git logs]]

: Fill element at point, when applicable.
: 
: This function only applies to comment blocks, comments, example
: blocks and paragraphs.  Also, as a special case, re-align table
: when point is at one.
: 
: For convenience, when point is at a plain list, an item or
: a footnote definition, try to fill the first paragraph within.
: 
: If JUSTIFY is non-nil (interactively, with prefix argument),
: justify as well.  If ‘sentence-end-double-space’ is non-nil, then
: period followed by one space does not end a sentence, so don’t
: break a line there.  The variable ‘fill-column’ controls the
: width for filling.
: 
: The REGION argument is non-nil if called interactively; in that
: case, if Transient Mark mode is enabled and the mark is active,
: fill each of the elements in the active region, instead of just
: filling the current element.
** org-publish-current-project =(&optional force async)=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-current-project
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-current-project&sr=1][Find modifications in git logs]]

: Publish the project associated with the current file.
: With a prefix argument, force publishing of all files in
: the project.
** org-remove-occur-highlights =(&optional _beg _end noremove)=
   :PROPERTIES:
   :CUSTOM_ID: org-remove-occur-highlights
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-remove-occur-highlights&sr=1][Find modifications in git logs]]

: Remove the occur highlights from the buffer.
: BEG and END are ignored.  If NOREMOVE is nil, remove this function
: from the ‘before-change-functions’ in the current buffer.
** org-agenda-next-item =(n)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-next-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-next-item&sr=1][Find modifications in git logs]]

: Move cursor to next agenda item.
** org-previous-visible-heading =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-previous-visible-heading
   :END:

- *Access:* ~C-c C-p, <menu-bar> <Org> <Navigate Headings> <Previous>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-previous-visible-heading&sr=1][Find modifications in git logs]]

: Move to the previous visible heading.
: 
: This function wraps ‘outline-previous-visible-heading’ with
: ‘org-with-limited-levels’ in order to skip over inline tasks and
: respect customization of ‘org-odd-levels-only’.
** org-babel-check-src-block
   :PROPERTIES:
   :CUSTOM_ID: org-babel-check-src-block
   :END:

- *Access:* ~C-c C-v c, C-c C-v C-c~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-check-src-block&sr=1][Find modifications in git logs]]

: Check for misspelled header arguments in the current code block.
** org-increase-number-at-point =(&optional inc)=
   :PROPERTIES:
   :CUSTOM_ID: org-increase-number-at-point
   :END:

- *Access:* ~<C-M-S-right>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-increase-number-at-point&sr=1][Find modifications in git logs]]

: Increment the number at point.
: With an optional prefix numeric argument INC, increment using
: this numeric value.
** org-end-of-line =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-end-of-line
   :END:

- *Access:* ~C-e~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-end-of-line&sr=1][Find modifications in git logs]]

: Go to the end of the line, but before ellipsis, if any.
: 
: If this is a headline, and ‘org-special-ctrl-a/e’ is set, ignore
: tags on the first attempt, and only move to after the tags when
: the cursor is already beyond the end of the headline.
: 
: With argument N not nil or 1, move forward N - 1 lines first.
** org-attach-set-directory
   :PROPERTIES:
   :CUSTOM_ID: org-attach-set-directory
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-set-directory&sr=1][Find modifications in git logs]]

: Set the ATTACH_DIR property of the current entry.
: The property defines the directory that is used for attachments
: of the entry.
** org-table-fedit-scroll-down =(N)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-scroll-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-scroll-down&sr=1][Find modifications in git logs]]


** orgtbl-error
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-error
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-error&sr=1][Find modifications in git logs]]

: Error when there is no default binding for a table key.
** org-shifttab =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-shifttab
   :END:

- *Access:* ~<backtab>, <S-tab>, <S-iso-lefttab>, <menu-bar> <Tbl> <Previous Field>, <menu-bar> <Org> <Show/Hide> <Cycle Global Visibility>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-shifttab&sr=1][Find modifications in git logs]]

: Global visibility cycling or move to previous table field.
: Call ‘org-table-previous-field’ within a table.
: When ARG is nil, cycle globally through visibility states.
: When ARG is a numeric prefix, show contents of this level.
** org-man-export-to-man =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-man-export-to-man
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-export-to-man&sr=1][Find modifications in git logs]]

: Export current buffer to a Man file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only the body
: without any markers.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return output file’s name.
** org-capture-refile
   :PROPERTIES:
   :CUSTOM_ID: org-capture-refile
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-refile&sr=1][Find modifications in git logs]]

: Finalize the current capture and then refile the entry.
: Refiling is done from the base buffer, because the indirect buffer is then
: already gone.  Any prefix argument will be passed to the refile command.
** org-decrypt-entry
   :PROPERTIES:
   :CUSTOM_ID: org-decrypt-entry
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-crypt.el;hb=HEAD][org-crypt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-decrypt-entry&sr=1][Find modifications in git logs]]

: Decrypt the content of the current headline.
** org-set-tags-command =(&optional arg just-align)=
   :PROPERTIES:
   :CUSTOM_ID: org-set-tags-command
   :END:

- *Access:* ~C-c C-q, <menu-bar> <Org> <TAGS and Properties> <Set Tags>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-set-tags-command&sr=1][Find modifications in git logs]]

: Call the set-tags command for the current entry.
** org-edit-agenda-file-list
   :PROPERTIES:
   :CUSTOM_ID: org-edit-agenda-file-list
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-agenda-file-list&sr=1][Find modifications in git logs]]

: Edit the list of agenda files.
: Depending on setup, this either uses customize to edit the variable
: ‘org-agenda-files’, or it visits the file that is holding the list.  In the
: latter case, the buffer is set up in a way that saving it automatically kills
: the buffer and restores the previous window configuration.
** org-babel-load-in-session =(&optional _arg info)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-load-in-session
   :END:

- *Access:* ~C-c C-v l, C-c C-v C-l~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-load-in-session&sr=1][Find modifications in git logs]]

: Load the body of the current source-code block.
: Evaluate the header arguments for the source block before
: entering the session.  After loading the body this pops open the
: session.
** org-clock-menu
   :PROPERTIES:
   :CUSTOM_ID: org-clock-menu
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-menu&sr=1][Find modifications in git logs]]


** org-columns-edit-attributes
   :PROPERTIES:
   :CUSTOM_ID: org-columns-edit-attributes
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-edit-attributes&sr=1][Find modifications in git logs]]

: Edit the attributes of the current column.
** org-export-stack-clear
   :PROPERTIES:
   :CUSTOM_ID: org-export-stack-clear
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-stack-clear&sr=1][Find modifications in git logs]]

: Remove all entries from export stack.
** org-revert-all-org-buffers
   :PROPERTIES:
   :CUSTOM_ID: org-revert-all-org-buffers
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-revert-all-org-buffers&sr=1][Find modifications in git logs]]

: Revert all Org buffers.
: Prompt for confirmation when there are unsaved changes.
: Be sure you know what you are doing before letting this function
: overwrite your changes.
: 
: This function is useful in a setup where one tracks org files
: with a version control system, to revert on one machine after pulling
: changes from another.  I believe the procedure must be like this:
: 
: 1. M-x org-save-all-org-buffers
: 2. Pull changes from the other machine, resolve conflicts
: 3. M-x org-revert-all-org-buffers
** org-table-move-row =(&optional up)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-move-row
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-move-row&sr=1][Find modifications in git logs]]

: Move the current table line down.  With arg UP, move it up.
** org-id-copy
   :PROPERTIES:
   :CUSTOM_ID: org-id-copy
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-copy&sr=1][Find modifications in git logs]]

: Copy the ID of the entry at point to the kill ring.
: Create an ID if necessary.
** org-table-cut-region =(beg end)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-cut-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-cut-region&sr=1][Find modifications in git logs]]

: Copy region in table to the clipboard and blank all relevant fields.
: If there is no active region, use just the field at point.
** org-calendar-goto-agenda
   :PROPERTIES:
   :CUSTOM_ID: org-calendar-goto-agenda
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-calendar-goto-agenda&sr=1][Find modifications in git logs]]

: Compute the Org agenda for the calendar date displayed at the cursor.
: This is a command that has to be installed in ‘calendar-mode-map’.
** org-capture-finalize =(&optional stay-with-capture)=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-finalize
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-finalize&sr=1][Find modifications in git logs]]

: Finalize the capture process.
: With prefix argument STAY-WITH-CAPTURE, jump to the location of the
: captured item after finalizing.
** org-ctags-open-file =(name &optional title)=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-open-file
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-open-file&sr=1][Find modifications in git logs]]

: Visit or create a file called ‘NAME.org’, and insert a new topic.
: The new topic will be titled NAME (or TITLE if supplied).
** org-refile-goto-last-stored
   :PROPERTIES:
   :CUSTOM_ID: org-refile-goto-last-stored
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile-goto-last-stored&sr=1][Find modifications in git logs]]

: Go to the location where the last refile was stored.
** org-force-cycle-archived
   :PROPERTIES:
   :CUSTOM_ID: org-force-cycle-archived
   :END:

- *Access:* ~<C-tab>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-force-cycle-archived&sr=1][Find modifications in git logs]]

: Cycle subtree even if it is archived.
** org-table-field-info =(_arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-field-info
   :END:

- *Access:* ~C-c ?~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-field-info&sr=1][Find modifications in git logs]]

: Show info about the current field, and highlight any reference at point.
** org-setup-comments-handling
   :PROPERTIES:
   :CUSTOM_ID: org-setup-comments-handling
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-setup-comments-handling&sr=1][Find modifications in git logs]]


** org-priority-up
   :PROPERTIES:
   :CUSTOM_ID: org-priority-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-priority-up&sr=1][Find modifications in git logs]]

: Increase the priority of the current item.
** org-copy-subtree =(&optional n cut force-store-markers nosubtrees)=
   :PROPERTIES:
   :CUSTOM_ID: org-copy-subtree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-copy-subtree&sr=1][Find modifications in git logs]]

: Copy the current subtree it in the clipboard.
: With prefix arg N, copy this many sequential subtrees.
: This is a short-hand for marking the subtree and then copying it.
: If CUT is non-nil, actually cut the subtree.
: If FORCE-STORE-MARKERS is non-nil, store the relative locations
: of some markers in the region, even if CUT is non-nil.  This is
: useful if the caller implements cut-and-paste as copy-then-paste-then-cut.
** org-caldav-delete-everything =(prefix)=
   :PROPERTIES:
   :CUSTOM_ID: org-caldav-delete-everything
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-caldav.el;hb=HEAD][org-caldav.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-caldav-delete-everything&sr=1][Find modifications in git logs]]

: Delete all events from Calendar and removes state file.
: Again: This deletes all events in your calendar.  So only do this
: if you’re really sure.  This has to be called with a prefix, just
: so you don’t do it by accident.
** org-forward-element
   :PROPERTIES:
   :CUSTOM_ID: org-forward-element
   :END:

- *Access:* ~M-}~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-forward-element&sr=1][Find modifications in git logs]]

: Move forward by one element.
: Move to the next element at the same level, when possible.
** org-open-at-point-global
   :PROPERTIES:
   :CUSTOM_ID: org-open-at-point-global
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-at-point-global&sr=1][Find modifications in git logs]]

: Follow a link or time-stamp like Org mode does.
: This command can be called in any mode to follow an external link
: or a time-stamp that has Org mode syntax.  Its behavior is
: undefined when called on internal links (e.g., fuzzy links).
: Raise an error when there is nothing to follow.  
** org-unescape-code-in-region =(beg end)=
   :PROPERTIES:
   :CUSTOM_ID: org-unescape-code-in-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-unescape-code-in-region&sr=1][Find modifications in git logs]]

: Un-escape lines between BEG and END.
: Un-escaping happens by removing the first comma on lines starting
: with ",*", ",#+", ",,*" and ",,#+".
** org-agenda-menu =(event)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-menu
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-menu&sr=1][Find modifications in git logs]]

: Agenda menu
** org-cycle-agenda-files
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-agenda-files
   :END:

- *Access:* ~C-', C-,, <menu-bar> <Org> <File List for Agenda> <Cycle through agenda files>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-agenda-files&sr=1][Find modifications in git logs]]

: Cycle through the files in ‘org-agenda-files’.
: If the current buffer visits an agenda file, find the next one in the list.
: If the current buffer does not, find the first agenda file.
** org-move-item-up
   :PROPERTIES:
   :CUSTOM_ID: org-move-item-up
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-move-item-up&sr=1][Find modifications in git logs]]

: Move the item at point up, i.e. swap with previous item.
: Sub-items (items with larger indentation) are considered part of
: the item, so this really moves item trees.
** org-babel-load-in-session-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-babel-load-in-session-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-load-in-session-maybe&sr=1][Find modifications in git logs]]

: Conditionally load a source block in a session.
: Detect if this is context for a org-babel src-block and if so
: then run ‘org-babel-load-in-session’.
** org-entities-create-table
   :PROPERTIES:
   :CUSTOM_ID: org-entities-create-table
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-entities.el;hb=HEAD][org-entities.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-entities-create-table&sr=1][Find modifications in git logs]]

: Create an Org mode table with all entities.
** org-toggle-sticky-agenda =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-sticky-agenda
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-sticky-agenda&sr=1][Find modifications in git logs]]

: Toggle ‘org-agenda-sticky’.
** org-insert-columns-dblock
   :PROPERTIES:
   :CUSTOM_ID: org-insert-columns-dblock
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-columns-dblock&sr=1][Find modifications in git logs]]

: Create a dynamic block capturing a column view table.
** org-man-export-to-pdf =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-man-export-to-pdf
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-export-to-pdf&sr=1][Find modifications in git logs]]

: Export current buffer to Groff then process through to PDF.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write between
: markers.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return PDF file’s name.
** org-calendar-select-mouse =(ev)=
   :PROPERTIES:
   :CUSTOM_ID: org-calendar-select-mouse
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-calendar-select-mouse&sr=1][Find modifications in git logs]]

: Return to ‘org-read-date’ with the date currently selected.
: This is used by ‘org-read-date’ in a temporary keymap for the calendar buffer.
** org-babel-previous-src-block =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-previous-src-block
   :END:

- *Access:* ~C-c C-v C-p, C-c C-v p~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-previous-src-block&sr=1][Find modifications in git logs]]

: Jump to the previous source block.
: With optional prefix argument ARG, jump backward ARG many source blocks.
** org-edit-headline =(&optional heading)=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-headline
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-headline&sr=1][Find modifications in git logs]]

: Edit the current headline.
: Set it to HEADING when provided.
** org-indent-region =(start end)=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-region&sr=1][Find modifications in git logs]]

: Indent each non-blank line in the region.
: Called from a program, START and END specify the region to
: indent.  The function will not indent contents of example blocks,
: verse blocks and export blocks as leading white spaces are
: assumed to be significant there.
** org-paste-special =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-paste-special
   :END:

- *Access:* ~C-c C-x C-y, <menu-bar> <Org> <Edit Structure> <Paste Subtree>, <menu-bar> <Tbl> <Rectangle> <Paste Rectangle>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-paste-special&sr=1][Find modifications in git logs]]

: Paste rectangular region into table, or past subtree relative to level.
: Calls ‘org-table-paste-rectangle’ or ‘org-paste-subtree’, depending on context.
: See the individual commands for more information.
** org-toggle-fixed-width
   :PROPERTIES:
   :CUSTOM_ID: org-toggle-fixed-width
   :END:

- *Access:* ~C-c :~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-toggle-fixed-width&sr=1][Find modifications in git logs]]

: Toggle fixed-width markup.
: 
: Add or remove fixed-width markup on current line, whenever it
: makes sense.  Return an error otherwise.
: 
: If a region is active and if it contains only fixed-width areas
: or blank lines, remove all fixed-width markup in it.  If the
: region contains anything else, convert all non-fixed-width lines
: to fixed-width ones.
: 
: Blank lines at the end of the region are ignored unless the
: region only contains such lines.
** org-columns-show-value
   :PROPERTIES:
   :CUSTOM_ID: org-columns-show-value
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-show-value&sr=1][Find modifications in git logs]]

: Show the full value of the property.
** org-metaright =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-metaright
   :END:

- *Access:* ~<M-right>, <menu-bar> <Org> <Edit Structure> <Demote Heading>, <menu-bar> <Tbl> <Column> <Move Column Right>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metaright&sr=1][Find modifications in git logs]]

: Demote heading, list item at point or move table column right.
: 
: In front of a drawer or a block keyword, indent it correctly.
: 
: Calls ‘org-do-demote’, ‘org-indent-item’, ‘org-table-move-column’,
: ‘org-indent-drawer’ or ‘org-indent-block’ depending on context.
: With no specific context, calls the Emacs default ‘forward-word’.
: See the individual commands for more information.
: 
: This function runs the hook ‘org-metaright-hook’ as a first step,
: and returns at first non-nil value.
** org-mouse-insert-heading
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-insert-heading
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-insert-heading&sr=1][Find modifications in git logs]]

: Insert a new heading, as ‘org-insert-heading’.
: 
: If the point is at the :beginning (‘org-mouse-line-position’) of the line,
: insert the new heading before the current line.  Otherwise, insert it
: after the current heading.
** org-table-eval-formula =(&optional arg equation suppress-align suppress-const suppress-store suppress-analysis)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-eval-formula
   :END:

- *Access:* ~C-c =, <menu-bar> <Tbl> <Calculate> <Set Column Formula>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-eval-formula&sr=1][Find modifications in git logs]]

: Replace the table field value at the cursor by the result of a calculation.
: 
: In a table, this command replaces the value in the current field with the
: result of a formula.  It also installs the formula as the "current" column
: formula, by storing it in a special line below the table.  When called
: with a ‘C-u’ prefix the formula is installed as a field formula.
: 
: When called with a ‘C-u C-u’ prefix, insert the active equation for the field
: back into the current field, so that it can be edited there.  This is useful
: in order to use ‘C-c ?’ to check the referenced fields.
: 
: When called, the command first prompts for a formula, which is read in
: the minibuffer.  Previously entered formulas are available through the
: history list, and the last used formula is offered as a default.
: These stored formulas are adapted correctly when moving, inserting, or
: deleting columns with the corresponding commands.
: 
: The formula can be any algebraic expression understood by the Calc package.
: For details, see the Org mode manual.
: 
: This function can also be called from Lisp programs and offers
: additional arguments: EQUATION can be the formula to apply.  If this
: argument is given, the user will not be prompted.
: 
: SUPPRESS-ALIGN is used to speed-up recursive calls by by-passing
: unnecessary aligns.
: 
: SUPPRESS-CONST suppresses the interpretation of constants in the
: formula, assuming that this has been done already outside the
: function.
: 
: SUPPRESS-STORE means the formula should not be stored, either
: because it is already stored, or because it is a modified
: equation that should not overwrite the stored one.
: 
: SUPPRESS-ANALYSIS prevents analyzing the table and checking
: location of point.
** org-babel-remove-inline-result =(&optional datum)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-remove-inline-result
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-remove-inline-result&sr=1][Find modifications in git logs]]

: Remove the result of the current inline-src-block or babel call.
: The result must be wrapped in a ‘results’ macro to be removed.
: Leading white space is trimmed.
** org-babel-tangle-clean
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-clean
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-clean&sr=1][Find modifications in git logs]]

: Remove comments inserted by ‘org-babel-tangle’.
: Call this function inside of a source-code file generated by
: ‘org-babel-tangle’ to remove all comments inserted automatically
: by ‘org-babel-tangle’.  Warning, this comment removes any lines
: containing constructs which resemble Org file links or noweb
: references.
** org-table-copy-region =(beg end &optional cut)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-copy-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-copy-region&sr=1][Find modifications in git logs]]

: Copy rectangular region in table to clipboard.
: A special clipboard is used which can only be accessed
: with ‘org-table-paste-rectangle’.
** org-set-effort =(&optional value increment)=
   :PROPERTIES:
   :CUSTOM_ID: org-set-effort
   :END:

- *Access:* ~C-c C-x e~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-set-effort&sr=1][Find modifications in git logs]]

: Set the effort property of the current entry.
: With numerical prefix arg, use the nth allowed value, 0 stands for the
: 10th allowed value.
: 
: When INCREMENT is non-nil, set the property to the next allowed value.
** org-edit-table.el
   :PROPERTIES:
   :CUSTOM_ID: org-edit-table.el
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-table.el&sr=1][Find modifications in git logs]]

: Edit "table.el" table at point.
: 
: A new buffer is created and the table is copied into it.  Then
: the table is recognized with ‘table-recognize’.  When done
: editing, exit with ‘C-c '’.  The edited text will then replace
: the area in the Org mode buffer.
: 
: Throw an error when not at such a table.
** org-forward-heading-same-level =(arg &optional invisible-ok)=
   :PROPERTIES:
   :CUSTOM_ID: org-forward-heading-same-level
   :END:

- *Access:* ~C-c C-f, <menu-bar> <Org> <Navigate Headings> <Next Same Level>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-forward-heading-same-level&sr=1][Find modifications in git logs]]

: Move forward to the ARG’th subheading at same level as this one.
: Stop at the first and last subheadings of a superior heading.
: Normally this only looks at visible headings, but when INVISIBLE-OK is
: non-nil it will also look at invisible ones.
** org-lint--report-mode
   :PROPERTIES:
   :CUSTOM_ID: org-lint--report-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-lint.el;hb=HEAD][org-lint.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lint--report-mode&sr=1][Find modifications in git logs]]

: Major mode used to display reports emitted during linting.
: key             binding
: ---             -------
: 
: TAB .. C-j	org-lint--show-source
: RET		org-lint--jump-to-source
: ESC		Prefix Command
: SPC		scroll-up-command
: -		negative-argument
: 0 .. 9		digit-argument
: <		beginning-of-buffer
: >		end-of-buffer
: ?		describe-mode
: S		tabulated-list-sort
: g		revert-buffer
: h		org-lint--hide-checker
: i		org-lint--ignore-checker
: n		next-line
: p		previous-line
: q		quit-window
: DEL		scroll-down-command
: S-SPC		scroll-down-command
: <backtab>	backward-button
: <follow-link>	mouse-face
: <mouse-2>	mouse-select-window
: <remap>		Prefix Command
: 
: C-M-i		backward-button
: 
: 
: 
: In addition to any hooks its parent mode ‘tabulated-list-mode’ might have run,
: this mode runs the hook ‘org-lint--report-mode-hook’, as the final or penultimate step
: during initialization.
** org-mode-restart
   :PROPERTIES:
   :CUSTOM_ID: org-mode-restart
   :END:

- *Access:* ~<menu-bar> <Org> <Refresh/Reload> <Refresh setup current buffer>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mode-restart&sr=1][Find modifications in git logs]]


** org-agenda =(&optional arg org-keys restriction)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda
   :END:

- *Access:* ~<menu-bar> <Org> <Agenda Command...>, C-c a~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda&sr=1][Find modifications in git logs]]

: Dispatch agenda commands to collect entries to the agenda buffer.
: Prompts for a command to execute.  Any prefix arg will be passed
: on to the selected command.  The default selections are:
: 
: a     Call ‘org-agenda-list’ to display the agenda for current day or week.
: t     Call ‘org-todo-list’ to display the global todo list.
: T     Call ‘org-todo-list’ to display the global todo list, select only
:       entries with a specific TODO keyword (the user gets a prompt).
: m     Call ‘org-tags-view’ to display headlines with tags matching
:       a condition  (the user is prompted for the condition).
: M     Like ‘m’, but select only TODO entries, no ordinary headlines.
: e     Export views to associated files.
: s     Search entries for keywords.
: S     Search entries for keywords, only with TODO keywords.
: /     Multi occur across all agenda files and also files listed
:       in ‘org-agenda-text-search-extra-files’.
: <     Restrict agenda commands to buffer, subtree, or region.
:       Press several times to get the desired effect.
: >     Remove a previous restriction.
: #     List "stuck" projects.
: !     Configure what "stuck" means.
: C     Configure custom agenda commands.
: 
: More commands can be added by configuring the variable
: ‘org-agenda-custom-commands’.  In particular, specific tags and TODO keyword
: searches can be pre-defined in this way.
: 
: If the current buffer is in Org mode and visiting a file, you can also
: first press ‘<’ once to indicate that the agenda should be temporarily
: (until the next use of ‘C-c a’) restricted to the current file.
: Pressing ‘<’ twice means to restrict to the current subtree or region
: (if active).
** org-save-all-org-buffers
   :PROPERTIES:
   :CUSTOM_ID: org-save-all-org-buffers
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-save-all-org-buffers&sr=1][Find modifications in git logs]]

: Save all Org buffers without user confirmation.
** org-agenda-forward-block =(&optional backward)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-forward-block
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-forward-block&sr=1][Find modifications in git logs]]

: Move forward by one agenda block.
: When optional argument BACKWARD is set, go backward
** org-export-stack-refresh
   :PROPERTIES:
   :CUSTOM_ID: org-export-stack-refresh
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-stack-refresh&sr=1][Find modifications in git logs]]

: Refresh the export stack.
** orgstruct++-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: orgstruct++-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgstruct++-mode&sr=1][Find modifications in git logs]]

: Toggle ‘orgstruct-mode’, the enhanced version of it.
: In addition to setting orgstruct-mode, this also exports all
: indentation and autofilling variables from Org mode into the
: buffer.  It will also recognize item context in multiline items.
** org-mobile-create-sumo-agenda
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-create-sumo-agenda
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-create-sumo-agenda&sr=1][Find modifications in git logs]]

: Create a file that contains all custom agenda views.
** org-mouse-down-mouse =(event)=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-down-mouse
   :END:

- *Access:* ~<down-mouse-1>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-down-mouse&sr=1][Find modifications in git logs]]


** org-move-subtree-down =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-move-subtree-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-move-subtree-down&sr=1][Find modifications in git logs]]

: Move the current subtree down past ARG headlines of the same level.
** org-update-radio-target-regexp
   :PROPERTIES:
   :CUSTOM_ID: org-update-radio-target-regexp
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-update-radio-target-regexp&sr=1][Find modifications in git logs]]

: Find all radio targets in this file and update the regular expression.
: Also refresh fontification if needed.
** org-backward-heading-same-level =(arg &optional invisible-ok)=
   :PROPERTIES:
   :CUSTOM_ID: org-backward-heading-same-level
   :END:

- *Access:* ~C-c C-b, <menu-bar> <Org> <Navigate Headings> <Previous Same Level>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-backward-heading-same-level&sr=1][Find modifications in git logs]]

: Move backward to the ARG’th subheading at same level as this one.
: Stop at the first and last subheadings of a superior heading.
** org-capture-goto-target =(&optional template-key)=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-goto-target
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-goto-target&sr=1][Find modifications in git logs]]

: Go to the target location of a capture template.
: The user is queried for the template.
** org-table-recalculate =(&optional all noalign)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-recalculate
   :END:

- *Access:* ~<menu-bar> <Tbl> <Calculate> <Recalculate line>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-recalculate&sr=1][Find modifications in git logs]]

: Recalculate the current table line by applying all stored formulas.
: 
: With prefix arg ALL, do this for all lines in the table.
: 
: When called with a ‘C-u C-u’ prefix, or if ALL is the symbol ‘iterate’,
: recompute the table until it no longer changes.
: 
: If NOALIGN is not nil, do not re-align the table after the computations
: are done.  This is typically used internally to save time, if it is
: known that the table will be realigned a little later anyway.
** org-ctags-get-filename-for-tag =(tag)=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-get-filename-for-tag
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-get-filename-for-tag&sr=1][Find modifications in git logs]]

: TAG is a string.  Search the active TAGS file for a matching tag.
: If the tag is found, return a list containing the filename, line number, and
: buffer position where the tag is found.
** org-table-align
   :PROPERTIES:
   :CUSTOM_ID: org-table-align
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-align&sr=1][Find modifications in git logs]]

: Align the table at point by aligning all vertical bars.
** org-clock-timestamps-down =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-timestamps-down
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-timestamps-down&sr=1][Find modifications in git logs]]

: Increase CLOCK timestamps at cursor.
: Optional argument N tells to change by that many units.
** org-agenda-clock-cancel =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-clock-cancel
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-clock-cancel&sr=1][Find modifications in git logs]]

: Cancel the currently running clock.
** org-open-link-from-string =(s &optional arg reference-buffer)=
   :PROPERTIES:
   :CUSTOM_ID: org-open-link-from-string
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-link-from-string&sr=1][Find modifications in git logs]]

: Open a link in the string S, as if it was in Org mode.
** org-change-tag-in-region =(beg end tag off)=
   :PROPERTIES:
   :CUSTOM_ID: org-change-tag-in-region
   :END:

- *Access:* ~<menu-bar> <Org> <TAGS and Properties> <Change tag in region>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-change-tag-in-region&sr=1][Find modifications in git logs]]

: Add or remove TAG for each entry in the region.
: This works in the agenda, and also in an Org buffer.
** org-export-insert-default-template =(&optional backend subtreep)=
   :PROPERTIES:
   :CUSTOM_ID: org-export-insert-default-template
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-insert-default-template&sr=1][Find modifications in git logs]]

: Insert all export keywords with default values at beginning of line.
: 
: BACKEND is a symbol referring to the name of a registered export
: back-end, for which specific export options should be added to
: the template, or ‘default’ for default template.  When it is nil,
: the user will be prompted for a category.
: 
: If SUBTREEP is non-nil, export configuration will be set up
: locally for the subtree through node properties.
** org-delete-property =(property)=
   :PROPERTIES:
   :CUSTOM_ID: org-delete-property
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-delete-property&sr=1][Find modifications in git logs]]

: In the current entry, delete PROPERTY.
** org-require-autoloaded-modules
   :PROPERTIES:
   :CUSTOM_ID: org-require-autoloaded-modules
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-require-autoloaded-modules&sr=1][Find modifications in git logs]]


** org-table-fedit-toggle-ref-type
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-toggle-ref-type
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-toggle-ref-type&sr=1][Find modifications in git logs]]

: Convert all references in the buffer from B3 to @3$2 and back.
** org-agenda-todo =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo&sr=1][Find modifications in git logs]]

: Cycle TODO state of line at point, also in Org file.
: This changes the line at point, all other lines in the agenda referring to
: the same tree node, and the headline of the tree node in the Org file.
** org-table-hline-and-move =(&optional same-column)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-hline-and-move
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-hline-and-move&sr=1][Find modifications in git logs]]

: Insert a hline and move to the row below that line.
** org-babel-switch-to-session-with-code =(&optional arg _info)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-switch-to-session-with-code
   :END:

- *Access:* ~C-c C-v z~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-switch-to-session-with-code&sr=1][Find modifications in git logs]]

: Switch to code buffer and display session.
** org-table-insert-column
   :PROPERTIES:
   :CUSTOM_ID: org-table-insert-column
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-insert-column&sr=1][Find modifications in git logs]]

: Insert a new column into the table.
** org-archive-subtree-default
   :PROPERTIES:
   :CUSTOM_ID: org-archive-subtree-default
   :END:

- *Access:* ~C-c C-x C-a, <menu-bar> <Org> <Archive> <Archive (default method)>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-subtree-default&sr=1][Find modifications in git logs]]

: Archive the current subtree with the default command.
: This command is set with the variable ‘org-archive-default-command’.
** org-id-goto =(id)=
   :PROPERTIES:
   :CUSTOM_ID: org-id-goto
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-goto&sr=1][Find modifications in git logs]]

: Switch to the buffer containing the entry with id ID.
: Move the cursor to that entry in that buffer.
** org-capture-import-remember-templates
   :PROPERTIES:
   :CUSTOM_ID: org-capture-import-remember-templates
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-import-remember-templates&sr=1][Find modifications in git logs]]

: Set ‘org-capture-templates’ to be similar to ‘org-remember-templates’.
** org-columns-new =(&optional spec &rest attributes)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-new
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-new&sr=1][Find modifications in git logs]]

: Insert a new column, to the left of the current column.
: Interactively fill attributes for new column.  When column format
: specification SPEC is provided, edit it instead.
: 
: When optional argument attributes can be a list of columns
: specifications attributes to create the new column
: non-interactively.  See ‘org-columns-compile-format’ for
: details.
** org-edit-inline-src-code
   :PROPERTIES:
   :CUSTOM_ID: org-edit-inline-src-code
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-inline-src-code&sr=1][Find modifications in git logs]]

: Edit inline source code at point.
** org-list-send-list =(&optional maybe)=
   :PROPERTIES:
   :CUSTOM_ID: org-list-send-list
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-send-list&sr=1][Find modifications in git logs]]

: Send a transformed version of this list to the receiver position.
: With argument MAYBE, fail quietly if no transformation is defined
: for this list.
** org-insert-last-stored-link =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-last-stored-link
   :END:

- *Access:* ~C-c M-l~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-last-stored-link&sr=1][Find modifications in git logs]]

: Insert the last link stored in ‘org-stored-links’.
** org-babel-mark-block
   :PROPERTIES:
   :CUSTOM_ID: org-babel-mark-block
   :END:

- *Access:* ~C-c C-v C-M-h~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-mark-block&sr=1][Find modifications in git logs]]

: Mark current src block.
** org-babel-describe-bindings
   :PROPERTIES:
   :CUSTOM_ID: org-babel-describe-bindings
   :END:

- *Access:* ~C-c C-v h~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-keys.el;hb=HEAD][ob-keys.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-describe-bindings&sr=1][Find modifications in git logs]]

: Describe all keybindings behind ‘org-babel-key-prefix’.
** org-forward-sentence =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-forward-sentence
   :END:

- *Access:* ~M-e~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-forward-sentence&sr=1][Find modifications in git logs]]

: Go to end of sentence, or end of table field.
: This will call ‘forward-sentence’ or ‘org-table-end-of-field’,
: depending on context.
** org-table-follow-field-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-follow-field-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-follow-field-mode&sr=1][Find modifications in git logs]]

: Minor mode to make the table field editor window follow the cursor.
: When this mode is active, the field editor window will always show the
: current field.  The mode exits automatically when the cursor leaves the
: table (but see ‘org-table-exit-follow-field-mode-when-leaving-table’).
** org-mark-ring-goto =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-mark-ring-goto
   :END:

- *Access:* ~C-c &~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mark-ring-goto&sr=1][Find modifications in git logs]]

: Jump to the previous position in the mark ring.
: With prefix arg N, jump back that many stored positions.  When
: called several times in succession, walk through the entire ring.
: Org mode commands jumping to a different position in the current file,
: or to another Org file, automatically push the old position onto the ring.
** org-table-iterate =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-iterate
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-iterate&sr=1][Find modifications in git logs]]

: Recalculate the table until it does not change anymore.
: The maximum number of iterations is 10, but you can choose a different value
: with the prefix ARG.
** org-agenda-week-view =(&optional iso-week)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-week-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-week-view&sr=1][Find modifications in git logs]]

: Switch to weekly view for agenda.
: With argument ISO-WEEK, switch to the corresponding ISO week.
: If ISO-WEEK has more then 2 digits, only the last two encode
: the week.  Any digits before this encode a year.  So 200712
: means week 12 of year 2007.  Years ranging from 70 years ago
: to 30 years in the future can also be written as 2-digit years.
** org-deadline =(arg &optional time)=
   :PROPERTIES:
   :CUSTOM_ID: org-deadline
   :END:

- *Access:* ~C-c C-d, <menu-bar> <Org> <Dates and Scheduling> <Deadline>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-deadline&sr=1][Find modifications in git logs]]

: Insert the "DEADLINE:" string with a timestamp to make a deadline.
: With one universal prefix argument, remove any deadline from the item.
: With two universal prefix arguments, prompt for a warning delay.
: With argument TIME, set the deadline at the corresponding date.  TIME
: can either be an Org date like "2011-07-24" or a delta like "+2d".
** org-priority =(&optional action _show)=
   :PROPERTIES:
   :CUSTOM_ID: org-priority
   :END:

- *Access:* ~C-c ,, <menu-bar> <Org> <TODO Lists> <Set Priority>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-priority&sr=1][Find modifications in git logs]]

: Change the priority of an item.
: ACTION can be ‘set’, ‘up’, ‘down’, or a character.
** org-agenda-file-to-front =(&optional to-end)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-file-to-front
   :END:

- *Access:* ~C-c [, <menu-bar> <Org> <File List for Agenda> <Add/Move Current File to Front of List>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-file-to-front&sr=1][Find modifications in git logs]]

: Move/add the current file to the top of the agenda file list.
: If the file is not present in the list, it is added to the front.  If it is
: present, it is moved there.  With optional argument TO-END, add/move to the
: end of the list.
** org-babel-expand-src-block-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-babel-expand-src-block-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-expand-src-block-maybe&sr=1][Find modifications in git logs]]

: Conditionally expand a source block.
: Detect if this is context for a org-babel src-block and if so
: then run ‘org-babel-expand-src-block’.
** org-mouse-remove-match-and-spaces
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-remove-match-and-spaces
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-remove-match-and-spaces&sr=1][Find modifications in git logs]]

: Remove the match, make just one space around the point.
** org-comment-dwim =(_arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-comment-dwim
   :END:

- *Access:* ~M-;~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-comment-dwim&sr=1][Find modifications in git logs]]

: Call ‘comment-dwim’ within a source edit buffer if needed.
** org-beamer-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-mode&sr=1][Find modifications in git logs]]

: Support for editing Beamer oriented Org mode files.
** org-odt-export-as-odf-and-open
   :PROPERTIES:
   :CUSTOM_ID: org-odt-export-as-odf-and-open
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-export-as-odf-and-open&sr=1][Find modifications in git logs]]

: Export LaTeX fragment as OpenDocument formula and immediately open it.
: Use ‘org-odt-export-as-odf’ to read LaTeX fragment and OpenDocument
: formula file.
** org-archive-subtree =(&optional find-done)=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-subtree
   :END:

- *Access:* ~C-c $, C-c C-x C-s, <menu-bar> <Org> <Archive> <Move Subtree to Archive file>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-subtree&sr=1][Find modifications in git logs]]

: Move the current subtree to the archive.
: The archive can be a certain top-level heading in the current
: file, or in a different file.  The tree will be moved to that
: location, the subtree heading be marked DONE, and the current
: time will be added.
: 
: When called with a single prefix argument FIND-DONE, find whole
: trees without any open TODO items and archive them (after getting
: confirmation from the user).  When called with a double prefix
: argument, find whole trees with timestamps before today and
: archive them (after getting confirmation from the user).  If the
: cursor is not at a headline when these commands are called, try
: all level 1 trees.  If the cursor is on a headline, only try the
: direct children of this heading.
** org-capture-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-mode&sr=1][Find modifications in git logs]]

: Minor mode for special key bindings in a capture buffer.
: 
: Turning on this mode runs the normal hook ‘org-capture-mode-hook’.
** org-table-edit-field =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-edit-field
   :END:

- *Access:* ~C-c `, <menu-bar> <Tbl> <Edit Field>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-edit-field&sr=1][Find modifications in git logs]]

: Edit table field in a different window.
: This is mainly useful for fields that contain hidden parts.
: 
: When called with a ‘C-u’ prefix, just make the full field
: visible so that it can be edited in place.
: 
: When called with a ‘C-u C-u’ prefix, toggle ‘org-table-follow-field-mode’.
** org-mouse-end-headline
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-end-headline
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-end-headline&sr=1][Find modifications in git logs]]

: Go to the end of current headline (ignoring tags).
** org-babel-exp-process-buffer
   :PROPERTIES:
   :CUSTOM_ID: org-babel-exp-process-buffer
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-exp.el;hb=HEAD][ob-exp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-exp-process-buffer&sr=1][Find modifications in git logs]]

: Execute all Babel blocks in current buffer.
** org-entities-help
   :PROPERTIES:
   :CUSTOM_ID: org-entities-help
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-entities.el;hb=HEAD][org-entities.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-entities-help&sr=1][Find modifications in git logs]]

: Create a Help buffer with all available entities.
** org-first-sibling-p
   :PROPERTIES:
   :CUSTOM_ID: org-first-sibling-p
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-first-sibling-p&sr=1][Find modifications in git logs]]

: Is this heading the first child of its parents?
** org-activate-angle-links =(&rest ignore)=
   :PROPERTIES:
   :CUSTOM_ID: org-activate-angle-links
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-activate-angle-links&sr=1][Find modifications in git logs]]

: Do nothing and return nil.
: This function accepts any number of arguments, but ignores them.
: 
: (fn &rest IGNORE)
** org-open-at-mouse =(ev)=
   :PROPERTIES:
   :CUSTOM_ID: org-open-at-mouse
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-at-mouse&sr=1][Find modifications in git logs]]

: Open file link or URL at mouse.
: See the docstring of ‘org-open-file’ for details.
** org-check-dates-range =(start-date end-date)=
   :PROPERTIES:
   :CUSTOM_ID: org-check-dates-range
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-check-dates-range&sr=1][Find modifications in git logs]]

: Check for deadlines/scheduled entries between START-DATE and END-DATE.
** org-list-insert-radio-list
   :PROPERTIES:
   :CUSTOM_ID: org-list-insert-radio-list
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-insert-radio-list&sr=1][Find modifications in git logs]]

: Insert a radio list template appropriate for this major mode.
** org-kill-note-or-show-branches
   :PROPERTIES:
   :CUSTOM_ID: org-kill-note-or-show-branches
   :END:

- *Access:* ~C-c C-k~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-kill-note-or-show-branches&sr=1][Find modifications in git logs]]

: Abort storing current note, or call ‘outline-show-branches’.
** org-outdent-item-tree
   :PROPERTIES:
   :CUSTOM_ID: org-outdent-item-tree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-outdent-item-tree&sr=1][Find modifications in git logs]]

: Outdent a local list item including its children.
: If a region is active, all items inside will be moved.
** org-agenda-set-restriction-lock-from-agenda =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-set-restriction-lock-from-agenda
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-set-restriction-lock-from-agenda&sr=1][Find modifications in git logs]]

: Set the restriction lock to the agenda item at point from within the agenda.
: When called with a ‘C-u’ prefix, restrict to
: the file which contains the item.
: Argument ARG is the prefix argument.
** org-attach-open =(&optional in-emacs)=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-open
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-open&sr=1][Find modifications in git logs]]

: Open an attachment of the current task.
: If there are more than one attachment, you will be prompted for the file name.
: This command will open the file using the settings in ‘org-file-apps’
: and in the system-specific variants of this variable.
: If IN-EMACS is non-nil, force opening in Emacs.
** org-agenda-append-agenda
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-append-agenda
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-append-agenda&sr=1][Find modifications in git logs]]

: Append another agenda view to the current one.
: This function allows interactive building of block agendas.
: Agenda views are separated by ‘org-agenda-block-separator’.
** org-table-beginning-of-field =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-beginning-of-field
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-beginning-of-field&sr=1][Find modifications in git logs]]

: Move to the beginning of the current table field.
: If already at or before the beginning, move to the beginning of the
: previous field.
: With numeric argument N, move N-1 fields backward first.
** org-mobile-move-capture
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-move-capture
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-move-capture&sr=1][Find modifications in git logs]]

: Move the contents of the capture file to the inbox file.
: Return a marker to the location where the new content has been added.
: If nothing new has been added, return nil.
** org-lint =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-lint
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-lint.el;hb=HEAD][org-lint.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lint&sr=1][Find modifications in git logs]]

: Check current Org buffer for syntax mistakes.
: 
: By default, run all checkers.  With a ‘C-u’ prefix ARG, select one
: category of checkers only.  With a ‘C-u C-u’ prefix, run one precise
: checker by its name.
: 
: ARG can also be a list of checker names, as symbols, to run.
** org-latex-export-to-latex =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-export-to-latex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-export-to-latex&sr=1][Find modifications in git logs]]

: Export current buffer to a LaTeX file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{document}" and "\end{document}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
** org-agenda-fortnight-view =(&optional iso-week)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-fortnight-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-fortnight-view&sr=1][Find modifications in git logs]]

: Switch to fortnightly view for agenda.
: With argument ISO-WEEK, switch to the corresponding ISO week.
: If ISO-WEEK has more then 2 digits, only the last two encode
: the week.  Any digits before this encode a year.  So 200712
: means week 12 of year 2007.  Years ranging from 70 years ago
: to 30 years in the future can also be written as 2-digit years.
** org-todo-yesterday =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-yesterday
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-yesterday&sr=1][Find modifications in git logs]]

: Like ‘org-todo’ but the time of change will be 23:59 of yesterday.
** org-sort =(&optional with-case)=
   :PROPERTIES:
   :CUSTOM_ID: org-sort
   :END:

- *Access:* ~C-c ^, <menu-bar> <Org> <Edit Structure> <Sort Region/Children>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sort&sr=1][Find modifications in git logs]]

: Call ‘org-sort-entries’, ‘org-table-sort-lines’ or ‘org-sort-list’.
: Optional argument WITH-CASE means sort case-sensitively.
** orgtbl-create-or-convert-from-region =(_arg)=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-create-or-convert-from-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-create-or-convert-from-region&sr=1][Find modifications in git logs]]

: Create table or convert region to table, if no conflicting binding.
: This installs the table binding ‘C-c |’, but only if there is no
: conflicting binding to this key outside orgtbl-mode.
** org-up-element
   :PROPERTIES:
   :CUSTOM_ID: org-up-element
   :END:

- *Access:* ~C-c C-^~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-up-element&sr=1][Find modifications in git logs]]

: Move to upper element.
** org-footnote-action =(&optional special)=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-action
   :END:

- *Access:* ~C-c C-x f, <menu-bar> <Org> <Editing> <Footnote new/jump>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-action&sr=1][Find modifications in git logs]]

: Do the right thing for footnotes.
: 
: When at a footnote reference, jump to the definition.
: 
: When at a definition, jump to the references if they exist, offer
: to create them otherwise.
: 
: When neither at definition or reference, create a new footnote,
: interactively if possible.
: 
: With prefix arg SPECIAL, or when no footnote can be created,
: offer additional commands in a menu.
** org-texinfo-convert-region-to-texinfo
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-convert-region-to-texinfo
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-convert-region-to-texinfo&sr=1][Find modifications in git logs]]

: Assume the current region has Org syntax, and convert it to Texinfo.
: This can be used in any buffer.  For example, you can write an
: itemized list in Org syntax in an Texinfo buffer and use this
: command to convert it.
** org-agenda-tree-to-indirect-buffer =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-tree-to-indirect-buffer
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-tree-to-indirect-buffer&sr=1][Find modifications in git logs]]

: Show the subtree corresponding to the current entry in an indirect buffer.
: This calls the command ‘org-tree-to-indirect-buffer’ from the original buffer.
: 
: With a numerical prefix ARG, go up to this level and then take that tree.
: With a negative numeric ARG, go up by this number of levels.
: 
: With a ‘C-u’ prefix, make a separate frame for this tree, i.e. don’t use
: the dedicated frame.
** org-edit-src-exit
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-exit
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-exit&sr=1][Find modifications in git logs]]

: Kill current sub-editing buffer and return to source buffer.
** org-bibtex-create-in-current-entry =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-create-in-current-entry
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-create-in-current-entry&sr=1][Find modifications in git logs]]

: Add bibliographical data to the current entry.
: With a prefix arg, query for optional fields.
** org-agenda-bulk-remove-overlays =(&optional beg end)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-remove-overlays
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-remove-overlays&sr=1][Find modifications in git logs]]

: Remove the mark overlays between BEG and END in the agenda buffer.
: BEG and END default to the buffer limits.
: 
: This only removes the overlays, it does not remove the markers
: from the list in ‘org-agenda-bulk-marked-entries’.
** org-mouse-yank-link =(click)=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-yank-link
   :END:

- *Access:* ~<drag-mouse-3>, <S-mouse-2>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-yank-link&sr=1][Find modifications in git logs]]


** org-metaleft =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-metaleft
   :END:

- *Access:* ~<M-left>, <menu-bar> <Org> <Edit Structure> <Promote Heading>, <menu-bar> <Tbl> <Column> <Move Column Left>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metaleft&sr=1][Find modifications in git logs]]

: Promote heading, list item at point or move table column left.
: 
: Calls ‘org-do-promote’, ‘org-outdent-item’ or ‘org-table-move-column’,
: depending on context.  With no specific context, calls the Emacs
: default ‘backward-word’.  See the individual commands for more
: information.
: 
: This function runs the hook ‘org-metaleft-hook’ as a first step,
: and returns at first non-nil value.
** org-attach-new =(file)=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-new
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-new&sr=1][Find modifications in git logs]]

: Create a new attachment FILE for the current task.
: The attachment is created as an Emacs buffer.
** org-tbl-menu =(event)=
   :PROPERTIES:
   :CUSTOM_ID: org-tbl-menu
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tbl-menu&sr=1][Find modifications in git logs]]

: Tbl menu
** org-agenda-filter-by-category =(strip)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-filter-by-category
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-filter-by-category&sr=1][Find modifications in git logs]]

: Filter lines in the agenda buffer that have a specific category.
: The category is that of the current line.
: Without prefix argument, keep only the lines of that category.
: With a prefix argument, exclude the lines of that category.
: 
** org-indent-drawer
   :PROPERTIES:
   :CUSTOM_ID: org-indent-drawer
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-drawer&sr=1][Find modifications in git logs]]

: Indent the drawer at point.
** org-agenda-filter-by-tag =(arg &optional char exclude)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-filter-by-tag
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-filter-by-tag&sr=1][Find modifications in git logs]]

: Keep only those lines in the agenda buffer that have a specific tag.
: 
: The tag is selected with its fast selection letter, as configured.
: 
: With a ‘C-u’ prefix, exclude the agenda search.
: 
: With a ‘C-u C-u’ prefix, filter the literal tag, i.e. don’t
: filter on all its group members.
: 
: A lisp caller can specify CHAR.  EXCLUDE means that the new tag
: should be used to exclude the search - the interactive user can
: also press ‘-’ or ‘+’ to switch between filtering and excluding.
** org-babel-execute-buffer =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-execute-buffer
   :END:

- *Access:* ~C-c C-v b, C-c C-v C-b~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-execute-buffer&sr=1][Find modifications in git logs]]

: Execute source code blocks in a buffer.
: Call ‘org-babel-execute-src-block’ on every source block in
: the current buffer.
** org-table-toggle-coordinate-overlays
   :PROPERTIES:
   :CUSTOM_ID: org-table-toggle-coordinate-overlays
   :END:

- *Access:* ~C-c }, <menu-bar> <Tbl> <Show Col/Row Numbers>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-toggle-coordinate-overlays&sr=1][Find modifications in git logs]]

: Toggle the display of Row/Column numbers in tables.
** org-agenda-follow-mode
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-follow-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-follow-mode&sr=1][Find modifications in git logs]]

: Toggle follow mode in an agenda buffer.
** org-html-export-to-html =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-html-export-to-html
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-export-to-html&sr=1][Find modifications in git logs]]

: Export current buffer to a HTML file.
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "<body>" and "</body>" tags.
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return output file’s name.
** org-metadown =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-metadown
   :END:

- *Access:* ~<M-down>, <menu-bar> <Org> <Edit Structure> <Move Subtree Down>, <menu-bar> <Tbl> <Row> <Move Row Down>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-metadown&sr=1][Find modifications in git logs]]

: Move subtree down or move table row down.
: Calls ‘org-move-subtree-down’ or ‘org-table-move-row’ or
: ‘org-move-item-down’, depending on context.  See the individual
: commands for more information.
** org-agenda-clock-out
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-clock-out
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-clock-out&sr=1][Find modifications in git logs]]

: Stop the currently running clock.
** org-get-tags-at =(&optional pos local)=
   :PROPERTIES:
   :CUSTOM_ID: org-get-tags-at
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-get-tags-at&sr=1][Find modifications in git logs]]

: Get a list of all headline tags applicable at POS.
: POS defaults to point.  If tags are inherited, the list contains
: the targets in the same sequence as the headlines appear, i.e.
: the tags of the current headline come last.
: When LOCAL is non-nil, only return tags from the current headline,
: ignore inherited ones.
** org-agenda-do-date-later =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-do-date-later
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-do-date-later&sr=1][Find modifications in git logs]]


** org-inlinetask-demote
   :PROPERTIES:
   :CUSTOM_ID: org-inlinetask-demote
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-inlinetask.el;hb=HEAD][org-inlinetask.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-inlinetask-demote&sr=1][Find modifications in git logs]]

: Demote the inline task at point.
: If the task has an end part, also demote it.
** org-cdlatex-environment-indent =(&optional environment item)=
   :PROPERTIES:
   :CUSTOM_ID: org-cdlatex-environment-indent
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cdlatex-environment-indent&sr=1][Find modifications in git logs]]

: Execute ‘cdlatex-environment’ and indent the inserted environment.
: 
: ENVIRONMENT and ITEM are passed to ‘cdlatex-environment’.
: 
: The inserted environment is indented to current indentation
: unless point is at the beginning of the line, in which the
: environment remains unintended.
** org-reload =(&optional uncompiled)=
   :PROPERTIES:
   :CUSTOM_ID: org-reload
   :END:

- *Access:* ~C-c C-x !, <menu-bar> <Org> <Refresh/Reload> <Reload Org (after update)>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-reload&sr=1][Find modifications in git logs]]

: Reload all org lisp files.
: With prefix arg UNCOMPILED, load the uncompiled versions.
** org-insert-heading-after-current
   :PROPERTIES:
   :CUSTOM_ID: org-insert-heading-after-current
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-heading-after-current&sr=1][Find modifications in git logs]]

: Insert a new heading with same level as current, after current subtree.
** org-agenda-exit
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-exit
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-exit&sr=1][Find modifications in git logs]]

: Exit the agenda, killing Org buffers loaded by the agenda.
: Like ‘org-agenda-Quit’, but kill any buffers that were created by
: the agenda.  Org buffers visited directly by the user will not be
: touched.  Also, exit the agenda even if it is in column view.
** org-babel-pop-to-session =(&optional arg info)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-pop-to-session
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-pop-to-session&sr=1][Find modifications in git logs]]

: Switch to the session of the current code block.
: Uses ‘org-babel-initiate-session’ to start the session.  If called
: with a prefix argument then this is passed on to
: ‘org-babel-initiate-session’.
** org-align-all-tags
   :PROPERTIES:
   :CUSTOM_ID: org-align-all-tags
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-align-all-tags&sr=1][Find modifications in git logs]]

: Align the tags in all headings.
** org-insert-all-links =(arg &optional pre post)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-all-links
   :END:

- *Access:* ~C-c C-M-l~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-all-links&sr=1][Find modifications in git logs]]

: Insert all links in ‘org-stored-links’.
: When a universal prefix, do not delete the links from ‘org-stored-links’.
: When ‘ARG’ is a number, insert the last N link(s).
: ‘PRE’ and ‘POST’ are optional arguments to define a string to
: prepend or to append.
** org-clone-subtree-with-time-shift =(n &optional shift)=
   :PROPERTIES:
   :CUSTOM_ID: org-clone-subtree-with-time-shift
   :END:

- *Access:* ~C-c C-x c, <menu-bar> <Org> <Edit Structure> <Clone subtree, shift time>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clone-subtree-with-time-shift&sr=1][Find modifications in git logs]]

: Clone the task (subtree) at point N times.
: The clones will be inserted as siblings.
: 
: In interactive use, the user will be prompted for the number of
: clones to be produced.  If the entry has a timestamp, the user
: will also be prompted for a time shift, which may be a repeater
: as used in time stamps, for example ‘+3d’.  To disable this,
: you can call the function with a universal prefix argument.
: 
: When a valid repeater is given and the entry contains any time
: stamps, the clones will become a sequence in time, with time
: stamps in the subtree shifted for each clone produced.  If SHIFT
: is nil or the empty string, time stamps will be left alone.  The
: ID property of the original subtree is removed.
: 
: In each clone, all the CLOCK entries will be removed.  This
: prevents Org from considering that the clocked times overlap.
: 
: If the original subtree did contain time stamps with a repeater,
: the following will happen:
: - the repeater will be removed in each clone
: - an additional clone will be produced, with the current, unshifted
:   date(s) in the entry.
: - the original entry will be placed *after* all the clones, with
:   repeater intact.
: - the start days in the repeater in the original entry will be shifted
:   to past the last clone.
: In this way you can spell out a number of instances of a repeating task,
: and still retain the repeater to cover future instances of the task.
: 
: As described above, N+1 clones are produced when the original
: subtree has a repeater.  Setting N to 0, then, can be used to
: remove the repeater from a subtree and create a shifted clone
: with the original repeater.
** org-narrow-to-block
   :PROPERTIES:
   :CUSTOM_ID: org-narrow-to-block
   :END:

- *Access:* ~C-x n b~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-narrow-to-block&sr=1][Find modifications in git logs]]

: Narrow buffer to the current block.
** org-columns-get-format =(&optional fmt-string)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-get-format
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-get-format&sr=1][Find modifications in git logs]]

: Return columns format specifications.
: When optional argument FMT-STRING is non-nil, use it as the
: current specifications.  This function also sets
: ‘org-columns-current-fmt-compiled’ and
: ‘org-columns-current-fmt’.
** org-agenda-mode
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-mode&sr=1][Find modifications in git logs]]

: Mode for time-sorted view on action items in Org files.
: 
: The following commands are available:
: 
: key             binding
: ---             -------
: 
: C-c		Prefix Command
: TAB		org-agenda-goto
: C-k		org-agenda-kill
: RET		org-agenda-switch-to
: C-n		org-agenda-next-line
: C-p		org-agenda-previous-line
: C-x		Prefix Command
: ESC		Prefix Command
: C-_		org-agenda-undo
: SPC		org-agenda-show-and-scroll-up
: !		org-agenda-toggle-deadlines
: #		org-agenda-dim-blocked-tasks
: $		org-agenda-archive
: %		org-agenda-bulk-mark-regexp
: *		org-agenda-bulk-mark-all
: +		org-agenda-priority-up
: ,		org-agenda-priority
: -		org-agenda-priority-down
: .		org-agenda-goto-today
: /		org-agenda-filter-by-tag
: 0 .. 9		digit-argument
: :		org-agenda-set-tags
: ;		org-timer-set-timer
: <		org-agenda-filter-by-category
: =		org-agenda-filter-by-regexp
: >		org-agenda-date-prompt
: ?		org-agenda-show-the-flagging-note
: A		org-agenda-append-agenda
: B		org-agenda-bulk-action
: C		org-agenda-convert-date
: D		org-agenda-toggle-diary
: E		org-agenda-entry-text-mode
: F		org-agenda-follow-mode
: G		org-agenda-toggle-time-grid
: H		org-agenda-holidays
: I		org-agenda-clock-in
: J		org-agenda-clock-goto
: K		org-habit-toggle-habits
: L		org-agenda-recenter
: M		org-agenda-phases-of-moon
: N		org-agenda-next-item
: O		org-agenda-clock-out
: P		org-agenda-previous-item
: Q		org-agenda-Quit
: R		org-agenda-clockreport-mode
: S		org-agenda-sunrise-sunset
: T		org-agenda-show-tags
: U		org-agenda-bulk-unmark-all
: X		org-agenda-clock-cancel
: [		org-agenda-manipulate-query-add
: ]		org-agenda-manipulate-query-subtract
: ^		org-agenda-filter-by-top-headline
: _		org-agenda-filter-by-effort
: a		org-agenda-archive-default-with-confirmation
: b		org-agenda-earlier
: c		org-agenda-goto-calendar
: d		org-agenda-day-view
: e		org-agenda-set-effort
: f		org-agenda-later
: g		org-agenda-redo-all
: h		org-agenda-holidays
: i		org-agenda-diary-entry
: j		org-agenda-goto-date
: k		org-agenda-capture
: l		org-agenda-log-mode
: m		org-agenda-bulk-mark
: n		org-agenda-next-line
: o		delete-other-windows
: p		org-agenda-previous-line
: q		org-agenda-quit
: r		org-agenda-redo
: s		org-save-all-org-buffers
: t		org-agenda-todo
: u		org-agenda-bulk-unmark
: v		org-agenda-view-mode-dispatch
: w		org-agenda-week-view
: x		org-agenda-exit
: y		org-agenda-year-view
: z		org-agenda-add-note
: {		org-agenda-manipulate-query-add-re
: |		org-agenda-filter-remove-all
: }		org-agenda-manipulate-query-subtract-re
: ~		org-agenda-limit-interactively
: DEL		org-agenda-show-scroll-down
: C-/		org-agenda-undo
: <C-S-left>	org-agenda-todo-previousset
: <C-S-right>	org-agenda-todo-nextset
: <M-down>	org-agenda-drag-line-forward
: <M-up>		org-agenda-drag-line-backward
: <S-down>	org-agenda-priority-down
: <S-left>	org-agenda-do-date-earlier
: <S-right>	org-agenda-do-date-later
: <S-up>		org-agenda-priority-up
: <backspace>	org-agenda-show-scroll-down
: <down>		org-agenda-next-line
: <mouse-2>	org-agenda-goto-mouse
: <mouse-3>	org-agenda-show-mouse
: <remap>		Prefix Command
: <tab>		org-agenda-goto
: <undo>		org-agenda-undo
: <up>		org-agenda-previous-line
: 
: <remap> <backward-paragraph>	org-agenda-backward-block
: <remap> <forward-paragraph>	org-agenda-forward-block
: 
: M-*		org-agenda-bulk-toggle-all
: M-m		org-agenda-bulk-toggle
: 
: C-c C-a		org-attach
: C-c C-d		org-agenda-deadline
: C-c C-n		org-agenda-next-date-line
: C-c C-o		org-agenda-open-link
: C-c C-p		org-agenda-previous-date-line
: C-c C-q		org-agenda-set-tags
: C-c C-s		org-agenda-schedule
: C-c C-t		org-agenda-todo
: C-c C-w		org-agenda-refile
: C-c C-x		Prefix Command
: C-c C-z		org-agenda-add-note
: C-c $		org-agenda-archive
: C-c ,		org-agenda-priority
: 
: C-x C-s		org-save-all-org-buffers
: C-x C-w		org-agenda-write
: C-x u		org-agenda-undo
: 
: C-c C-x C-a	org-agenda-archive-default
: C-c C-x C-c	org-agenda-columns
: C-c C-x C-e	org-clock-modify-effort-estimate
: C-c C-x TAB	org-agenda-clock-in
: C-c C-x C-j	org-clock-goto
: C-c C-x RET	Prefix Command
: C-c C-x C-o	org-agenda-clock-out
: C-c C-x C-s	org-agenda-archive
: C-c C-x C-x	org-agenda-clock-cancel
: C-c C-x !	org-reload
: C-c C-x <	org-agenda-set-restriction-lock-from-agenda
: C-c C-x >	org-agenda-remove-restriction-lock
: C-c C-x A	org-agenda-archive-to-archive-sibling
: C-c C-x a	org-agenda-toggle-archive-tag
: C-c C-x b	org-agenda-tree-to-indirect-buffer
: C-c C-x e	org-agenda-set-effort
: C-c C-x p	org-agenda-set-property
: C-c C-x <down>	org-agenda-priority-down
: C-c C-x <left>	org-agenda-do-date-earlier
: C-c C-x <right>			org-agenda-do-date-later
: C-c C-x <up>			org-agenda-priority-up
: 
: C-c C-x RET g	org-mobile-pull
: C-c C-x RET p	org-mobile-push
: 
: 
** org-cycle =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle
   :END:

- *Access:* ~<tab>, TAB, <menu-bar> <Tbl> <Next Field>, <menu-bar> <Org> <Show/Hide> <Cycle Visibility>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle&sr=1][Find modifications in git logs]]

: TAB-action and visibility cycling for Org mode.
: 
: This is the command invoked in Org mode by the ‘TAB’ key.  Its main
: purpose is outline visibility cycling, but it also invokes other actions
: in special contexts.
: 
: When this function is called with a ‘C-u’ prefix, rotate the entire
: buffer through 3 states (global cycling)
:   1. OVERVIEW: Show only top-level headlines.
:   2. CONTENTS: Show all headlines of all levels, but no body text.
:   3. SHOW ALL: Show everything.
: 
: With a ‘C-u C-u’ prefix argument, switch to the startup visibility,
: determined by the variable ‘org-startup-folded’, and by any VISIBILITY
: properties in the buffer.
: 
: With a ‘C-u C-u C-u’ prefix argument, show the entire buffer, including
: any drawers.
: 
: When inside a table, re-align the table and move to the next field.
: 
: When point is at the beginning of a headline, rotate the subtree started
: by this line through 3 different states (local cycling)
:   1. FOLDED:   Only the main headline is shown.
:   2. CHILDREN: The main headline and the direct children are shown.
:                From this state, you can move to one of the children
:                and zoom in further.
:   3. SUBTREE:  Show the entire subtree, including body text.
: If there is no subtree, switch directly from CHILDREN to FOLDED.
: 
: When point is at the beginning of an empty headline and the variable
: ‘org-cycle-level-after-item/entry-creation’ is set, cycle the level
: of the headline by demoting and promoting it to likely levels.  This
: speeds up creation document structure by pressing ‘TAB’ once or several
: times right after creating a new headline.
: 
: When there is a numeric prefix, go up to a heading with level ARG, do
: a ‘show-subtree’ and return to the previous cursor position.  If ARG
: is negative, go up that many levels.
: 
: When point is not at the beginning of a headline, execute the global
: binding for ‘TAB’, which is re-indenting the line.  See the option
: ‘org-cycle-emulate-tab’ for details.
: 
: As a special case, if point is at the beginning of the buffer and there is
: no headline in line 1, this function will act as if called with prefix arg
: (‘C-u TAB’, same as ‘S-TAB’) also when called without prefix arg, but only
: if the variable ‘org-cycle-global-at-bob’ is t.
** org-dblock-write:amazon =(params)=
   :PROPERTIES:
   :CUSTOM_ID: org-dblock-write:amazon
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/emacs.el;hb=HEAD][emacs.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-dblock-write:amazon&sr=1][Find modifications in git logs]]

: Dynamic block for inserting the cover of a book.
** org-set-visibility-according-to-property =(&optional no-cleanup)=
   :PROPERTIES:
   :CUSTOM_ID: org-set-visibility-according-to-property
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-set-visibility-according-to-property&sr=1][Find modifications in git logs]]

: Switch subtree visibilities according to :VISIBILITY: property.
** org-ctags-visit-buffer-or-file =(name &optional create)=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-visit-buffer-or-file
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-visit-buffer-or-file&sr=1][Find modifications in git logs]]

: This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
: Visit buffer named ‘NAME.org’.  If there is no such buffer, visit the file
: with the same name if it exists.  If the file does not exist, then behavior
: depends on the value of CREATE.
: 
: If CREATE is nil (default), then return nil.  Do not create a new file.
: If CREATE is t, create the new file and visit it.
: If CREATE is the symbol ‘ask’, then ask the user if they wish to create
: the new file.
** org-table-fedit-toggle-coordinates
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-toggle-coordinates
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-toggle-coordinates&sr=1][Find modifications in git logs]]

: Toggle the display of coordinates in the referenced table.
** org-ctags-find-tag-interactive
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-find-tag-interactive
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-find-tag-interactive&sr=1][Find modifications in git logs]]

: Prompt for the name of a tag, with autocompletion, then visit the named tag.
: Uses ‘ido-mode’ if available.
: If the user enters a string that does not match an existing tag, create
: a new topic.
** org-src-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-src-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-mode&sr=1][Find modifications in git logs]]

: Minor mode for language major mode buffers generated by Org.
: 
: This minor mode is turned on in two situations:
:   - when editing a source code snippet with ‘C-c '’
:   - when formatting a source code snippet for export with htmlize.
: 
: key             binding
: ---             -------
: 
: C-c		Prefix Command
: C-x		Prefix Command
: 
: C-x C-s		org-edit-src-save
: 
: C-c C-k		org-edit-src-abort
: C-c '		org-edit-src-exit
: 
: 
: 
: See also ‘org-src-mode-hook’.
** org-agenda-schedule =(arg &optional time)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-schedule
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-schedule&sr=1][Find modifications in git logs]]

: Schedule the item at point.
: ARG is passed through to ‘org-schedule’.
** org-table-show-reference =(&optional local)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-show-reference
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-show-reference&sr=1][Find modifications in git logs]]

: Show the location/value of the $ expression at point.
: When LOCAL is non-nil, show references for the table at point.
** org-ctrl-c-ctrl-c =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-ctrl-c-ctrl-c
   :END:

- *Access:* ~C-c C-c, <menu-bar> <Tbl> <Align>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctrl-c-ctrl-c&sr=1][Find modifications in git logs]]

: Set tags in headline, or update according to changed information at point.
: 
: This command does many different things, depending on context:
: 
: - If a function in ‘org-ctrl-c-ctrl-c-hook’ recognizes this location,
:   this is what we do.
: 
: - If the cursor is on a statistics cookie, update it.
: 
: - If the cursor is in a headline, prompt for tags and insert them
:   into the current line, aligned to ‘org-tags-column’.  When called
:   with prefix arg, realign all tags in the current buffer.
: 
: - If the cursor is in one of the special #+KEYWORD lines, this
:   triggers scanning the buffer for these lines and updating the
:   information.
: 
: - If the cursor is inside a table, realign the table.  This command
:   works even if the automatic table editor has been turned off.
: 
: - If the cursor is on a #+TBLFM line, re-apply the formulas to
:   the entire table.
: 
: - If the cursor is at a footnote reference or definition, jump to
:   the corresponding definition or references, respectively.
: 
: - If the cursor is a the beginning of a dynamic block, update it.
: 
: - If the current buffer is a capture buffer, close note and file it.
: 
: - If the cursor is on a <<<target>>>, update radio targets and
:   corresponding links in this buffer.
: 
: - If the cursor is on a numbered item in a plain list, renumber the
:   ordered list.
: 
: - If the cursor is on a checkbox, toggle it.
: 
: - If the cursor is on a code block, evaluate it.  The variable
:   ‘org-confirm-babel-evaluate’ can be used to control prompting
:   before code block evaluation, by default every code block
:   evaluation requires confirmation.  Code block evaluation can be
:   inhibited by setting ‘org-babel-no-eval-on-ctrl-c-ctrl-c’.
** org-babel-processing-view-sketch
   :PROPERTIES:
   :CUSTOM_ID: org-babel-processing-view-sketch
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-processing.el;hb=HEAD][ob-processing.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-processing-view-sketch&sr=1][Find modifications in git logs]]

: Show the sketch of the Processing block under point in an external viewer.
** org-clock-out =(&optional switch-to-state fail-quietly at-time)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-out
   :END:

- *Access:* ~C-c C-x C-o, <menu-bar> <Org> <Logging work> <Clock out>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-out&sr=1][Find modifications in git logs]]

: Stop the currently running clock.
: Throw an error if there is no running clock and FAIL-QUIETLY is nil.
: With a universal prefix, prompt for a state to switch the clocked out task
: to, overriding the existing value of ‘org-clock-out-switch-to-state’.
** org-columns-redo
   :PROPERTIES:
   :CUSTOM_ID: org-columns-redo
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-redo&sr=1][Find modifications in git logs]]

: Construct the column display again.
** org-agenda-archives-mode =(&optional with-files)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-archives-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-archives-mode&sr=1][Find modifications in git logs]]

: Toggle inclusion of items in trees marked with :ARCHIVE:.
: When called with a prefix argument, include all archive files as well.
** org-beginning-of-item-list
   :PROPERTIES:
   :CUSTOM_ID: org-beginning-of-item-list
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beginning-of-item-list&sr=1][Find modifications in git logs]]

: Go to the beginning item of the current list or sublist.
: Throw an error when not in a list.
** orgtbl-mode =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-mode
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-mode&sr=1][Find modifications in git logs]]

: The ‘org-mode’ table editor as a minor mode for use in other modes.
** org-columns-quit
   :PROPERTIES:
   :CUSTOM_ID: org-columns-quit
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-quit&sr=1][Find modifications in git logs]]

: Remove the column overlays and in this way exit column editing.
** org-force-self-insert =(N)=
   :PROPERTIES:
   :CUSTOM_ID: org-force-self-insert
   :END:

- *Access:* ~|~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-force-self-insert&sr=1][Find modifications in git logs]]

: Needed to enforce self-insert under remapping.
** org-clock-in-last =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-in-last
   :END:

- *Access:* ~C-c C-x C-x~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-in-last&sr=1][Find modifications in git logs]]

: Clock in the last closed clocked item.
: When already clocking in, send an warning.
: With a universal prefix argument, select the task you want to
: clock in from the last clocked in tasks.
: With two universal prefix arguments, start clocking using the
: last clock-out time, if any.
: With three universal prefix arguments, interactively prompt
: for a todo state to switch to, overriding the existing value
: ‘org-clock-in-switch-to-state’.
** org-footnote-normalize
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-normalize
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-normalize&sr=1][Find modifications in git logs]]

: Turn every footnote in buffer into a numbered one.
** org-export-stack
   :PROPERTIES:
   :CUSTOM_ID: org-export-stack
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-stack&sr=1][Find modifications in git logs]]

: Menu for asynchronous export results and running processes.
** org-md-convert-region-to-md
   :PROPERTIES:
   :CUSTOM_ID: org-md-convert-region-to-md
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-md.el;hb=HEAD][ox-md.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-md-convert-region-to-md&sr=1][Find modifications in git logs]]

: Assume the current region has Org syntax, and convert it to Markdown.
: This can be used in any buffer.  For example, you can write an
: itemized list in Org syntax in a Markdown buffer and use
: this command to convert it.
** org-customize
   :PROPERTIES:
   :CUSTOM_ID: org-customize
   :END:

- *Access:* ~<menu-bar> <Org> <Customize> <Browse Org Group>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-customize&sr=1][Find modifications in git logs]]

: Call the customize function with org as argument.
** org-babel-tangle-file =(file &optional target-file lang)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-file
   :END:

- *Access:* ~C-c C-v f, C-c C-v C-f~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-file&sr=1][Find modifications in git logs]]

: Extract the bodies of source code blocks in FILE.
: Source code blocks are extracted with ‘org-babel-tangle’.
: Optional argument TARGET-FILE can be used to specify a default
: export file for all source blocks.  Optional argument LANG can be
: used to limit the exported source code blocks by language.
: Return a list whose CAR is the tangled file name.
** org-goto-ret =(&optional _arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-goto-ret
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-ret&sr=1][Find modifications in git logs]]

: Finish ‘org-goto’ by going to the new location.
** org-create-math-formula =(latex-frag &optional mathml-file)=
   :PROPERTIES:
   :CUSTOM_ID: org-create-math-formula
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-create-math-formula&sr=1][Find modifications in git logs]]

: Convert LATEX-FRAG to MathML and store it in MATHML-FILE.
: Use ‘org-latex-to-mathml-convert-command’.  If the conversion is
: sucessful, return the portion between "<math...> </math>"
: elements otherwise return nil.  When MATHML-FILE is specified,
: write the results in to that file.  When invoked as an
: interactive command, prompt for LATEX-FRAG, with initial value
: set to the current active region and echo the results for user
: inspection.
** org-previous-block =(arg &optional block-regexp)=
   :PROPERTIES:
   :CUSTOM_ID: org-previous-block
   :END:

- *Access:* ~C-c M-b~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-previous-block&sr=1][Find modifications in git logs]]

: Jump to the previous block.
: With a prefix argument ARG, jump backward ARG many source blocks.
: When BLOCK-REGEXP is non-nil, use this regexp to find blocks.
** org-timestamp-down-day =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-timestamp-down-day
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timestamp-down-day&sr=1][Find modifications in git logs]]

: Decrease the date in the time stamp by one day.
: With prefix ARG, change that many days.
** org-agenda-bulk-unmark-all
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-unmark-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-unmark-all&sr=1][Find modifications in git logs]]

: Remove all marks in the agenda buffer.
: This will remove the markers and the overlays.
** org-show-subtree
   :PROPERTIES:
   :CUSTOM_ID: org-show-subtree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-subtree&sr=1][Find modifications in git logs]]

: Show everything after this heading at deeper levels.
** org-babel-lilypond-toggle-pdf-generation
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-toggle-pdf-generation
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-toggle-pdf-generation&sr=1][Find modifications in git logs]]

: Toggle whether pdf will be generated by compilation.
** org-columns-remove-overlays
   :PROPERTIES:
   :CUSTOM_ID: org-columns-remove-overlays
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-remove-overlays&sr=1][Find modifications in git logs]]

: Remove all currently active column overlays.
** org-agenda-phases-of-moon
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-phases-of-moon
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-phases-of-moon&sr=1][Find modifications in git logs]]

: Display the phases of the moon for the 3 months around the cursor date.
** org-property-previous-allowed-value =(&optional _previous)=
   :PROPERTIES:
   :CUSTOM_ID: org-property-previous-allowed-value
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-property-previous-allowed-value&sr=1][Find modifications in git logs]]

: Switch to the next allowed value for this property.
** org-todo-list =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-list
   :END:

- *Access:* ~<menu-bar> <Org> <TODO Lists> <Global TODO list>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-list&sr=1][Find modifications in git logs]]

: Show all (not done) TODO entries from all agenda file in a single list.
: The prefix arg can be used to select a specific TODO keyword and limit
: the list to these.  When using ‘C-u’, you will be prompted
: for a keyword.  A numeric prefix directly selects the Nth keyword in
: ‘org-todo-keywords-1’.
** org-odt-convert =(&optional in-file out-fmt open)=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-convert
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-convert&sr=1][Find modifications in git logs]]

: Convert IN-FILE to format OUT-FMT using a command line converter.
: IN-FILE is the file to be converted.  If unspecified, it defaults
: to variable ‘buffer-file-name’.  OUT-FMT is the desired output
: format.  Use ‘org-odt-convert-process’ as the converter.  If OPEN
: is non-nil then the newly converted file is opened using
: ‘org-open-file’.
** orgtbl-toggle-comment
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-toggle-comment
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-toggle-comment&sr=1][Find modifications in git logs]]

: Comment or uncomment the orgtbl at point.
** org-duration-set-regexps
   :PROPERTIES:
   :CUSTOM_ID: org-duration-set-regexps
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-duration.el;hb=HEAD][org-duration.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-duration-set-regexps&sr=1][Find modifications in git logs]]

: Set duration related regexps.
** org-previous-link
   :PROPERTIES:
   :CUSTOM_ID: org-previous-link
   :END:

- *Access:* ~C-c C-x C-p, <menu-bar> <Org> <Hyperlinks> <Previous link>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-previous-link&sr=1][Find modifications in git logs]]

: Move backward to the previous link.
: If the link is in hidden text, expose it.
** org-babel-hide-result-toggle =(&optional force)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-hide-result-toggle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-hide-result-toggle&sr=1][Find modifications in git logs]]

: Toggle the visibility of the current result.
** org-attach
   :PROPERTIES:
   :CUSTOM_ID: org-attach
   :END:

- *Access:* ~C-c C-a~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach&sr=1][Find modifications in git logs]]

: The dispatcher for attachment commands.
: Shows a list of commands and prompts for another key to execute a command.
** org-agenda-columns
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-columns
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-columns&sr=1][Find modifications in git logs]]

: Turn on or update column view in the agenda.
** org-occur =(regexp &optional keep-previous callback)=
   :PROPERTIES:
   :CUSTOM_ID: org-occur
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-occur&sr=1][Find modifications in git logs]]

: Make a compact tree which shows all matches of REGEXP.
: 
: The tree will show the lines where the regexp matches, and any other context
: defined in ‘org-show-context-detail’, which see.
: 
: When optional argument KEEP-PREVIOUS is non-nil, highlighting and exposing
: done by a previous call to ‘org-occur’ will be kept, to allow stacking of
: calls to this command.
: 
: Optional argument CALLBACK can be a function of no argument.  In this case,
: it is called with point at the end of the match, match data being set
: accordingly.  Current match is shown only if the return value is non-nil.
: The function must neither move point nor alter narrowing.
** org-table-iterate-buffer-tables
   :PROPERTIES:
   :CUSTOM_ID: org-table-iterate-buffer-tables
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-iterate-buffer-tables&sr=1][Find modifications in git logs]]

: Iterate all tables in the buffer, to converge inter-table dependencies.
** org-attach-reveal-in-emacs
   :PROPERTIES:
   :CUSTOM_ID: org-attach-reveal-in-emacs
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-reveal-in-emacs&sr=1][Find modifications in git logs]]

: Show the attachment directory of the current task in dired.
** org-update-all-dblocks
   :PROPERTIES:
   :CUSTOM_ID: org-update-all-dblocks
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-update-all-dblocks&sr=1][Find modifications in git logs]]

: Update all dynamic blocks in the buffer.
: This function can be used in a hook.
** org-babel-examplize-region =(beg end &optional results-switches inline)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-examplize-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-examplize-region&sr=1][Find modifications in git logs]]

: Comment out region using the inline ‘==’ or ‘: ’ org example quote.
** org-indent-item-tree
   :PROPERTIES:
   :CUSTOM_ID: org-indent-item-tree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-item-tree&sr=1][Find modifications in git logs]]

: Indent a local list item including its children.
: If a region is active, all items inside will be moved.
** org-delete-backward-char =(N)=
   :PROPERTIES:
   :CUSTOM_ID: org-delete-backward-char
   :END:

- *Access:* ~DEL~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-delete-backward-char&sr=1][Find modifications in git logs]]

: Like ‘delete-backward-char’, insert whitespace at field end in tables.
: When deleting backwards, in tables this function will insert whitespace in
: front of the next "|" separator, to keep the table aligned.  The table will
: still be marked for re-alignment if the field did fill the entire column,
: because, in this case the deletion might narrow the column.
** org-agenda-archive-with =(cmd &optional confirm)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-archive-with
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-archive-with&sr=1][Find modifications in git logs]]

: Move the entry to the archive sibling.
** org-element-update-syntax
   :PROPERTIES:
   :CUSTOM_ID: org-element-update-syntax
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-element.el;hb=HEAD][org-element.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-element-update-syntax&sr=1][Find modifications in git logs]]

: Update parser internals.
** org-agenda-add-note =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-add-note
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-add-note&sr=1][Find modifications in git logs]]

: Add a time-stamped note to the entry at point.
** org-agenda-bulk-mark =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-mark
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-mark&sr=1][Find modifications in git logs]]

: Mark the entry at point for future bulk action.
** org-insert-todo-subheading =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-todo-subheading
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-todo-subheading&sr=1][Find modifications in git logs]]

: Insert a new subheading with TODO keyword or checkbox and demote it.
: Works for outline headings and for plain lists alike.
** org-koma-letter-export-to-pdf =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-export-to-pdf
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-export-to-pdf&sr=1][Find modifications in git logs]]

: Export current buffer as a KOMA Scrlttr2 letter (pdf).
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{letter}" and "\end{letter}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: Return PDF file’s name.
** org-bibtex-search =(string)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-search
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-search&sr=1][Find modifications in git logs]]

: Search for bibliographical entries in agenda files.
: This function relies ‘org-search-view’ to locate results.
** org-columns-widen =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-widen
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-widen&sr=1][Find modifications in git logs]]

: Make the column wider by ARG characters.
** org-agenda-manipulate-query-subtract
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-manipulate-query-subtract
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-manipulate-query-subtract&sr=1][Find modifications in git logs]]

: Manipulate the query by adding a search term with negative selection.
: Negative selection means term must not be matched for selection of an entry.
** org-meta-return =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-meta-return
   :END:

- *Access:* ~<M-return>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-meta-return&sr=1][Find modifications in git logs]]

: Insert a new heading or wrap a region in a table.
: Calls ‘org-insert-heading’, ‘org-insert-item’ or
: ‘org-table-wrap-region’, depending on context.  When called with
: an argument, unconditionally call ‘org-insert-heading’.
** org-agenda-bulk-toggle-all
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-toggle-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-toggle-all&sr=1][Find modifications in git logs]]

: Toggle all marks for bulk action.
** org-agenda-bulk-unmark =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-unmark
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-unmark&sr=1][Find modifications in git logs]]

: Unmark the entry at point for future bulk action.
** org-cut-subtree =(&optional n)=
   :PROPERTIES:
   :CUSTOM_ID: org-cut-subtree
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cut-subtree&sr=1][Find modifications in git logs]]

: Cut the current subtree into the clipboard.
: With prefix arg N, cut this many sequential subtrees.
: This is a short-hand for marking the subtree and then cutting it.
** org-goto-quit
   :PROPERTIES:
   :CUSTOM_ID: org-goto-quit
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-quit&sr=1][Find modifications in git logs]]

: Finish ‘org-goto’ without cursor motion.
** org-attach-url =(url)=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-url
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-url&sr=1][Find modifications in git logs]]


** org-agenda-month-view =(&optional month)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-month-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-month-view&sr=1][Find modifications in git logs]]

: Switch to monthly view for agenda.
: With argument MONTH, switch to that month.  If MONTH has more
: then 2 digits, only the last two encode the month.  Any digits
: before this encode a year.  So 200712 means December year 2007.
: Years ranging from 70 years ago to 30 years in the future can
: also be written as 2-digit years.
** org-agenda-limit-interactively =(remove)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-limit-interactively
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-limit-interactively&sr=1][Find modifications in git logs]]

: In agenda, interactively limit entries to various maximums.
** org-babel-hide-result-toggle-maybe
   :PROPERTIES:
   :CUSTOM_ID: org-babel-hide-result-toggle-maybe
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-hide-result-toggle-maybe&sr=1][Find modifications in git logs]]

: Toggle visibility of result at point.
** org-narrow-to-element
   :PROPERTIES:
   :CUSTOM_ID: org-narrow-to-element
   :END:

- *Access:* ~C-x n e~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-narrow-to-element&sr=1][Find modifications in git logs]]

: Narrow buffer to current element.
** org-inlinetask-promote
   :PROPERTIES:
   :CUSTOM_ID: org-inlinetask-promote
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-inlinetask.el;hb=HEAD][org-inlinetask.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-inlinetask-promote&sr=1][Find modifications in git logs]]

: Promote the inline task at point.
: If the task has an end part, promote it.  Also, prevents level from
: going below ‘org-inlinetask-min-level’.
** org-agenda-date-later-hours =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-date-later-hours
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-date-later-hours&sr=1][Find modifications in git logs]]

: Change the time of this item, in hour steps.
** org-decompose-region =(start end)=
   :PROPERTIES:
   :CUSTOM_ID: org-decompose-region
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-decompose-region&sr=1][Find modifications in git logs]]

: Decompose text in the current region.
: 
: When called from a program, expects two arguments,
: positions (integers or markers) specifying the region.
** org-export-stack-view =(&optional in-emacs)=
   :PROPERTIES:
   :CUSTOM_ID: org-export-stack-view
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-stack-view&sr=1][Find modifications in git logs]]

: View export results at point in stack.
: With an optional prefix argument IN-EMACS, force viewing files
: within Emacs.
** org-columns-narrow =(arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-narrow
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-narrow&sr=1][Find modifications in git logs]]

: Make the column narrower by ARG characters.
** org-table-transpose-table-at-point
   :PROPERTIES:
   :CUSTOM_ID: org-table-transpose-table-at-point
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-transpose-table-at-point&sr=1][Find modifications in git logs]]

: Transpose Org table at point and eliminate hlines.
: So a table like
: 
: | 1 | 2 | 4 | 5 |
: |---+---+---+---|
: | a | b | c | d |
: | e | f | g | h |
: 
: will be transposed as
: 
: | 1 | a | e |
: | 2 | b | f |
: | 4 | c | g |
: | 5 | d | h |
: 
: Note that horizontal lines disappear.
** org-columns-edit-allowed
   :PROPERTIES:
   :CUSTOM_ID: org-columns-edit-allowed
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-edit-allowed&sr=1][Find modifications in git logs]]

: Edit the list of allowed values for the current property.
** org-table-fedit-finish =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-table-fedit-finish
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fedit-finish&sr=1][Find modifications in git logs]]

: Parse the buffer for formula definitions and install them.
: With prefix ARG, apply the new formulas to the table.
** org-occur-in-agenda-files =(regexp &optional _nlines)=
   :PROPERTIES:
   :CUSTOM_ID: org-occur-in-agenda-files
   :END:

- *Access:* ~<menu-bar> <Org> <File List for Agenda> <Occur in all agenda files>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-occur-in-agenda-files&sr=1][Find modifications in git logs]]

: Call ‘multi-occur’ with buffers for all agenda files.
** org-convert-to-oddeven-levels
   :PROPERTIES:
   :CUSTOM_ID: org-convert-to-oddeven-levels
   :END:

- *Access:* ~<menu-bar> <Org> <Edit Structure> <Convert to odd/even levels>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-convert-to-oddeven-levels&sr=1][Find modifications in git logs]]

: Convert an Org file with only odd levels to one with odd/even levels.
: This promotes level 3 to level 2, level 5 to level 3 etc.  If the
: file contains a section with an even level, conversion would
: destroy the structure of the file.  An error is signaled in this
: case.
** org-show-block-all
   :PROPERTIES:
   :CUSTOM_ID: org-show-block-all
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-block-all&sr=1][Find modifications in git logs]]

: Unfold all blocks in the current buffer.
** org-ctags-append-topic =(name &optional narrowp)=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-append-topic
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-append-topic&sr=1][Find modifications in git logs]]

: This function is intended to be used in ORG-OPEN-LINK-FUNCTIONS.
: Append a new toplevel heading to the end of the current buffer.  The
: heading contains NAME surrounded by <<angular brackets>>, thus making
: the heading a destination for the tag ‘NAME’.
** org-koma-letter-export-to-latex =(&optional async subtreep visible-only body-only ext-plist)=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-export-to-latex
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-export-to-latex&sr=1][Find modifications in git logs]]

: Export current buffer as a KOMA Scrlttr2 letter (tex).
: 
: If narrowing is active in the current buffer, only export its
: narrowed part.
: 
: If a region is active, export that region.
: 
: A non-nil optional argument ASYNC means the process should happen
: asynchronously.  The resulting file should be accessible through
: the ‘org-export-stack’ interface.
: 
: When optional argument SUBTREEP is non-nil, export the sub-tree
: at point, extracting information from the headline properties
: first.
: 
: When optional argument VISIBLE-ONLY is non-nil, don’t export
: contents of hidden elements.
: 
: When optional argument BODY-ONLY is non-nil, only write code
: between "\begin{letter}" and "\end{letter}".
: 
: EXT-PLIST, when provided, is a property list with external
: parameters overriding Org default settings, but still inferior to
: file-local settings.
: 
: When optional argument PUB-DIR is set, use it as the publishing
: directory.
: 
: Return output file’s name.
** org-archive-subtree-default-with-confirmation
   :PROPERTIES:
   :CUSTOM_ID: org-archive-subtree-default-with-confirmation
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-subtree-default-with-confirmation&sr=1][Find modifications in git logs]]

: Archive the current subtree with the default command.
: This command is set with the variable ‘org-archive-default-command’.
** org-encrypt-entries
   :PROPERTIES:
   :CUSTOM_ID: org-encrypt-entries
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-crypt.el;hb=HEAD][org-crypt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-encrypt-entries&sr=1][Find modifications in git logs]]

: Encrypt all top-level entries in the current buffer.
** org-tree-to-indirect-buffer =(&optional arg)=
   :PROPERTIES:
   :CUSTOM_ID: org-tree-to-indirect-buffer
   :END:

- *Access:* ~C-c C-x b, <menu-bar> <Org> <Show/Hide> <Subtree to indirect buffer>~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tree-to-indirect-buffer&sr=1][Find modifications in git logs]]

: Create indirect buffer and narrow it to current subtree.
: 
: With a numerical prefix ARG, go up to this level and then take that tree.
: If ARG is negative, go up that many levels.
: 
: If ‘org-indirect-buffer-display’ is not ‘new-frame’, the command removes the
: indirect buffer previously made with this command, to avoid proliferation of
: indirect buffers.  However, when you call the command with a ‘C-u’ prefix, or
: when ‘org-indirect-buffer-display’ is ‘new-frame’, the last buffer is kept
: so that you can work with several indirect buffers at the same time.  If
: ‘org-indirect-buffer-display’ is ‘dedicated-frame’, the ‘C-u’ prefix also
: requests that a new frame be made for the new buffer, so that the dedicated
: frame is not changed.
** org-agenda-previous-item =(n)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-previous-item
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-previous-item&sr=1][Find modifications in git logs]]

: Move cursor to next agenda item.
** org-babel-detangle =(&optional source-code-file)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-detangle
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-detangle&sr=1][Find modifications in git logs]]

: Propagate changes in source file back original to Org file.
: This requires that code blocks were tangled with link comments
: which enable the original code blocks to be found.
** org-end-of-item-list
   :PROPERTIES:
   :CUSTOM_ID: org-end-of-item-list
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-end-of-item-list&sr=1][Find modifications in git logs]]

: Go to the end of the current list or sublist.
: Throw an error when not in a list.
** org-agenda-dim-blocked-tasks =(&optional invisible)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-dim-blocked-tasks
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-dim-blocked-tasks&sr=1][Find modifications in git logs]]

: Dim currently blocked TODOs in the agenda display.
: When INVISIBLE is non-nil, hide currently blocked TODO instead of
: dimming them.
** org-babel-open-src-block-result =(&optional re-run)=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-open-src-block-result
   :END:

- *Access:* ~C-c C-v C-o, C-c C-v o~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-open-src-block-result&sr=1][Find modifications in git logs]]

: If ‘point’ is on a src block then open the results of the
: source code block, otherwise return nil.  With optional prefix
: argument RE-RUN the source-code block is evaluated even if
: results already exist.
** org-list-repair
   :PROPERTIES:
   :CUSTOM_ID: org-list-repair
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-repair&sr=1][Find modifications in git logs]]

: Fix indentation, bullets and checkboxes in the list at point.
** org-at-date-range-p =(&optional inactive-ok)=
   :PROPERTIES:
   :CUSTOM_ID: org-at-date-range-p
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-at-date-range-p&sr=1][Find modifications in git logs]]

: Non-nil if point is inside a date range.
: 
: When optional argument INACTIVE-OK is non-nil, also consider
: inactive time ranges.
: 
: When this function returns a non-nil value, match data is set
: according to ‘org-tr-regexp-both’ or ‘org-tr-regexp’, depending
: on INACTIVE-OK.
** org-bibtex-check =(&optional optional)=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-check
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-check&sr=1][Find modifications in git logs]]

: Check the current headline for required fields.
: With prefix argument OPTIONAL also prompt for optional fields.
** org-lint--hide-checker
   :PROPERTIES:
   :CUSTOM_ID: org-lint--hide-checker
   :END:

- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-lint.el;hb=HEAD][org-lint.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lint--hide-checker&sr=1][Find modifications in git logs]]

: Hide all reports from checker that generated the report at point.
** org-list-make-subtree
   :PROPERTIES:
   :CUSTOM_ID: org-list-make-subtree
   :END:

- *Access:* ~C-c C-*~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-make-subtree&sr=1][Find modifications in git logs]]

: Convert the plain list at point into a subtree.
** org-update-statistics-cookies =(all)=
   :PROPERTIES:
   :CUSTOM_ID: org-update-statistics-cookies
   :END:

- *Access:* ~C-c #~
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-update-statistics-cookies&sr=1][Find modifications in git logs]]

: Update the statistics cookie, either from TODO or from checkboxes.
: This should be called with the cursor in a line with a statistics
: cookie.  When called with a C-u prefix, update
: all statistics cookies in the buffer.
* Options
  :PROPERTIES:
  :CUSTOM_ID: options
  :END:


** org-odt-styles-file =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-styles-file
   :END:

- *Type:* (choice (const :tag "Factory s...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-styles-file&sr=1][Find modifications in git logs]]

: Default styles file for use with ODT export.
: Valid values are one of:
: 1. nil
: 2. path to a styles.xml file
: 3. path to a *.odt or a *.ott file
: 4. list of the form (ODT-OR-OTT-FILE (FILE-MEMBER-1 FILE-MEMBER-2
: ...))
: 
: In case of option 1, an in-built styles.xml is used. See
: `org-odt-styles-dir' for more information.
: 
: In case of option 3, the specified file is unzipped and the
: styles.xml embedded therein is used.
: 
: In case of option 4, the specified ODT-OR-OTT-FILE is unzipped
: and FILE-MEMBER-1, FILE-MEMBER-2 etc are copied in to the
: generated odt file.  Use relative path for specifying the
: FILE-MEMBERS.  styles.xml must be specified as one of the
: FILE-MEMBERS.
: 
: Use options 1, 2 or 3 only if styles.xml alone suffices for
: achieving the desired formatting.  Use option 4, if the styles.xml
: references additional files like header and footer images for
: achieving the desired formatting.
: 
: Use "#+ODT_STYLES_FILE: ..." directive to set this variable on
: a per-file basis.  For example,
: 
: #+ODT_STYLES_FILE: "/path/to/styles.xml" or
: #+ODT_STYLES_FILE: ("/path/to/file.ott" ("styles.xml" "image/hdr.png")).

** org-read-date-popup-calendar =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-read-date-popup-calendar
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-read-date-popup-calendar&sr=1][Find modifications in git logs]]

: Non-nil means pop up a calendar when prompting for a date.
: In the calendar, the date can be selected with mouse-1.  However, the
: minibuffer will also be active, and you can simply enter the date as well.
: When nil, only the minibuffer will be available.

** org-export-with-properties =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-properties
   :END:

- *Type:* (choice (const :tag "All prope...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-properties&sr=1][Find modifications in git logs]]

: Non-nil means export contents of properties drawers.
: 
: When t, all properties are exported.  This may also be a list of
: properties to export, as strings.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "prop:t".

** org-agenda-max-entries =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-max-entries
   :END:

- *Type:* (choice (symbol :tag "No limit...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-max-entries&sr=1][Find modifications in git logs]]

: Maximum number of entries to display in an agenda.
: This can be nil (no limit) or an integer or an alist of agenda
: types with an associated number of entries to display in this
: type.

** org-log-note-clock-out =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-note-clock-out
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-note-clock-out&sr=1][Find modifications in git logs]]

: Non-nil means record a note when clocking out of an item.
: This can also be configured on a per-file basis by adding one of
: the following lines anywhere in the buffer:
: 
:    #+STARTUP: lognoteclock-out
:    #+STARTUP: nolognoteclock-out

** org-link-abbrev-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-link-abbrev-alist
   :END:

- *Type:* (repeat (cons (string :tag "Pr...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-link-abbrev-alist&sr=1][Find modifications in git logs]]

: Alist of link abbreviations.
: The car of each element is a string, to be replaced at the start of a link.
: The cdrs are replacement values, like ("linkkey" . REPLACE).  Abbreviated
: links in Org buffers can have an optional tag after a double colon, e.g.,
: 
:      [[linkkey:tag][description]]
: 
: The `linkkey' must be a single word, starting with a letter, followed
: by letters, numbers, `-' or `_'.
: 
: If REPLACE is a string, the tag will simply be appended to create the link.
: If the string contains "%s", the tag will be inserted there.  If the string
: contains "%h", it will cause a url-encoded version of the tag to be inserted
: at that point (see the function `url-hexify-string').  If the string contains
: the specifier "%(my-function)", then the custom function `my-function' will
: be invoked: this function takes the tag as its only argument and must return
: a string.
: 
: REPLACE may also be a function that will be called with the tag as the
: only argument to create the link, which should be returned as a string.
: 
: See the manual for examples.

** org-html-format-drawer-function =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-format-drawer-function
   :END:

- *Type:* function
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-format-drawer-function&sr=1][Find modifications in git logs]]

: Function called to format a drawer in HTML code.
: 
: The function must accept two parameters:
:   NAME      the drawer name, like "LOGBOOK"
:   CONTENTS  the contents of the drawer.
: 
: The function should return the string to be exported.
: 
: For example, the variable could be set to the following function
: in order to mimic default behavior:
: 
: The default value simply returns the value of CONTENTS.

** org-latex-hyperref-template =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-hyperref-template
   :END:

- *Type:* (choice (const :tag "No templa...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-hyperref-template&sr=1][Find modifications in git logs]]

: Template for hyperref package options.
: 
: This format string may contain these elements:
: 
:   %a for AUTHOR keyword
:   %t for TITLE keyword
:   %s for SUBTITLE keyword
:   %k for KEYWORDS line
:   %d for DESCRIPTION line
:   %c for CREATOR line
:   %l for Language keyword
:   %L for capitalized language keyword
:   %D for DATE keyword
: 
: If you need to use a "%" character, you need to escape it
: like that: "%%".
: 
: As a special case, a nil value prevents template from being
: inserted.
: 
: Setting :latex-hyperref-template in publishing projects will take
: precedence over this variable.

** org-src-block-faces =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-src-block-faces
   :END:

- *Type:* (repeat (list (string :tag "la...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-block-faces&sr=1][Find modifications in git logs]]

: Alist of faces to be used for source-block.
: Each element is a cell of the format
: 
:      ("language" FACE)
: 
: Where FACE is either a defined face or an anonymous face.
: 
: For instance, the following value would color the background of
: emacs-lisp source blocks and python source blocks in purple and
: green, respectability.
: 
:     \='(("emacs-lisp" (:background "#EEE2FF"))
:       ("python" (:background "#e5ffb8")))

** org-context-in-file-links =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-context-in-file-links
   :END:

- *Type:* (choice boolean integer)
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-context-in-file-links&sr=1][Find modifications in git logs]]

: Non-nil means file links from `org-store-link' contain context.
: \<org-mode-map>
: A search string will be added to the file name with :: as separator
: and used to find the context when the link is activated by the command
: `org-open-at-point'.  When this option is t, the entire active region
: will be placed in the search string of the file link.  If set to a
: positive integer, only the first n lines of context will be stored.
: 
: Using a prefix arg to the command `org-store-link' (`\[universal-argument] \[org-store-link]')
: negates this setting for the duration of the command.

** org-indent-mode-turns-on-hiding-stars =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-mode-turns-on-hiding-stars
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-indent.el;hb=HEAD][org-indent.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-mode-turns-on-hiding-stars&sr=1][Find modifications in git logs]]

: Non-nil means setting the variable `org-indent-mode' will turn on `org-hide-leading-stars'.

** org-mobile-directory =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-directory
   :END:

- *Type:* directory
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-directory&sr=1][Find modifications in git logs]]

: The WebDAV directory where the interaction with the mobile takes place.

** org-export-select-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-select-tags
   :END:

- *Type:* (repeat (string :tag "Tag"))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-select-tags&sr=1][Find modifications in git logs]]

: Tags that select a tree for export.
: 
: If any such tag is found in a buffer, all trees that do not carry
: one of these tags will be ignored during export.  Inside trees
: that are selected like this, you can still deselect a subtree by
: tagging it with one of the `org-export-exclude-tags'.
: 
: This option can also be set with the SELECT_TAGS keyword.

** org-clocktable-defaults =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clocktable-defaults
   :END:

- *Type:* plist
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clocktable-defaults&sr=1][Find modifications in git logs]]

: Default properties for clock tables.

** org-koma-letter-use-place =t=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-use-place
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-use-place&sr=1][Find modifications in git logs]]

: Non-nil prints the letter's place next to the date.
: This option can also be set with the OPTIONS keyword, e.g.:
: "place:nil".

** org-koma-letter-signature =""=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-signature
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-signature&sr=1][Find modifications in git logs]]

: Signature, as a string.
: This option can also be set with the SIGNATURE keyword.
: Moreover, when:
:   (1) Either `org-koma-letter-prefer-special-headings' is non-nil
:       or there is no CLOSING keyword or the CLOSING keyword is empty;
:   (2) `org-koma-letter-headline-is-opening-maybe' is non-nil;
:   (3) the letter contains a headline with the special
:       tag "closing";
: then the signature will be  set as the content of the
: closing special heading.
: 
: Note if the content is empty the signature will not be set.

** org-icalendar-store-UID =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-store-UID
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-store-UID&sr=1][Find modifications in git logs]]

: Non-nil means store any created UIDs in properties.
: 
: The iCalendar standard requires that all entries have a unique identifier.
: Org will create these identifiers as needed.  When this variable is non-nil,
: the created UIDs will be stored in the ID property of the entry.  Then the
: next time this entry is exported, it will be exported with the same UID,
: superseding the previous form of it.  This is essential for
: synchronization services.
: 
: This variable is not turned on by default because we want to avoid creating
: a property drawer in every entry if people are only playing with this feature,
: or if they are only using it locally.

** org-bbdb-anniversary-format-alist =(funcall (function (closure (d...=
   :PROPERTIES:
   :CUSTOM_ID: org-bbdb-anniversary-format-alist
   :END:

- *Type:* (alist :key-type (string :tag ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bbdb.el;hb=HEAD][org-bbdb.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bbdb-anniversary-format-alist&sr=1][Find modifications in git logs]]

: How different types of anniversaries should be formatted.
: An alist of elements (STRING . FORMAT) where STRING is the name of an
: anniversary class and format is either:
: 1) A format string with the following substitutions (in order):
:     - the name of the record containing this anniversary
:     - the number of years
:     - an ordinal suffix (st, nd, rd, th) for the year
: 
: 2) A function to be called with three arguments: NAME YEARS SUFFIX
:    (string int string) returning a string for the diary or nil.
: 
: 3) An Emacs Lisp form that should evaluate to a string (or nil) in the
:    scope of variables NAME, YEARS and SUFFIX (among others).

** org-list-use-circular-motion =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-use-circular-motion
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-use-circular-motion&sr=1][Find modifications in git logs]]

: Non-nil means commands implying motion in lists should be cyclic.
: \<org-mode-map>
: In that case, the item following the last item is the first one,
: and the item preceding the first item is the last one.
: 
: This affects the behavior of
:   `\[org-move-item-up]',
:   `\[org-move-item-down]',
:   `\[org-next-item]',
:   `\[org-previous-item]'.

** org-html-mathjax-options =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-mathjax-options
   :END:

- *Type:* (list :greedy t (list :tag "pa...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-mathjax-options&sr=1][Find modifications in git logs]]

: Options for MathJax setup.
: 
: Alist of the following elements.  All values are strings.
: 
: path          The path to MathJax.
: scale         Scaling with HTML-CSS, MathML and SVG output engines.
: align         How to align display math: left, center, or right.
: font          The font to use with HTML-CSS and SVG output.  As of MathJax 2.5
:               the following values are understood: "TeX", "STIX-Web",
:               "Asana-Math", "Neo-Euler", "Gyre-Pagella",
:               "Gyre-Termes", and "Latin-Modern".
: linebreaks    Let MathJax perform automatic linebreaks.  Valid values
:               are "true" and "false".
: indent        If align is not center, how far from the left/right side?
:               Valid values are "left" and "right"
: multlinewidth The width of the multline environment.
: autonumber    How to number equations.  Valid values are "None",
:               "all" and "AMS Math".
: tagindent     The amount tags are indented.
: tagside       Which side to show tags/labels on.  Valid values are
:               "left" and "right"
: 
: You can also customize this for each buffer, using something like
: 
: #+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
: 
: For further information about MathJax options, see the MathJax documentation:
: 
:   http://docs.mathjax.org/

** org-stuck-projects =(quote ("+LEVEL=2/-DONE" ("TOD...=
   :PROPERTIES:
   :CUSTOM_ID: org-stuck-projects
   :END:

- *Type:* (list (string :tag "Tags/TODO ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-stuck-projects&sr=1][Find modifications in git logs]]

: How to identify stuck projects.
: This is a list of four items:
: 1. A tags/todo/property matcher string that is used to identify a project.
:    See the manual for a description of tag and property searches.
:    The entire tree below a headline matched by this is considered one project.
: 2. A list of TODO keywords identifying non-stuck projects.
:    If the project subtree contains any headline with one of these todo
:    keywords, the project is considered to be not stuck.  If you specify
:    "*" as a keyword, any TODO keyword will mark the project unstuck.
: 3. A list of tags identifying non-stuck projects.
:    If the project subtree contains any headline with one of these tags,
:    the project is considered to be not stuck.  If you specify "*" as
:    a tag, any tag will mark the project unstuck.  Note that this is about
:    the explicit presence of a tag somewhere in the subtree, inherited
:    tags do not count here.  If inherited tags make a project not stuck,
:    use "-TAG" in the tags part of the matcher under (1.) above.
: 4. An arbitrary regular expression matching non-stuck projects.
: 
: If the project turns out to be not stuck, search continues also in the
: subtree to see if any of the subtasks have project status.
: 
: See also the variable `org-tags-match-list-sublevels' which applies
: to projects matched by this search as well.
: 
: After defining this variable, you may use `\[org-agenda-list-stuck-projects]'
: (bound to `C-c a #') to produce the list.

** org-latex-default-table-mode =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-default-table-mode
   :END:

- *Type:* (choice (const :tag "Table" ta...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-default-table-mode&sr=1][Find modifications in git logs]]

: Default mode for tables.
: 
: Value can be a symbol among:
: 
:   `table' Regular LaTeX table.
: 
:   `math' In this mode, every cell is considered as being in math
:      mode and the complete table will be wrapped within a math
:      environment.  It is particularly useful to write matrices.
: 
:   `inline-math' This mode is almost the same as `math', but the
:      math environment will be inlined.
: 
:   `verbatim' The table is exported as it appears in the Org
:      buffer, within a verbatim environment.
: 
: This value can be overridden locally with, i.e. ":mode math" in
: LaTeX attributes.
: 
: When modifying this variable, it may be useful to change
: `org-latex-default-table-environment' accordingly.

** org-clock-rounding-minutes =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-rounding-minutes
   :END:

- *Type:* (choice (integer :tag "Minutes...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-rounding-minutes&sr=1][Find modifications in git logs]]

: Rounding minutes when clocking in or out.
: The default value is 0 so that no rounding is done.
: When set to a non-integer value, use the car of
: `org-time-stamp-rounding-minutes', like for setting a time-stamp.
: 
: E.g. if `org-clock-rounding-minutes' is set to 5, time is 14:47
: and you clock in: then the clock starts at 14:45.  If you clock
: out within the next 5 minutes, the clock line will be removed;
: if you clock out 8 minutes after your clocked in, the clock
: out time will be 14:50.

** org-babel-load-languages =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-load-languages
   :END:

- *Type:* (alist :tag "Babel Languages" ...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-load-languages&sr=1][Find modifications in git logs]]

: Languages which can be evaluated in Org buffers.
: This list can be used to load support for any of the languages
: below, note that each language will depend on a different set of
: system executables and/or Emacs modes.  When a language is
: "loaded", then code blocks in that language can be evaluated
: with `org-babel-execute-src-block' bound by default to C-c
: C-c (note the `org-babel-no-eval-on-ctrl-c-ctrl-c' variable can
: be set to remove code block evaluation from the C-c C-c
: keybinding.  By default only Emacs Lisp (which has no
: requirements) is loaded.

** org-agenda-time-grid =(quote ((daily today require-t...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-time-grid
   :END:

- *Type:* (list (set :greedy t :tag "Gri...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-time-grid&sr=1][Find modifications in git logs]]

: The settings for time grid for agenda display.
: This is a list of three items.  The first item is again a list.  It contains
: symbols specifying conditions when the grid should be displayed:
: 
:  daily         if the agenda shows a single day
:  weekly        if the agenda shows an entire week
:  today         show grid on current date, independent of daily/weekly display
:  require-timed show grid only if at least one item has a time specification
:  remove-match  skip grid times already present in an entry
: 
: The second item is a string which will be placed behind the grid time.
: 
: The third item is a list of integers, indicating the times that should have
: a grid line.

** org-export-with-entities =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-entities
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-entities&sr=1][Find modifications in git logs]]

: Non-nil means interpret entities when exporting.
: 
: For example, HTML export converts \alpha to &alpha; and \AA to
: &Aring;.
: 
: For a list of supported names, see the constant `org-entities'
: and the user option `org-entities-user'.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "e:nil".

** org-texinfo-info-process =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-info-process
   :END:

- *Type:* (repeat :tag "Shell command se...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-info-process&sr=1][Find modifications in git logs]]

: Commands to process a Texinfo file to an INFO file.
: 
: This is a list of strings, each of them will be given to the
: shell as a command.  %f in the command will be replaced by the
: relative file name, %F by the absolute file name, %b by the file
: base name (i.e. without directory and extension parts), %o by the
: base directory of the file and %O by the absolute file name of
: the output file.

** org-bibtex-type-property-name =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-type-property-name
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-type-property-name&sr=1][Find modifications in git logs]]

: Property in which to store bibtex entry type (e.g., article).

** org-table-auto-blank-field =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-auto-blank-field
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-auto-blank-field&sr=1][Find modifications in git logs]]

: Non-nil means automatically blank table field when starting to type into it.
: This only happens when typing immediately after a field motion
: command (TAB, S-TAB or RET).
: Only relevant when `org-enable-table-editor' is equal to `optimized'.

** org-timer-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-format&sr=1][Find modifications in git logs]]

: The format to insert the time of the timer.
: This format must contain one instance of "%s" which will be replaced by
: the value of the timer.

** org-agenda-skip-scheduled-if-done =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-scheduled-if-done
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-scheduled-if-done&sr=1][Find modifications in git logs]]

: Non-nil means don't show scheduled items in agenda when they are done.
: This is relevant for the daily/weekly agenda, not for the TODO list.  It
: applies only to the actual date of the scheduling.  Warnings about an item
: with a past scheduling dates are always turned off when the item is DONE.

** org-tags-column =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-tags-column
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tags-column&sr=1][Find modifications in git logs]]

: The column to which tags should be indented in a headline.
: If this number is positive, it specifies the column.  If it is negative,
: it means that the tags should be flushright to that column.  For example,
: -80 works well for a normal 80 character screen.
: When 0, place tags directly after headline text, with only one space in
: between.

** org-agenda-timegrid-use-ampm =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-timegrid-use-ampm
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-timegrid-use-ampm&sr=1][Find modifications in git logs]]

: When set, show AM/PM style timestamps on the timegrid.

** org-babel-results-keyword =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-results-keyword
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-results-keyword&sr=1][Find modifications in git logs]]

: Keyword used to name results generated by code blocks.
: It should be "RESULTS".  However any capitalization may be
: used.

** org-odt-convert-process =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-convert-process
   :END:

- *Type:* (choice :convert-widget (lambd...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-convert-process&sr=1][Find modifications in git logs]]

: Use this converter to convert from "odt" format to other formats.
: During customization, the list of converter names are populated
: from `org-odt-convert-processes'.

** org-beamer-subtitle-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-subtitle-format
   :END:

- *Type:* (string :tag "Format string")
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-subtitle-format&sr=1][Find modifications in git logs]]

: Format string used for transcoded subtitle.
: The format string should have at most one "%s"-expression,
: which is replaced with the subtitle.

** org-ascii-format-inlinetask-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-format-inlinetask-function
   :END:

- *Type:* function
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-format-inlinetask-function&sr=1][Find modifications in git logs]]

: Function called to format an inlinetask in ASCII.
: 
: The function must accept nine parameters:
:   TODO       the todo keyword, as a string
:   TODO-TYPE  the todo type, a symbol among `todo', `done' and nil.
:   PRIORITY   the inlinetask priority, as a string
:   NAME       the inlinetask name, as a string.
:   TAGS       the inlinetask tags, as a list of strings.
:   CONTENTS   the contents of the inlinetask, as a string.
:   WIDTH      the width of the inlinetask, as a number.
:   INLINETASK the inlinetask itself.
:   INFO       the info channel.
: 
: The function should return either the string to be exported or
: nil to ignore the inline task.

** org-display-custom-times =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-display-custom-times
   :END:

- *Type:* sexp
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-display-custom-times&sr=1][Find modifications in git logs]]

: Non-nil means overlay custom formats over all time stamps.
: The formats are defined through the variable `org-time-stamp-custom-formats'.
: To turn this on on a per-file basis, insert anywhere in the file:
:    #+STARTUP: customtime

** org-table-tab-jumps-over-hlines =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-tab-jumps-over-hlines
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-tab-jumps-over-hlines&sr=1][Find modifications in git logs]]

: Non-nil means tab in the last column of a table with jump over a hline.
: If a horizontal separator line is following the current line,
: `org-table-next-field' can either create a new row before that line, or jump
: over the line.  When this option is nil, a new line will be created before
: this line.

** org-log-states-order-reversed =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-states-order-reversed
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-states-order-reversed&sr=1][Find modifications in git logs]]

: Non-nil means the latest state note will be directly after heading.
: When nil, the state change notes will be ordered according to time.
: 
: This option can also be set with on a per-file-basis with
: 
:    #+STARTUP: logstatesreversed
:    #+STARTUP: nologstatesreversed

** org-babel-python-mode =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-python-mode
   :END:

- *Type:* symbol
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-python.el;hb=HEAD][ob-python.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-python-mode&sr=1][Find modifications in git logs]]

: Preferred python mode for use in running python interactively.
: This will typically be either `python' or `python-mode'.

** org-clock-out-switch-to-state =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-out-switch-to-state
   :END:

- *Type:* (choice (const :tag "Don't for...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-out-switch-to-state&sr=1][Find modifications in git logs]]

: Set task to a special todo state after clocking out.
: The value should be the state to which the entry should be
: switched.  If the value is a function, it must take one
: parameter (the current TODO state of the item) and return the
: state to switch it to.

** org-agenda-show-outline-path =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-outline-path
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-outline-path&sr=1][Find modifications in git logs]]

: Non-nil means show outline path in echo area after line motion.

** org-html-postamble =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-postamble
   :END:

- *Type:* (choice (const :tag "No postam...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-postamble&sr=1][Find modifications in git logs]]

: Non-nil means insert a postamble in HTML export.
: 
: When set to `auto', check against the
: `org-export-with-author/email/creator/date' variables to set the
: content of the postamble.  When set to a string, use this string
: as the postamble.  When t, insert a string as defined by the
: formatting string in `org-html-postamble-format'.
: 
: When set to a function, apply this function and insert the
: returned string.  The function takes the property list of export
: options as its only argument.
: 
: Setting :html-postamble in publishing projects will take
: precedence over this variable.

** org-gnus-prefer-web-links =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-gnus-prefer-web-links
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-gnus.el;hb=HEAD][org-gnus.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-gnus-prefer-web-links&sr=1][Find modifications in git logs]]

: If non-nil, `org-store-link' creates web links to Google groups or Gmane.
: \<org-mode-map>When nil, Gnus will be used for such links.
: Using a prefix argument to the command `\[org-store-link]' (`org-store-link')
: negates this setting for the duration of the command.

** org-export-async-init-file =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-async-init-file
   :END:

- *Type:* (choice (const :tag "Regular s...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-async-init-file&sr=1][Find modifications in git logs]]

: File used to initialize external export process.
: 
: Value must be either nil or an absolute file name.  When nil, the
: external process is launched like a regular Emacs session,
: loading user's initialization file and any site specific
: configuration.  If a file is provided, it, and only it, is loaded
: at start-up.
: 
: Therefore, using a specific configuration makes the process to
: load faster and the export more portable.

** org-use-property-inheritance =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-property-inheritance
   :END:

- *Type:* (choice (const :tag "Not" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-property-inheritance&sr=1][Find modifications in git logs]]

: Non-nil means properties apply also for sublevels.
: 
: This setting is chiefly used during property searches.  Turning it on can
: cause significant overhead when doing a search, which is why it is not
: on by default.
: 
: When nil, only the properties directly given in the current entry count.
: When t, every property is inherited.  The value may also be a list of
: properties that should have inheritance, or a regular expression matching
: properties that should be inherited.
: 
: However, note that some special properties use inheritance under special
: circumstances (not in searches).  Examples are CATEGORY, ARCHIVE, COLUMNS,
: and the properties ending in "_ALL" when they are used as descriptor
: for valid values of a property.
: 
: Note for programmers:
: When querying an entry with `org-entry-get',  you can control if inheritance
: should be used.  By default, `org-entry-get' looks only at the local
: properties.  You can request inheritance by setting the inherit argument
: to t (to force inheritance) or to `selective' (to respect the setting
: in this variable).

** org-tag-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-tag-alist
   :END:

- *Type:* (repeat (choice (cons (string ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tag-alist&sr=1][Find modifications in git logs]]

: Default tags available in Org files.
: 
: The value of this variable is an alist.  Associations either:
: 
:   (TAG)
:   (TAG . SELECT)
:   (SPECIAL)
: 
: where TAG is a tag as a string, SELECT is character, used to
: select that tag through the fast tag selection interface, and
: SPECIAL is one of the following keywords: `:startgroup',
: `:startgrouptag', `:grouptags', `:engroup', `:endgrouptag' or
: `:newline'.  These keywords are used to define a hierarchy of
: tags.  See manual for details.
: 
: When this variable is nil, Org mode bases tag input on what is
: already in the buffer.  The value can be overridden locally by
: using a TAGS keyword, e.g.,
: 
:   #+TAGS: tag1 tag2
: 
: See also `org-tag-persistent-alist' to sidestep this behavior.

** org-odt-prettify-xml =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-prettify-xml
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-prettify-xml&sr=1][Find modifications in git logs]]

: Specify whether or not the xml output should be prettified.
: When this option is turned on, `indent-region' is run on all
: component xml buffers before they are saved.  Turn this off for
: regular use.  Turn this on if you need to examine the xml
: visually.

** org-agenda-prefix-format =(quote ((agenda . " %i %-12:c%...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-prefix-format
   :END:

- *Type:* (choice (string :tag "General ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-prefix-format&sr=1][Find modifications in git logs]]

: Format specifications for the prefix of items in the agenda views.
: An alist with five entries, each for the different agenda types.  The
: keys of the sublists are `agenda', `timeline', `todo', `search' and `tags'.
: The values are format strings.
: 
: This format works similar to a printf format, with the following meaning:
: 
:   %c   the category of the item, "Diary" for entries from the diary,
:        or as given by the CATEGORY keyword or derived from the file name
:   %e   the effort required by the item
:   %l   the level of the item (insert X space(s) if item is of level X)
:   %i   the icon category of the item, see `org-agenda-category-icon-alist'
:   %T   the last tag of the item (ignore inherited tags, which come first)
:   %t   the HH:MM time-of-day specification if one applies to the entry
:   %s   Scheduling/Deadline information, a short string
:   %b   show breadcrumbs, i.e., the names of the higher levels
:   %(expression) Eval EXPRESSION and replace the control string
:                 by the result
: 
: All specifiers work basically like the standard `%s' of printf, but may
: contain two additional characters: a question mark just after the `%'
: and a whitespace/punctuation character just before the final letter.
: 
: If the first character after `%' is a question mark, the entire field
: will only be included if the corresponding value applies to the current
: entry.  This is useful for fields which should have fixed width when
: present, but zero width when absent.  For example, "%?-12t" will
: result in a 12 character time field if a time of the day is specified,
: but will completely disappear in entries which do not contain a time.
: 
: If there is punctuation or whitespace character just before the
: final format letter, this character will be appended to the field
: value if the value is not empty.  For example, the format
: "%-12:c" leads to "Diary: " if the category is "Diary".  If
: the category is empty, no additional colon is inserted.
: 
: The default value for the agenda sublist is "  %-12:c%?-12t% s",
: which means:
: 
: - Indent the line with two space characters
: - Give the category a 12 chars wide field, padded with whitespace on
:   the right (because of `-').  Append a colon if there is a category
:   (because of `:').
: - If there is a time-of-day, put it into a 12 chars wide field.  If no
:   time, don't put in an empty field, just skip it (because of '?').
: - Finally, put the scheduling information.
: 
: See also the variables `org-agenda-remove-times-when-in-prefix' and
: `org-agenda-remove-tags'.
: 
: Custom commands can set this variable in the options section.

** org-agenda-search-view-max-outline-level =0=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-search-view-max-outline-level
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-search-view-max-outline-level&sr=1][Find modifications in git logs]]

: Maximum outline level to display in search view.
: E.g. when this is set to 1, the search view will only
: show headlines of level 1.  When set to 0, the default
: value, don't limit agenda view by outline level.

** org-agenda-show-all-dates =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-all-dates
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-all-dates&sr=1][Find modifications in git logs]]

: Non-nil means `org-agenda' shows every day in the selected range.
: When nil, only the days which actually have entries are shown.

** org-id-uuid-program =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-uuid-program
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-uuid-program&sr=1][Find modifications in git logs]]

: The uuidgen program.

** org-refile-active-region-within-subtree =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-refile-active-region-within-subtree
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile-active-region-within-subtree&sr=1][Find modifications in git logs]]

: Non-nil means also refile active region within a subtree.
: 
: By default `org-refile' doesn't allow refiling regions if they
: don't contain a set of subtrees, but it might be convenient to
: do so sometimes: in that case, the first line of the region is
: converted to a headline before refiling.

** org-export-with-title =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-title
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-title&sr=1][Find modifications in git logs]]

: Non-nil means print title into the exported file.
: This option can also be set with the OPTIONS keyword,
: e.g. "title:nil".

** org-export-creator-string =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-creator-string
   :END:

- *Type:* (string :tag "Creator string")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-creator-string&sr=1][Find modifications in git logs]]

: Information about the creator of the document.
: This option can also be set on with the CREATOR keyword.

** org-texinfo-node-description-column =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-node-description-column
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-node-description-column&sr=1][Find modifications in git logs]]

: Column at which to start the description in the node listings.
: If a node title is greater than this length, the description will
: be placed after the end of the title.

** org-agenda-skip-timestamp-if-deadline-is-shown =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-timestamp-if-deadline-is-shown
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-timestamp-if-deadline-is-shown&sr=1][Find modifications in git logs]]

: Non-nil means skip timestamp line if same entry shows because of deadline.
: In the agenda of today, an entry can show up multiple times
: because it has both a plain timestamp and has a nearby deadline.
: When this variable is t, then only the deadline is shown and the
: fact that the entry has a timestamp for or including today is not
: shown.  When this variable is nil, the entry will be shown
: several times.

** org-allow-promoting-top-level-subtree =(funcall (function (closure (b...=
   :PROPERTIES:
   :CUSTOM_ID: org-allow-promoting-top-level-subtree
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-allow-promoting-top-level-subtree&sr=1][Find modifications in git logs]]

: When non-nil, allow promoting a top level subtree.
: The leading star of the top level headline will be replaced
: by a #.

** org-archive-reversed-order =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-reversed-order
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-reversed-order&sr=1][Find modifications in git logs]]

: Non-nil means make the tree first child under the archive heading, not last.

** org-keep-stored-link-after-insertion =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-keep-stored-link-after-insertion
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-keep-stored-link-after-insertion&sr=1][Find modifications in git logs]]

: Non-nil means keep link in list for entire session.
: \<org-mode-map>
: The command `org-store-link' adds a link pointing to the current
: location to an internal list.  These links accumulate during a session.
: The command `org-insert-link' can be used to insert links into any
: Org file (offering completion for all stored links).
: 
: When this option is nil, every link which has been inserted once using
: `\[org-insert-link]' will be removed from the list, to make completing the unused
: links more efficient.

** org-scheduled-delay-days =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-scheduled-delay-days
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-scheduled-delay-days&sr=1][Find modifications in git logs]]

: Number of days before a scheduled item becomes active.
: This variable governs the display in sparse trees and in the agenda.
: The default value (i.e. 0) means: don't delay scheduled item.
: When negative, it means use this number (the absolute value of it)
: even if a scheduled item has a different individual delay time
: specified.
: 
: Custom commands can set this variable in the options section.

** org-crypt-tag-matcher =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-crypt-tag-matcher
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-crypt.el;hb=HEAD][org-crypt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-crypt-tag-matcher&sr=1][Find modifications in git logs]]

: The tag matcher used to find headings whose contents should be encrypted.
: 
: See the "Match syntax" section of the org manual for more details.

** org-edit-timestamp-down-means-later =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-timestamp-down-means-later
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-timestamp-down-means-later&sr=1][Find modifications in git logs]]

: Non-nil means S-down will increase the time in a time stamp.
: When nil, S-up will increase.

** org-ascii-inlinetask-width =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-inlinetask-width
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-inlinetask-width&sr=1][Find modifications in git logs]]

: Width of inline tasks, in number of characters.
: This number ignores any margin.

** org-html-container-element =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-container-element
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-container-element&sr=1][Find modifications in git logs]]

: HTML element to use for wrapping top level sections.
: Can be set with the in-buffer HTML_CONTAINER property or for
: publishing, with :html-container.
: 
: Note that changing the default will prevent you from using
: org-info.js for your website.

** org-babel-noweb-wrap-end =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-noweb-wrap-end
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-noweb-wrap-end&sr=1][Find modifications in git logs]]

: String used to end a noweb reference in a code block.
: See also `org-babel-noweb-wrap-start'.

** org-odt-create-custom-styles-for-srcblocks =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-create-custom-styles-for-srcblocks
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-create-custom-styles-for-srcblocks&sr=1][Find modifications in git logs]]

: Whether custom styles for colorized source blocks be automatically created.
: When this option is turned on, the exporter creates custom styles
: for source blocks based on the advice of `htmlfontify'.  Creation
: of custom styles happen as part of `org-odt-hfy-face-to-css'.
: 
: When this option is turned off exporter does not create such
: styles.
: 
: Use the latter option if you do not want the custom styles to be
: based on your current display settings.  It is necessary that the
: styles.xml already contains needed styles for colorizing to work.
: 
: This variable is effective only if `org-odt-fontify-srcblocks' is
: turned on.

** org-export-with-special-strings =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-special-strings
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-special-strings&sr=1][Find modifications in git logs]]

: Non-nil means interpret "\-", "--" and "---" for export.
: 
: When this option is turned on, these strings will be exported as:
: 
:    Org     HTML     LaTeX    UTF-8
:   -----+----------+--------+-------
:    \-    &shy;      \-
:    --    &ndash;    --         –
:    ---   &mdash;    ---        —
:    ...   &hellip;   \ldots     …
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "-:nil".

** org-indirect-buffer-display =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-indirect-buffer-display
   :END:

- *Type:* (choice (const :tag "In curren...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indirect-buffer-display&sr=1][Find modifications in git logs]]

: How should indirect tree buffers be displayed?
: 
: This applies to indirect buffers created with the commands
: `org-tree-to-indirect-buffer' and `org-agenda-tree-to-indirect-buffer'.
: 
: Valid values are:
: current-window   Display in the current window
: other-window     Just display in another window.
: dedicated-frame  Create one new frame, and re-use it each time.
: new-frame        Make a new frame each time.  Note that in this case
:                  previously-made indirect buffers are kept, and you need to
:                  kill these buffers yourself.

** org-html-infojs-template =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-infojs-template
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-infojs-template&sr=1][Find modifications in git logs]]

: The template for the export style additions when org-info.js is used.
: Option settings will replace the %MANAGER-OPTIONS cookie.

** org-deadline-warning-days =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-deadline-warning-days
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-deadline-warning-days&sr=1][Find modifications in git logs]]

: Number of days before expiration during which a deadline becomes active.
: This variable governs the display in sparse trees and in the agenda.
: When 0 or negative, it means use this number (the absolute value of it)
: even if a deadline has a different individual lead time specified.
: 
: Custom commands can set this variable in the options section.

** org-use-sub-superscripts =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-sub-superscripts
   :END:

- *Type:* (choice (const :tag "Always in...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-sub-superscripts&sr=1][Find modifications in git logs]]

: Non-nil means interpret "_" and "^" for display.
: 
: If you want to control how Org exports those characters, see
: `org-export-with-sub-superscripts'.  `org-use-sub-superscripts'
: used to be an alias for `org-export-with-sub-superscripts' in
: Org <8.0, it is not anymore.
: 
: When this option is turned on, you can use TeX-like syntax for
: sub- and superscripts within the buffer.  Several characters after
: "_" or "^" will be considered as a single item - so grouping
: with {} is normally not needed.  For example, the following things
: will be parsed as single sub- or superscripts:
: 
:  10^24   or   10^tau     several digits will be considered 1 item.
:  10^-12  or   10^-tau    a leading sign with digits or a word
:  x^2-y^3                 will be read as x^2 - y^3, because items are
: 			 terminated by almost any nonword/nondigit char.
:  x_{i^2} or   x^(2-i)    braces or parenthesis do grouping.
: 
: Still, ambiguity is possible.  So when in doubt, use {} to enclose
: the sub/superscript.  If you set this variable to the symbol `{}',
: the braces are *required* in order to trigger interpretations as
: sub/superscript.  This can be helpful in documents that need "_"
: frequently in plain text.

** org-agenda-insert-diary-extract-time =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-insert-diary-extract-time
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-insert-diary-extract-time&sr=1][Find modifications in git logs]]

: Non-nil means extract any time specification from the diary entry.

** org-html-footnote-format =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-footnote-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-footnote-format&sr=1][Find modifications in git logs]]

: The format for the footnote reference.
: %s will be replaced by the footnote reference itself.

** org-texinfo-remove-logfiles =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-remove-logfiles
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-remove-logfiles&sr=1][Find modifications in git logs]]

: Non-nil means remove the logfiles produced by compiling a Texinfo file.
: By default, logfiles are files with these extensions: .aux, .toc,
: .cp, .fn, .ky, .pg and .tp.  To define the set of logfiles to remove,
: set `org-texinfo-logfiles-extensions'.

** org-html-format-headline-function =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-format-headline-function
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-format-headline-function&sr=1][Find modifications in git logs]]

: Function to format headline text.
: 
: This function will be called with six arguments:
: TODO      the todo keyword (string or nil).
: TODO-TYPE the type of todo (symbol: `todo', `done', nil)
: PRIORITY  the priority of the headline (integer or nil)
: TEXT      the main headline text (string).
: TAGS      the tags (string or nil).
: INFO      the export options (plist).
: 
: The function result will be used in the section format string.

** org-archive-file-header-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-file-header-format
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-file-header-format&sr=1][Find modifications in git logs]]

: The header format string for newly created archive files.
: When nil, no header will be inserted.
: When a string, a %s formatter will be replaced by the file name.

** org-protocol-default-template-key =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-protocol-default-template-key
   :END:

- *Type:* (choice (const nil) (string))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-protocol.el;hb=HEAD][org-protocol.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-protocol-default-template-key&sr=1][Find modifications in git logs]]

: The default template key to use.
: This is usually a single character string but can also be a
: string with two characters.

** org-latex-known-warnings =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-known-warnings
   :END:

- *Type:* (repeat (cons (string :tag "Re...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-known-warnings&sr=1][Find modifications in git logs]]

: Alist of regular expressions and associated messages for the user.
: The regular expressions are used to find possible warnings in the
: log of a latex-run.  These warnings will be reported after
: calling `org-latex-compile'.

** org-clock-clocktable-formatter =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-clocktable-formatter
   :END:

- *Type:* function
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-clocktable-formatter&sr=1][Find modifications in git logs]]

: Function to turn clocking data into a table.
: For more information, see `org-clocktable-write-default'.

** org-bibtex-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-tags
   :END:

- *Type:* (repeat :tag "Tag" (string))
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-tags&sr=1][Find modifications in git logs]]

: List of tag(s) that should be added to new bib entries.

** org-lowest-priority =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-lowest-priority
   :END:

- *Type:* character
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-lowest-priority&sr=1][Find modifications in git logs]]

: The lowest priority of TODO items.  A character like ?A, ?B etc.
: Must have a larger ASCII number than `org-highest-priority'.

** org-agenda-log-mode-add-notes =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-log-mode-add-notes
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-log-mode-add-notes&sr=1][Find modifications in git logs]]

: Non-nil means add first line of notes to log entries in agenda views.
: If a log item like a state change or a clock entry is associated with
: notes, the first line of these notes will be added to the entry in the
: agenda display.

** org-pretty-entities =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-pretty-entities
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-pretty-entities&sr=1][Find modifications in git logs]]

: Non-nil means show entities as UTF8 characters.
: When nil, the \name form remains in the buffer.

** org-ascii-list-margin =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-list-margin
   :END:

- *Type:* integer
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-list-margin&sr=1][Find modifications in git logs]]

: Width of margin used for plain lists, in characters.
: This margin applies to top level list only, not to its
: sub-lists.

** org-id-track-globally =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-track-globally
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-track-globally&sr=1][Find modifications in git logs]]

: Non-nil means track IDs through files, so that links work globally.
: This work by maintaining a hash table for IDs and writing this table
: to disk when exiting Emacs.  Because of this, it works best if you use
: a single Emacs process, not many.
: 
: When nil, IDs are not tracked.  Links to IDs will still work within
: a buffer, but not if the entry is located in another file.
: IDs can still be used if the entry with the id is in the same file as
: the link.

** org-publish-sitemap-file-entry-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-sitemap-file-entry-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-compat.el;hb=HEAD][org-compat.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-sitemap-file-entry-format&sr=1][Find modifications in git logs]]

: Format string for site-map file entry.
: You could use brackets to delimit on what part the link will be.
: 
: %t is the title.
: %a is the author.
: %d is the date formatted using `org-publish-sitemap-date-format'.

** org-babel-latex-htlatex-packages =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-latex-htlatex-packages
   :END:

- *Type:* (repeat (string))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-latex.el;hb=HEAD][ob-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-latex-htlatex-packages&sr=1][Find modifications in git logs]]

: Packages to use for htlatex export.

** org-export-coding-system =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-coding-system
   :END:

- *Type:* coding-system
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-coding-system&sr=1][Find modifications in git logs]]

: Coding system for the exported file.

** org-texinfo-inactive-timestamp-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-inactive-timestamp-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-inactive-timestamp-format&sr=1][Find modifications in git logs]]

: A printf format string to be applied to inactive timestamps.

** org-habit-show-habits-only-for-today =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-show-habits-only-for-today
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-show-habits-only-for-today&sr=1][Find modifications in git logs]]

: If non-nil, only show habits on today's agenda, and not for future days.
: Note that even when shown for future days, the graph is always
: relative to the current effective date.

** org-ascii-table-use-ascii-art =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-table-use-ascii-art
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-table-use-ascii-art&sr=1][Find modifications in git logs]]

: Non-nil means table.el tables are turned into ascii-art.
: 
: It only makes sense when export charset is `utf-8'.  It is nil by
: default since it requires ascii-art-to-unicode.el package.  You
: can download it here:
: 
:   http://gnuvola.org/software/j/aa2u/ascii-art-to-unicode.el.

** org-html-head-include-scripts =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-head-include-scripts
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-head-include-scripts&sr=1][Find modifications in git logs]]

: Non-nil means include the JavaScript snippets in exported HTML files.
: The actual script is defined in `org-html-scripts' and should
: not be modified.

** org-todo-state-tags-triggers =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-state-tags-triggers
   :END:

- *Type:* (repeat (cons (choice :tag "Wh...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-state-tags-triggers&sr=1][Find modifications in git logs]]

: Tag changes that should be triggered by TODO state changes.
: This is a list.  Each entry is
: 
:   (state-change (tag . flag) .......)
: 
: State-change can be a string with a state, and empty string to indicate the
: state that has no TODO keyword, or it can be one of the symbols `todo'
: or `done', meaning any not-done or done state, respectively.

** org-babel-C++-compiler =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-C++-compiler
   :END:

- *Type:* string
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-C.el;hb=HEAD][ob-C.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-C++-compiler&sr=1][Find modifications in git logs]]

: Command used to compile a C++ source code file into an executable.
: May be either a command in the path, like g++
: or an absolute path name, like /usr/local/bin/g++
: parameter may be used, like g++ -v

** org-texinfo-link-with-unknown-path-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-link-with-unknown-path-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-link-with-unknown-path-format&sr=1][Find modifications in git logs]]

: Format string for links with unknown path type.

** org-table-copy-increment =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-copy-increment
   :END:

- *Type:* (choice (const :tag "Use the d...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-copy-increment&sr=1][Find modifications in git logs]]

: Non-nil means increment when copying current field with `\[org-table-copy-down]'.

** org-treat-insert-todo-heading-as-state-change =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-treat-insert-todo-heading-as-state-change
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-treat-insert-todo-heading-as-state-change&sr=1][Find modifications in git logs]]

: Non-nil means inserting a TODO heading is treated as state change.
: So when the command `\[org-insert-todo-heading]' is used, state change
: logging will apply if appropriate.  When nil, the new TODO item will
: be inserted directly, and no logging will take place.

** org-rss-image-url ="https://orgmode.org/img/org-mo...=
   :PROPERTIES:
   :CUSTOM_ID: org-rss-image-url
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-rss.el;hb=HEAD][ox-rss.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-rss-image-url&sr=1][Find modifications in git logs]]

: The URL of the an image for the RSS feed.

** org-latex-images-centered =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-images-centered
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-images-centered&sr=1][Find modifications in git logs]]

: When non-nil, images are centered.

** org-occur-case-fold-search =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-occur-case-fold-search
   :END:

- *Type:* (choice (const :tag "Case-sens...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-occur-case-fold-search&sr=1][Find modifications in git logs]]

: Non-nil means `org-occur' should be case-insensitive.
: If set to `smart' the search will be case-insensitive only if it
: doesn't specify any upper case character.

** org-duration-units =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-duration-units
   :END:

- *Type:* (choice (const :tag "H:MM" (qu...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-duration.el;hb=HEAD][org-duration.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-duration-units&sr=1][Find modifications in git logs]]

: Conversion factor to minutes for a duration.
: 
: Each entry has the form (UNIT . MODIFIER).
: 
: In a duration string, a number followed by UNIT is multiplied by
: the specified number of MODIFIER to obtain a duration in minutes.
: 
: For example, the following value
: 
:   \=`(("min" . 1)
:     ("h" . 60)
:     ("d" . ,(* 60 8))
:     ("w" . ,(* 60 8 5))
:     ("m" . ,(* 60 8 5 4))
:     ("y" . ,(* 60 8 5 4 10)))
: 
: is meaningful if you work an average of 8 hours per day, 5 days
: a week, 4 weeks a month and 10 months a year.
: 
: When setting this variable outside the Customize interface, make
: sure to call the following command:
: 
:   \[org-duration-set-regexps]

** org-man-source-highlight =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-source-highlight
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-source-highlight&sr=1][Find modifications in git logs]]

: Use GNU source highlight to embellish source blocks 

** org-table-formula-evaluate-inline =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-formula-evaluate-inline
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-formula-evaluate-inline&sr=1][Find modifications in git logs]]

: Non-nil means TAB and RET evaluate a formula in current table field.
: If the current field starts with an equal sign, it is assumed to be a formula
: which should be evaluated as described in the manual and in the documentation
: string of the command `org-table-eval-formula'.  This feature requires the
: Emacs calc package.
: When this variable is nil, formula calculation is only available through
: the command `\[org-table-eval-formula]'.

** org-capture-templates =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-templates
   :END:

- *Type:* (repeat (choice :value ("" "" ...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-templates&sr=1][Find modifications in git logs]]

: Templates for the creation of new entries.
: 
: Each entry is a list with the following items:
: 
: keys         The keys that will select the template, as a string, characters
:              only, for example "a" for a template to be selected with a
:              single key, or "bt" for selection with two keys.  When using
:              several keys, keys using the same prefix key must be together
:              in the list and preceded by a 2-element entry explaining the
:              prefix key, for example
: 
:                      ("b" "Templates for marking stuff to buy")
: 
:              The "C" key is used by default for quick access to the
:              customization of the template variable.  But if you want to use
:              that key for a template, you can.
: 
: description  A short string describing the template, will be shown during
:              selection.
: 
: type         The type of entry.  Valid types are:
:                entry       an Org node, with a headline.  Will be filed
:                            as the child of the target entry or as a
:                            top-level entry.
:                item        a plain list item, will be placed in the
:                            first plain list at the target
:                            location.
:                checkitem   a checkbox item.  This differs from the
:                            plain list item only is so far as it uses a
:                            different default template.
:                table-line  a new line in the first table at target location.
:                plain       text to be inserted as it is.
: 
: target       Specification of where the captured item should be placed.
:              In Org files, targets usually define a node.  Entries will
:              become children of this node, other types will be added to the
:              table or list in the body of this node.
: 
:              Most target specifications contain a file name.  If that file
:              name is the empty string, it defaults to `org-default-notes-file'.
:              A file can also be given as a variable or as a function called
:              with no argument.  When an absolute path is not specified for a
:              target, it is taken as relative to `org-directory'.
: 
:              Valid values are:
: 
:              (file "path/to/file")
:                  Text will be placed at the beginning or end of that file
: 
:              (id "id of existing Org entry")
:                  File as child of this entry, or in the body of the entry
: 
:              (file+headline "path/to/file" "node headline")
:                  Fast configuration if the target heading is unique in the file
: 
:              (file+olp "path/to/file" "Level 1 heading" "Level 2" ...)
:                  For non-unique headings, the full outline path is safer
: 
:              (file+regexp  "path/to/file" "regexp to find location")
:                  File to the entry matching regexp
: 
:              (file+olp+datetree "path/to/file" "Level 1 heading" ...)
:                  Will create a heading in a date tree for today's date.
:                  If no heading is given, the tree will be on top level.
:                  To prompt for date instead of using TODAY, use the
:                  :time-prompt property.  To create a week-tree, use the
:                  :tree-type property.
: 
:              (file+function "path/to/file" function-finding-location)
:                  A function to find the right location in the file
: 
:              (clock)
:                 File to the entry that is currently being clocked
: 
:              (function function-finding-location)
:                 Most general way: write your own function which both visits
:                 the file and moves point to the right location
: 
: template     The template for creating the capture item.  If you leave this
:              empty, an appropriate default template will be used.  See below
:              for more details.  Instead of a string, this may also be one of
: 
:                  (file "/path/to/template-file")
:                  (function function-returning-the-template)
: 
:              in order to get a template from a file, or dynamically
:              from a function.
: 
: The rest of the entry is a property list of additional options.  Recognized
: properties are:
: 
:  :prepend            Normally newly captured information will be appended at
:                      the target location (last child, last table line,
:                      last list item...).  Setting this property will
:                      change that.
: 
:  :immediate-finish   When set, do not offer to edit the information, just
:                      file it away immediately.  This makes sense if the
:                      template only needs information that can be added
:                      automatically.
: 
:  :jump-to-captured   When set, jump to the captured entry when finished.
: 
:  :empty-lines        Set this to the number of lines the should be inserted
:                      before and after the new item.  Default 0, only common
:                      other value is 1.
: 
:  :empty-lines-before Set this to the number of lines the should be inserted
:                      before the new item.  Overrides :empty-lines for the
:                      number lines inserted before.
: 
:  :empty-lines-after  Set this to the number of lines the should be inserted
:                      after the new item.  Overrides :empty-lines for the
:                      number of lines inserted after.
: 
:  :clock-in           Start the clock in this item.
: 
:  :clock-keep         Keep the clock running when filing the captured entry.
: 
:  :clock-resume       Start the interrupted clock when finishing the capture.
:                      Note that :clock-keep has precedence over :clock-resume.
:                      When setting both to t, the current clock will run and
:                      the previous one will not be resumed.
: 
:  :time-prompt        Prompt for a date/time to be used for date/week trees
:                      and when filling the template.
: 
:  :tree-type          When `week', make a week tree instead of the month tree.
: 
:  :unnarrowed         Do not narrow the target buffer, simply show the
:                      full buffer.  Default is to narrow it so that you
:                      only see the new stuff.
: 
:  :table-line-pos     Specification of the location in the table where the
:                      new line should be inserted.  It should be a string like
:                      "II-3", meaning that the new line should become the
:                      third line before the second horizontal separator line.
: 
:  :kill-buffer        If the target file was not yet visited by a buffer when
:                      capture was invoked, kill the buffer again after capture
:                      is finalized.
: 
: The template defines the text to be inserted.  Often this is an
: Org mode entry (so the first line should start with a star) that
: will be filed as a child of the target headline.  It can also be
: freely formatted text.  Furthermore, the following %-escapes will
: be replaced with content and expanded:
: 
:   %[pathname] Insert the contents of the file given by
:               `pathname'.  These placeholders are expanded at the very
:               beginning of the process so they can be used to extend the
:               current template.
:   %(sexp)     Evaluate elisp `(sexp)' and replace it with the results.
:               Only placeholders pre-existing within the template, or
:               introduced with %[pathname] are expanded this way.  Since this
:               happens after expanding non-interactive %-escapes, those can
:               be used to fill the expression.
:   %<...>      The result of format-time-string on the ... format specification.
:   %t          Time stamp, date only.
:   %T          Time stamp with date and time.
:   %u, %U      Like the above, but inactive time stamps.
:   %i          Initial content, copied from the active region.  If %i is
:               indented, the entire inserted text will be indented as well.
:   %a          Annotation, normally the link created with `org-store-link'.
:   %A          Like %a, but prompt for the description part.
:   %l          Like %a, but only insert the literal link.
:   %c          Current kill ring head.
:   %x          Content of the X clipboard.
:   %k          Title of currently clocked task.
:   %K          Link to currently clocked task.
:   %n          User name (taken from the variable `user-full-name').
:   %f          File visited by current buffer when org-capture was called.
:   %F          Full path of the file or directory visited by current buffer.
:   %:keyword   Specific information for certain link types, see below.
:   %^g         Prompt for tags, with completion on tags in target file.
:   %^G         Prompt for tags, with completion on all tags in all agenda files.
:   %^t         Like %t, but prompt for date.  Similarly %^T, %^u, %^U.
:               You may define a prompt like: %^{Please specify birthday}t
:   %^C         Interactive selection of which kill or clip to use.
:   %^L         Like %^C, but insert as link.
:   %^{prop}p   Prompt the user for a value for property `prop'.
:   %^{prompt}  Prompt the user for a string and replace this sequence with it.
:               A default value and a completion table ca be specified like this:
:               %^{prompt|default|completion2|completion3|...}.
:   %?          After completing the template, position cursor here.
:   %\1 ... %\N Insert the text entered at the nth %^{prompt}, where N
:               is a number, starting from 1.
: 
: Apart from these general escapes, you can access information specific to
: the link type that is created.  For example, calling `org-capture' in emails
: or in Gnus will record the author and the subject of the message, which you
: can access with "%:from" and "%:subject", respectively.  Here is a
: complete list of what is recorded for each link type.
: 
: Link type               |  Available information
: ------------------------+------------------------------------------------------
: bbdb                    |  %:type %:name %:company
: vm, wl, mh, mew, rmail, |  %:type %:subject %:message-id
: gnus                    |  %:from %:fromname %:fromaddress
:                         |  %:to   %:toname   %:toaddress
:                         |  %:fromto (either "to NAME" or "from NAME")
:                         |  %:date %:date-timestamp (as active timestamp)
:                         |  %:date-timestamp-inactive (as inactive timestamp)
: gnus                    |  %:group, for messages also all email fields
: eww, w3, w3m            |  %:type %:url
: info                    |  %:type %:file %:node
: calendar                |  %:type %:date
: 
: When you need to insert a literal percent sign in the template,
: you can escape ambiguous cases with a backward slash, e.g., \%i.

** org-latex-packages-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-packages-alist
   :END:

- *Type:* (repeat (choice (list :tag "op...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-packages-alist&sr=1][Find modifications in git logs]]

: Alist of packages to be inserted in every LaTeX header.
: 
: These will be inserted after `org-latex-default-packages-alist'.
: Each element is either a cell or a string.
: 
: A cell is of the format:
: 
:     ("options" "package" SNIPPET-FLAG)
: 
: SNIPPET-FLAG, when non-nil, indicates that this package is also
: needed when turning LaTeX snippets into images for inclusion into
: non-LaTeX output.
: 
: A string will be inserted as-is in the header of the document.
: 
: Make sure that you only list packages here which:
: 
:   - you want in every file;
:   - do not conflict with the setup in `org-format-latex-header';
:   - do not conflict with the default packages in
:     `org-latex-default-packages-alist'.

** org-latex-title-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-title-command
   :END:

- *Type:* (string :tag "Format string")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-title-command&sr=1][Find modifications in git logs]]

: The command used to insert the title just after \begin{document}.
: 
: This format string may contain these elements:
: 
:   %a for AUTHOR keyword
:   %t for TITLE keyword
:   %s for SUBTITLE keyword
:   %k for KEYWORDS line
:   %d for DESCRIPTION line
:   %c for CREATOR line
:   %l for Language keyword
:   %L for capitalized language keyword
:   %D for DATE keyword
: 
: If you need to use a "%" character, you need to escape it
: like that: "%%".
: 
: Setting :latex-title-command in publishing projects will take
: precedence over this variable.

** org-bibtex-tags-are-keywords =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-tags-are-keywords
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-tags-are-keywords&sr=1][Find modifications in git logs]]

: Convert the value of the keywords field to tags and vice versa.
: 
: When non-nil, comma-separated entries in a bibtex entry's keywords
: field will be converted to Org tags.  Note: spaces will be escaped
: with underscores, and characters that are not permitted in Org
: tags will be removed.
: 
: When non-nil, local tags in an Org entry will be exported as
: a comma-separated string of keywords when exported to bibtex.
: If `org-bibtex-inherit-tags' is non-nil, inherited tags will also
: be exported as keywords.  Tags defined in `org-bibtex-tags' or
: `org-bibtex-no-export-tags' will not be exported.

** org-html-home/up-format =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-home/up-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-home/up-format&sr=1][Find modifications in git logs]]

: Snippet used to insert the HOME and UP links.
: This is a format string, the first %s will receive the UP link,
: the second the HOME link.  If both `org-html-link-up' and
: `org-html-link-home' are empty, the entire snippet will be
: ignored.

** org-mobile-checksum-binary =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-checksum-binary
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-checksum-binary&sr=1][Find modifications in git logs]]

: Executable used for computing checksums of agenda files.

** org-clock-mode-line-total =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-mode-line-total
   :END:

- *Type:* (choice (const :tag "Current c...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-mode-line-total&sr=1][Find modifications in git logs]]

: Default setting for the time included for the mode line clock.
: This can be overruled locally using the CLOCK_MODELINE_TOTAL property.
: Allowed values are:
: 
: current  Only the time in the current instance of the clock
: today    All time clocked into this task today
: repeat   All time clocked into this task since last repeat
: all      All time ever recorded for this task
: auto     Automatically, either `all', or `repeat' for repeating tasks

** org-structure-template-alist =(funcall (function (closure (a...=
   :PROPERTIES:
   :CUSTOM_ID: org-structure-template-alist
   :END:

- *Type:* (repeat (list (string :tag "Ke...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-structure-template-alist&sr=1][Find modifications in git logs]]

: Structure completion elements.
: This is a list of abbreviation keys and values.  The value gets inserted
: if you type `<' followed by the key and then press the completion key,
: usually `TAB'.  %file will be replaced by a file name after prompting
: for the file using completion.  The cursor will be placed at the position
: of the `?' in the template.
: There are two templates for each key, the first uses the original Org syntax,
: the second uses Emacs Muse-like syntax tags.  These Muse-like tags become
: the default when the /org-mtags.el/ module has been loaded.  See also the
: variable `org-mtags-prefer-muse-templates'.

** orgtbl-radio-table-templates =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-radio-table-templates
   :END:

- *Type:* (repeat (list (symbol :tag "Ma...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-radio-table-templates&sr=1][Find modifications in git logs]]

: Templates for radio tables in different major modes.
: Each template must define lines that will be treated as a comment and that
: must contain the "BEGIN RECEIVE ORGTBL %n" and "END RECEIVE ORGTBL"
: lines where "%n" will be replaced with the name of the table during
: insertion of the template.  The transformed table will later be inserted
: between these lines.
: 
: The template should also contain a minimal table in a multiline comment.
: If multiline comments are not possible in the buffer language,
: you can pack it into a string that will not be used when the code
: is compiled or executed.  Above the table will you need a line with
: the fixed string "#+ORGTBL: SEND", followed by instruction on how to
: convert the table into a data structure useful in the
: language of the buffer.  Check the manual for the section on
: "Translator functions", and more generally check out
: https://orgmode.org/manual/Tables-in-arbitrary-syntax.html#Tables-in-arbitrary-syntax
: 
: All occurrences of %n in a template will be replaced with the name of the
: table, obtained by prompting the user.

** org-odt-use-date-fields =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-use-date-fields
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-use-date-fields&sr=1][Find modifications in git logs]]

: Non-nil, if timestamps should be exported as date fields.
: 
: When nil, export timestamps as plain text.
: 
: When non-nil, map `org-time-stamp-custom-formats' to a pair of
: OpenDocument date-styles with names "OrgDate1" and "OrgDate2"
: respectively.  A timestamp with no time component is formatted
: with style "OrgDate1" while one with explicit hour and minutes
: is formatted with style "OrgDate2".
: 
: This feature is experimental.  Most (but not all) of the common
: %-specifiers in `format-time-string' are supported.
: Specifically, locale-dependent specifiers like "%c", "%x" are
: formatted as canonical Org timestamps.  For finer control, avoid
: these %-specifiers.
: 
: Textual specifiers like "%b", "%h", "%B", "%a", "%A"
: etc., are displayed by the application in the default language
: and country specified in `org-odt-styles-file'.  Note that the
: default styles file uses language "en" and country "GB".  You
: can localize the week day and month strings in the exported
: document by setting the default language and country either using
: the application UI or through a custom styles file.
: 
: See `org-odt--build-date-styles' for implementation details.

** org-email-link-description-format =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-email-link-description-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-email-link-description-format&sr=1][Find modifications in git logs]]

: Format of the description part of a link to an email or usenet message.
: The following %-escapes will be replaced by corresponding information:
: 
: %F   full "From" field
: %f   name, taken from "From" field, address if no name
: %T   full "To" field
: %t   first name in "To" field, address if no name
: %c   correspondent.  Usually "from NAME", but if you sent it yourself, it
:      will be "to NAME".  See also the variable `org-from-is-user-regexp'.
: %s   subject
: %d   date
: %m   message-id.
: 
: You may use normal field width specification between the % and the letter.
: This is for example useful to limit the length of the subject.
: 
: Examples: "%f on: %.30s", "Email from %f", "Email %c"

** org-agenda-inhibit-startup =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-inhibit-startup
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-inhibit-startup&sr=1][Find modifications in git logs]]

: Inhibit startup when preparing agenda buffers.
: When this variable is t, the initialization of the Org agenda
: buffers is inhibited: e.g. the visibility state is not set, the
: tables are not re-aligned, etc.

** org-M-RET-may-split-line =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-M-RET-may-split-line
   :END:

- *Type:* (choice (const :tag "Always" t...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-M-RET-may-split-line&sr=1][Find modifications in git logs]]

: Non-nil means M-RET will split the line at the cursor position.
: When nil, it will go to the end of the line before making a
: new line.
: You may also set this option in a different way for different
: contexts.  Valid contexts are:
: 
: headline  when creating a new headline
: item      when creating a new item
: table     in a table field
: default   the value to be used for all contexts not explicitly
:           customized

** org-agenda-show-future-repeats =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-future-repeats
   :END:

- *Type:* (choice (const :tag "Show all ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-future-repeats&sr=1][Find modifications in git logs]]

: Non-nil shows repeated entries in the future part of the agenda.
: When set to the symbol `next' only the first future repeat is shown.

** org-koma-letter-author =(quote user-full-name)=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-author
   :END:

- *Type:* (radio (function-item user-ful...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-author&sr=1][Find modifications in git logs]]

: Sender's name.
: 
: This variable defaults to calling the function `user-full-name'
: which just returns the current function `user-full-name'.
: Alternatively a string, nil or a function may be given.
: Functions must return a string.
: 
: This option can also be set with the AUTHOR keyword.

** org-bibtex-prefix =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-prefix
   :END:

- *Type:* (choice (const nil) (string))
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-prefix&sr=1][Find modifications in git logs]]

: Optional prefix for all bibtex property names.
: For example setting to `BIB_' would allow interoperability with fireforg.

** org-latex-diary-timestamp-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-diary-timestamp-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-diary-timestamp-format&sr=1][Find modifications in git logs]]

: A printf format string to be applied to diary timestamps.

** org-attach-archive-delete =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-archive-delete
   :END:

- *Type:* (choice (const :tag "Never del...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-archive-delete&sr=1][Find modifications in git logs]]

: Non-nil means attachments are deleted upon archiving a subtree.
: When set to `query', ask the user instead.

** org-html-format-inlinetask-function =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-format-inlinetask-function
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-format-inlinetask-function&sr=1][Find modifications in git logs]]

: Function called to format an inlinetask in HTML code.
: 
: The function must accept seven parameters:
:   TODO      the todo keyword, as a string
:   TODO-TYPE the todo type, a symbol among `todo', `done' and nil.
:   PRIORITY  the inlinetask priority, as a string
:   NAME      the inlinetask name, as a string.
:   TAGS      the inlinetask tags, as a list of strings.
:   CONTENTS  the contents of the inlinetask, as a string.
:   INFO      the export options, as a plist
: 
: The function should return the string to be exported.

** org-capture-use-agenda-date =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-use-agenda-date
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-use-agenda-date&sr=1][Find modifications in git logs]]

: Non-nil means use the date at point when capturing from agendas.
: When nil, you can still capture using the date at point with
: `\[org-agenda-capture]'.

** org-refile-use-outline-path =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-refile-use-outline-path
   :END:

- *Type:* (choice (const :tag "Not" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile-use-outline-path&sr=1][Find modifications in git logs]]

: Non-nil means provide refile targets as paths.
: So a level 3 headline will be available as level1/level2/level3.
: 
: When the value is `file', also include the file name (without directory)
: into the path.  In this case, you can also stop the completion after
: the file name, to get entries inserted as top level in the file.
: 
: When `full-file-path', include the full file path.
: 
: When `buffer-name', use the buffer name.

** org-latex-inactive-timestamp-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-inactive-timestamp-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-inactive-timestamp-format&sr=1][Find modifications in git logs]]

: A printf format string to be applied to inactive timestamps.

** org-latex-pdf-process =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-pdf-process
   :END:

- *Type:* (choice (repeat :tag "Shell co...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-pdf-process&sr=1][Find modifications in git logs]]

: Commands to process a LaTeX file to a PDF file.
: 
: This is a list of strings, each of them will be given to the
: shell as a command.  %f in the command will be replaced by the
: relative file name, %F by the absolute file name, %b by the file
: base name (i.e. without directory and extension parts), %o by the
: base directory of the file, %O by the absolute file name of the
: output file, %latex is the LaTeX compiler (see
: `org-latex-compiler'), and %bib is the BibTeX-like compiler (see
: `org-latex-bib-compiler').
: 
: The reason why this is a list is that it usually takes several
: runs of `pdflatex', maybe mixed with a call to `bibtex'.  Org
: does not have a clever mechanism to detect which of these
: commands have to be run to get to a stable result, and it also
: does not do any error checking.
: 
: Consider a smart LaTeX compiler such as `texi2dvi' or `latexmk',
: which calls the "correct" combinations of auxiliary programs.
: 
: Alternatively, this may be a Lisp function that does the
: processing, so you could use this to apply the machinery of
: AUCTeX or the Emacs LaTeX mode.  This function should accept the
: file name as its single argument.

** org-agenda-entry-text-exclude-regexps =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-entry-text-exclude-regexps
   :END:

- *Type:* (repeat (regexp))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-entry-text-exclude-regexps&sr=1][Find modifications in git logs]]

: List of regular expressions to clean up entry text.
: The complete matches of all regular expressions in this list will be
: removed from entry text before it is shown in the agenda.

** org-latex-listings =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-listings
   :END:

- *Type:* (choice (const :tag "Use listi...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-listings&sr=1][Find modifications in git logs]]

: Non-nil means export source code using the listings package.
: 
: This package will fontify source code, possibly even with color.
: If you want to use this, you also need to make LaTeX use the
: listings package, and if you want to have color, the color
: package.  Just add these to `org-latex-packages-alist', for
: example using customize, or with something like:
: 
:   (require \='ox-latex)
:   (add-to-list \='org-latex-packages-alist \='("" "listings"))
:   (add-to-list \='org-latex-packages-alist \='("" "color"))
: 
: Alternatively,
: 
:   (setq org-latex-listings \='minted)
: 
: causes source code to be exported using the minted package as
: opposed to listings.  If you want to use minted, you need to add
: the minted package to `org-latex-packages-alist', for example
: using customize, or with
: 
:   (require \='ox-latex)
:   (add-to-list \='org-latex-packages-alist \='("newfloat" "minted"))
: 
: In addition, it is necessary to install pygments
: (http://pygments.org), and to configure the variable
: `org-latex-pdf-process' so that the -shell-escape option is
: passed to pdflatex.
: 
: The minted choice has possible repercussions on the preview of
: latex fragments (see `org-preview-latex-fragment').  If you run
: into previewing problems, please consult
: 
:   https://orgmode.org/worg/org-tutorials/org-latex-preview.html

** org-columns-ellipses =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-ellipses
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-ellipses&sr=1][Find modifications in git logs]]

: The ellipses to be used when a field in column view is truncated.
: When this is the empty string, as many characters as possible are shown,
: but then there will be no visual indication that the field has been truncated.
: When this is a string of length N, the last N characters of a truncated
: field are replaced by this string.  If the column is narrower than the
: ellipses string, only part of the ellipses string will be shown.

** org-clock-report-include-clocking-task =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-report-include-clocking-task
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-report-include-clocking-task&sr=1][Find modifications in git logs]]

: When non-nil, include the current clocking task time in clock reports.

** org-html-klipsify-src =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-klipsify-src
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-klipsify-src&sr=1][Find modifications in git logs]]

: When non-nil, source code blocks are editable in exported presentation.

** org-latex-to-mathml-jar-file =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-to-mathml-jar-file
   :END:

- *Type:* (choice (const :tag "None" nil...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-to-mathml-jar-file&sr=1][Find modifications in git logs]]

: Value of"%j" in `org-latex-to-mathml-convert-command'.
: Use this to specify additional executable file say a jar file.
: 
: When using MathToWeb as the converter, specify the full-path to
: your mathtoweb.jar file.

** org-agenda-sorting-strategy =(quote ((agenda habit-down tim...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-sorting-strategy
   :END:

- *Type:* (choice (repeat :tag "General"...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-sorting-strategy&sr=1][Find modifications in git logs]]

: Sorting structure for the agenda items of a single day.
: This is a list of symbols which will be used in sequence to determine
: if an entry should be listed before another entry.  The following
: symbols are recognized:
: 
: time-up            Put entries with time-of-day indications first, early first
: time-down          Put entries with time-of-day indications first, late first
: timestamp-up       Sort by any timestamp, early first
: timestamp-down     Sort by any timestamp, late first
: scheduled-up       Sort by scheduled timestamp, early first
: scheduled-down     Sort by scheduled timestamp, late first
: deadline-up        Sort by deadline timestamp, early first
: deadline-down      Sort by deadline timestamp, late first
: ts-up              Sort by active timestamp, early first
: ts-down            Sort by active timestamp, late first
: tsia-up            Sort by inactive timestamp, early first
: tsia-down          Sort by inactive timestamp, late first
: category-keep      Keep the default order of categories, corresponding to the
: 		   sequence in `org-agenda-files'.
: category-up        Sort alphabetically by category, A-Z.
: category-down      Sort alphabetically by category, Z-A.
: tag-up             Sort alphabetically by last tag, A-Z.
: tag-down           Sort alphabetically by last tag, Z-A.
: priority-up        Sort numerically by priority, high priority last.
: priority-down      Sort numerically by priority, high priority first.
: todo-state-up      Sort by todo state, tasks that are done last.
: todo-state-down    Sort by todo state, tasks that are done first.
: effort-up          Sort numerically by estimated effort, high effort last.
: effort-down        Sort numerically by estimated effort, high effort first.
: user-defined-up    Sort according to `org-agenda-cmp-user-defined', high last.
: user-defined-down  Sort according to `org-agenda-cmp-user-defined', high first.
: habit-up           Put entries that are habits first
: habit-down         Put entries that are habits last
: alpha-up           Sort headlines alphabetically
: alpha-down         Sort headlines alphabetically, reversed
: 
: The different possibilities will be tried in sequence, and testing stops
: if one comparison returns a "not-equal".  For example, the default
:     '(time-up category-keep priority-down)
: means: Pull out all entries having a specified time of day and sort them,
: in order to make a time schedule for the current day the first thing in the
: agenda listing for the day.  Of the entries without a time indication, keep
: the grouped in categories, don't sort the categories, but keep them in
: the sequence given in `org-agenda-files'.  Within each category sort by
: priority.
: 
: Leaving out `category-keep' would mean that items will be sorted across
: categories by priority.
: 
: Instead of a single list, this can also be a set of list for specific
: contents, with a context symbol in the car of the list, any of
: `agenda', `todo', `tags', `search' for the corresponding agenda views.
: 
: Custom commands can bind this variable in the options section.

** org-inlinetask-show-first-star =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-inlinetask-show-first-star
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-inlinetask.el;hb=HEAD][org-inlinetask.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-inlinetask-show-first-star&sr=1][Find modifications in git logs]]

: Non-nil means display the first star of an inline task as additional marker.
: When nil, the first star is not shown.

** org-html-htmlize-font-prefix =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-htmlize-font-prefix
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-htmlize-font-prefix&sr=1][Find modifications in git logs]]

: The prefix for CSS class names for htmlize font specifications.

** org-texinfo-tables-verbatim =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-tables-verbatim
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-tables-verbatim&sr=1][Find modifications in git logs]]

: When non-nil, tables are exported verbatim.

** org-odt-pixels-per-inch =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-pixels-per-inch
   :END:

- *Type:* float
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-pixels-per-inch&sr=1][Find modifications in git logs]]

: Scaling factor for converting images pixels to inches.
: Use this for sizing of embedded images.  See Info node `(org)
: Images in ODT export' for more information.

** org-html-viewport =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-viewport
   :END:

- *Type:* (choice (const :tag "Disable" ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-viewport&sr=1][Find modifications in git logs]]

: Viewport options for mobile-optimized sites.
: 
: The following values are recognized
: 
: width          Size of the viewport.
: initial-scale  Zoom level when the page is first loaded.
: minimum-scale  Minimum allowed zoom level.
: maximum-scale  Maximum allowed zoom level.
: user-scalable  Whether zoom can be changed.
: 
: The viewport meta tag is inserted if this variable is non-nil.
: 
: See the following site for a reference:
: https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag

** org-babel-process-comment-text =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-process-comment-text
   :END:

- *Type:* function
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-process-comment-text&sr=1][Find modifications in git logs]]

: Function called to process raw Org text collected to be
: inserted as comments in tangled source-code files.  The function
: should take a single string argument and return a string
: result.  The default value is `org-remove-indentation'.

** org-koma-letter-use-phone =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-use-phone
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-use-phone&sr=1][Find modifications in git logs]]

: Non-nil prints sender's phone number.
: This option can also be set with the OPTIONS keyword, e.g.:
: "phone:t".

** org-agenda-tags-todo-honor-ignore-options =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-tags-todo-honor-ignore-options
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-tags-todo-honor-ignore-options&sr=1][Find modifications in git logs]]

: Non-nil means honor todo-list ignores options also in tags-todo search.
: The variables
:    `org-agenda-todo-ignore-with-date',
:    `org-agenda-todo-ignore-timestamp',
:    `org-agenda-todo-ignore-scheduled',
:    `org-agenda-todo-ignore-deadlines'
: make the global TODO list skip entries that have time stamps of certain
: kinds.  If this option is set, the same options will also apply for the
: tags-todo search, which is the general tags/property matcher
: restricted to unfinished TODO entries only.

** org-agenda-todo-ignore-scheduled =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-ignore-scheduled
   :END:

- *Type:* (choice (const :tag "Ignore fu...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-ignore-scheduled&sr=1][Find modifications in git logs]]

: Non-nil means, ignore some scheduled TODO items when making TODO list.
: This applies when creating the global todo list.
: Valid values are:
: 
: past     Don't show entries scheduled today or in the past.
: 
: future   Don't show entries scheduled in the future.
:          The idea behind this is that by scheduling it, you don't want to
:          think about it until the scheduled date.
: 
: all      Don't show any scheduled entries in the global todo list.
:          The idea behind this is that by scheduling it, you have already
:          "taken care" of this item.
: 
: t        Same as `all', for backward compatibility.
: 
: This variable can also have an integer as a value.  See
: `org-agenda-todo-ignore-timestamp' for more details.
: 
: See also `org-agenda-todo-ignore-with-date'.
: See also the variable `org-agenda-tags-todo-honor-ignore-options' if you want
: to make his option also apply to the tags-todo list.

** org-log-into-drawer =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-into-drawer
   :END:

- *Type:* (choice (const :tag "Not into ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-into-drawer&sr=1][Find modifications in git logs]]

: Non-nil means insert state change notes and time stamps into a drawer.
: When nil, state changes notes will be inserted after the headline and
: any scheduling and clock lines, but not inside a drawer.
: 
: The value of this variable should be the name of the drawer to use.
: LOGBOOK is proposed as the default drawer for this purpose, you can
: also set this to a string to define the drawer of your choice.
: 
: A value of t is also allowed, representing "LOGBOOK".
: 
: A value of t or nil can also be set with on a per-file-basis with
: 
:    #+STARTUP: logdrawer
:    #+STARTUP: nologdrawer
: 
: If this variable is set, `org-log-state-notes-insert-after-drawers'
: will be ignored.
: 
: You can set the property LOG_INTO_DRAWER to overrule this setting for
: a subtree.
: 
: Do not check directly this variable in a Lisp program.  Call
: function `org-log-into-drawer' instead.

** org-icalendar-combined-description =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-combined-description
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-combined-description&sr=1][Find modifications in git logs]]

: Calendar description for the combined iCalendar (all agenda files).

** org-table-formula-field-format =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-formula-field-format
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-formula-field-format&sr=1][Find modifications in git logs]]

: Format for fields which contain the result of a formula.
: For example, using "~%s~" will display the result within tilde
: characters.  Beware that modifying the display can prevent the
: field from being used in another formula.

** org-agenda-start-on-weekday =1=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-start-on-weekday
   :END:

- *Type:* (choice (const :tag "Today" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-start-on-weekday&sr=1][Find modifications in git logs]]

: Non-nil means start the overview always on the specified weekday.
: 0 denotes Sunday, 1 denotes Monday, etc.
: When nil, always start on the current day.
: Custom commands can set this variable in the options section.

** org-agenda-search-headline-for-time =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-search-headline-for-time
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-search-headline-for-time&sr=1][Find modifications in git logs]]

: Non-nil means search headline for a time-of-day.
: If the headline contains a time-of-day in one format or another, it will
: be used to sort the entry into the time sequence of items for a day.
: Some people have time stamps in the headline that refer to the creation
: time or so, and then this produces an unwanted side effect.  If this is
: the case for your, use this variable to turn off searching the headline
: for a time.

** org-learn-always-reschedule =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-learn-always-reschedule
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-learn.el;hb=HEAD][org-learn.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-learn-always-reschedule&sr=1][Find modifications in git logs]]

: If non-nil, always reschedule items, even if retention was "perfect".

** org-attach-git-annex-cutoff =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-git-annex-cutoff
   :END:

- *Type:* (choice (const :tag "None" nil...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-git-annex-cutoff&sr=1][Find modifications in git logs]]

: If non-nil, files larger than this will be annexed instead of stored.

** org-table-automatic-realign =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-automatic-realign
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-automatic-realign&sr=1][Find modifications in git logs]]

: Non-nil means automatically re-align table when pressing TAB or RETURN.
: When nil, aligning is only done with `\[org-table-align]', or after column
: removal/insertion.

** org-footnote-auto-label =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-auto-label
   :END:

- *Type:* (choice (const :tag "Prompt fo...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-auto-label&sr=1][Find modifications in git logs]]

: Non-nil means define automatically new labels for footnotes.
: Possible values are:
: 
: nil        Prompt the user for each label.
: t          Create unique labels of the form [fn:1], [fn:2], etc.
: confirm    Like t, but let the user edit the created value.
:            The label can be removed from the minibuffer to create
:            an anonymous footnote.
: random	   Automatically generate a unique, random label.

** org-table-export-default-format =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-export-default-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-export-default-format&sr=1][Find modifications in git logs]]

: Default export parameters for `org-table-export'.
: These can be overridden for a specific table by setting the
: TABLE_EXPORT_FORMAT property.  See the manual section on orgtbl
: radio tables for the different export transformations and
: available parameters.

** org-agenda-skip-archived-trees =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-archived-trees
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-archived-trees&sr=1][Find modifications in git logs]]

: Non-nil means the agenda will skip any items located in archived trees.
: An archived tree is a tree marked with the tag ARCHIVE.  The use of this
: variable is no longer recommended, you should leave it at the value t.
: Instead, use the key `v' to cycle the archives-mode in the agenda.

** org-footnote-auto-adjust =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-auto-adjust
   :END:

- *Type:* (choice (const :tag "No adjust...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-auto-adjust&sr=1][Find modifications in git logs]]

: Non-nil means automatically adjust footnotes after insert/delete.
: When this is t, after each insertion or deletion of a footnote,
: simple fn:N footnotes will be renumbered, and all footnotes will be sorted.
: If you want to have just sorting or just renumbering, set this variable
: to `sort' or `renumber'.
: 
: The main values of this variable can be set with in-buffer options:
: 
: #+STARTUP: fnadjust
: #+STARTUP: nofnadjust

** org-babel-tangle-lang-exts =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-lang-exts
   :END:

- *Type:* (repeat (cons (string "Languag...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-lang-exts&sr=1][Find modifications in git logs]]

: Alist mapping languages to their file extensions.
: The key is the language name, the value is the string that should
: be inserted as the extension commonly used to identify files
: written in this language.  If no entry is found in this list,
: then the name of the language is used.

** org-hidden-keywords =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-hidden-keywords
   :END:

- *Type:* (set (const :tag "#+AUTHOR" au...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hidden-keywords&sr=1][Find modifications in git logs]]

: List of symbols corresponding to keywords to be hidden the org buffer.
: For example, a value \='(title) for this list will make the document's title
: appear in the buffer without the initial #+TITLE: keyword.

** org-preview-latex-default-process =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-preview-latex-default-process
   :END:

- *Type:* symbol
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-preview-latex-default-process&sr=1][Find modifications in git logs]]

: The default process to convert LaTeX fragments to image files.
: All available processes and theirs documents can be found in
: `org-preview-latex-process-alist', which see.

** org-publish-use-timestamps-flag =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-use-timestamps-flag
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-use-timestamps-flag&sr=1][Find modifications in git logs]]

: Non-nil means use timestamp checking to publish only changed files.
: When nil, do no timestamp checking and always publish all files.

** org-man-logfiles-extensions =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-logfiles-extensions
   :END:

- *Type:* (repeat (string :tag "Extensio...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-logfiles-extensions&sr=1][Find modifications in git logs]]

: The list of file extensions to consider as Man logfiles.

** org-bibtex-treat-headline-as-title =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-treat-headline-as-title
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-treat-headline-as-title&sr=1][Find modifications in git logs]]

: Treat headline text as title if title property is absent.
: If an entry is missing a title property, use the headline text as
: the property.  If this value is t, `org-bibtex-check' will ignore
: a missing title field.

** org-blank-before-new-entry =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-blank-before-new-entry
   :END:

- *Type:* (list (cons (const heading) (c...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-blank-before-new-entry&sr=1][Find modifications in git logs]]

: Should `org-insert-heading' leave a blank line before new heading/item?
: The value is an alist, with `heading' and `plain-list-item' as CAR,
: and a boolean flag as CDR.  The cdr may also be the symbol `auto', in
: which case Org will look at the surrounding headings/items and try to
: make an intelligent decision whether to insert a blank line or not.

** org-feed-default-template =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-default-template
   :END:

- *Type:* (string :tag "Template")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-default-template&sr=1][Find modifications in git logs]]

: Template for the Org node created from RSS feed items.
: This is just the default, each feed can specify its own.
: Any fields from the feed item can be interpolated into the template with
: %name, for example %title, %description, %pubDate etc.  In addition, the
: following special escapes are valid as well:
: 
: %h      The title, or the first line of the description
: %t      The date as a stamp, either from <pubDate> (if present), or
:         the current date
: %T      Date and time
: %u,%U   Like %t,%T, but inactive time stamps
: %a      A link, from <guid> if that is a permalink, else from <link>
: %(sexp) Evaluate elisp `(sexp)' and replace with the result, the simple
:         %-escapes above can be used as arguments, e.g. %(capitalize \"%h\")

** org-time-stamp-custom-formats =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-time-stamp-custom-formats
   :END:

- *Type:* sexp
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-time-stamp-custom-formats&sr=1][Find modifications in git logs]]

: Custom formats for time stamps.  See `format-time-string' for the syntax.
: These are overlaid over the default ISO format if the variable
: `org-display-custom-times' is set.  Time like %H:%M should be at the
: end of the second format.  The custom formats are also honored by export
: commands, if custom time display is turned on at the time of export.

** org-man-table-scientific-notation =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-table-scientific-notation
   :END:

- *Type:* (choice (string :tag "Format s...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-table-scientific-notation&sr=1][Find modifications in git logs]]

: Format string to display numbers in scientific notation.
: The format should have "%s" twice, for mantissa and exponent
: (i.e. "%s\\times10^{%s}").
: 
: When nil, no transformation is made.

** org-babel-ruby-nil-to =(funcall (function (closure (i...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-ruby-nil-to
   :END:

- *Type:* symbol
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-ruby.el;hb=HEAD][ob-ruby.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-ruby-nil-to&sr=1][Find modifications in git logs]]

: Replace nil in ruby tables with this before returning.

** org-babel-J-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-J-command
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-J.el;hb=HEAD][ob-J.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-J-command&sr=1][Find modifications in git logs]]

: Command to call J.

** org-babel-R-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-R-command
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-R.el;hb=HEAD][ob-R.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-R-command&sr=1][Find modifications in git logs]]

: Name of command to use for executing R code.

** org-clock-x11idle-program-name =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-x11idle-program-name
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-x11idle-program-name&sr=1][Find modifications in git logs]]

: Name of the program which prints X11 idle time in milliseconds.
: 
: You can find x11idle.c in the contrib/scripts directory of the
: Org git distribution. Or, you can do:
: 
:     sudo apt-get install xprintidle
: 
: if you are using Debian.

** org-icalendar-with-timestamps =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-with-timestamps
   :END:

- *Type:* (choice (const :tag "All times...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-with-timestamps&sr=1][Find modifications in git logs]]

: Non-nil means make an event from plain time stamps.
: 
: It can be set to `active', `inactive', t or nil, in order to make
: an event from, respectively, only active timestamps, only
: inactive ones, all of them or none.
: 
: This variable has precedence over `org-export-with-timestamps'.
: It can also be set with the #+OPTIONS line, e.g. "<:t".

** org-mobile-encryption-password =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-encryption-password
   :END:

- *Type:* (string :tag "Password")
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-encryption-password&sr=1][Find modifications in git logs]]

: Password for encrypting files uploaded to the server.
: This is a single password which is used for AES-256 encryption.  The same
: password must also be set in the MobileOrg application.  All Org files,
: including mobileorg.org will be encrypted using this password.
: 
: SECURITY CONSIDERATIONS:
: 
: Note that, when Org runs the encryption commands, the password could
: be visible briefly on your system with the `ps' command.  So this method is
: only intended to keep the files secure on the server, not on your own machine.
: 
: Also, if you set this variable in an init file (.emacs or .emacs.d/init.el
: or custom.el...) and if that file is stored in a way so that other can read
: it, this also limits the security of this approach.  You can also leave
: this variable empty - Org will then ask for the password once per Emacs
: session.

** org-agenda-format-date =(quote org-agenda-format-date-...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-format-date
   :END:

- *Type:* (choice (string :tag "Format s...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-format-date&sr=1][Find modifications in git logs]]

: Format string for displaying dates in the agenda.
: Used by the daily/weekly agenda and by the timeline.  This should be
: a format string understood by `format-time-string', or a function returning
: the formatted date as a string.  The function must take a single argument,
: a calendar-style date list like (month day year).

** org-babel-remote-temporary-directory =(funcall (function (closure (*...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-remote-temporary-directory
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-remote-temporary-directory&sr=1][Find modifications in git logs]]

: Directory to hold temporary files on remote hosts.

** org-export-with-section-numbers =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-section-numbers
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-section-numbers&sr=1][Find modifications in git logs]]

: Non-nil means add section numbers to headlines when exporting.
: 
: When set to an integer n, numbering will only happen for
: headlines whose relative level is higher or equal to n.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "num:t".

** org-export-with-latex =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-latex
   :END:

- *Type:* (choice (const :tag "Do not pr...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-latex&sr=1][Find modifications in git logs]]

: Non-nil means process LaTeX environments and fragments.
: 
: This option can also be set with the OPTIONS line,
: e.g. "tex:verbatim".  Allowed values are:
: 
: nil         Ignore math snippets.
: `verbatim'  Keep everything in verbatim.
: t           Allow export of math snippets.

** org-export-exclude-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-exclude-tags
   :END:

- *Type:* (repeat (string :tag "Tag"))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-exclude-tags&sr=1][Find modifications in git logs]]

: Tags that exclude a tree from export.
: 
: All trees carrying any of these tags will be excluded from
: export.  This is without condition, so even subtrees inside that
: carry one of the `org-export-select-tags' will be removed.
: 
: This option can also be set with the EXCLUDE_TAGS keyword.

** org-html-head-include-default-style =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-head-include-default-style
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-head-include-default-style&sr=1][Find modifications in git logs]]

: Non-nil means include the default style in exported HTML files.
: The actual style is defined in `org-html-style-default' and
: should not be modified.  Use `org-html-head' to use your own
: style information.

** org-habit-completed-glyph =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-completed-glyph
   :END:

- *Type:* character
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-completed-glyph&sr=1][Find modifications in git logs]]

: Glyph character used to show completed days on which a task was done.

** org-mhe-search-all-folders =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mhe-search-all-folders
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mhe.el;hb=HEAD][org-mhe.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mhe-search-all-folders&sr=1][Find modifications in git logs]]

: Non-nil means the search for the mh-message may extend to all folders.
: When non-nil, the search for a message will extend to all other
: folders if it cannot be found in the folder given in the link.
: Searching all folders may be slow with the default pick based
: search but is very efficient with one of the other search engines
: supported by MH-E.

** org-babel-lua-hline-to =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lua-hline-to
   :END:

- *Type:* string
- *Since:* Emacs version 24.5
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lua.el;hb=HEAD][ob-lua.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lua-hline-to&sr=1][Find modifications in git logs]]

: Replace hlines in incoming tables with this when translating to lua.

** org-agenda-max-todos =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-max-todos
   :END:

- *Type:* (choice (symbol :tag "No limit...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-max-todos&sr=1][Find modifications in git logs]]

: Maximum number of TODOs to display in an agenda.
: This can be nil (no limit) or an integer or an alist of agenda
: types with an associated number of entries to display in this
: type.

** org-agenda-skip-scheduled-delay-if-deadline =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-scheduled-delay-if-deadline
   :END:

- *Type:* (choice (const :tag "Always ho...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-scheduled-delay-if-deadline&sr=1][Find modifications in git logs]]

: Non-nil means skip scheduled delay when entry also has a deadline.
: This variable may be set to nil, t, the symbol `post-deadline',
: or a number which will then give the number of days after the actual
: scheduled date when the delay should expire.  The symbol `post-deadline'
: eliminates the schedule delay when the date is posterior to the deadline.

** org-html-keep-old-src =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-keep-old-src
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-keep-old-src&sr=1][Find modifications in git logs]]

: When non-nil, use <pre class=""> instead of <pre><code class="">.

** org-table-fix-formulas-confirm =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-fix-formulas-confirm
   :END:

- *Type:* (choice (const :tag "with yes-...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-fix-formulas-confirm&sr=1][Find modifications in git logs]]

: Whether the user should confirm when Org fixes formulas.

** org-clock-into-drawer =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-into-drawer
   :END:

- *Type:* (choice (const :tag "Always" t...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-into-drawer&sr=1][Find modifications in git logs]]

: Non-nil when clocking info should be wrapped into a drawer.
: 
: When non-nil, clocking info will be inserted into the same drawer
: as log notes (see variable `org-log-into-drawer'), if it exists,
: or "LOGBOOK" otherwise.  If necessary, the drawer will be
: created.
: 
: When an integer, the drawer is created only when the number of
: clocking entries in an item reaches or exceeds this value.
: 
: When a string, it becomes the name of the drawer, ignoring the
: log notes drawer altogether.
: 
: Do not check directly this variable in a Lisp program.  Call
: function `org-clock-into-drawer' instead.

** org-src-tab-acts-natively =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-src-tab-acts-natively
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-tab-acts-natively&sr=1][Find modifications in git logs]]

: If non-nil, the effect of TAB in a code block is as if it were
: issued in the language major mode buffer.

** org-log-done-with-time =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-done-with-time
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-done-with-time&sr=1][Find modifications in git logs]]

: Non-nil means the CLOSED time stamp will contain date and time.
: When nil, only the date will be recorded.

** org-html-table-data-tags =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-data-tags
   :END:

- *Type:* (cons (string :tag "Opening ta...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-data-tags&sr=1][Find modifications in git logs]]

: The opening and ending tags for table data fields.
: This is customizable so that alignment options can be specified.
: The first %s will be filled with the scope of the field, either row or col.
: The second %s will be replaced by a style entry to align the field.
: See also the variable `org-html-table-align-individual-fields'.

** org-agenda-use-time-grid =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-use-time-grid
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-use-time-grid&sr=1][Find modifications in git logs]]

: Non-nil means show a time grid in the agenda schedule.
: A time grid is a set of lines for specific times (like every two hours between
: 8:00 and 20:00).  The items scheduled for a day at specific times are
: sorted in between these lines.
: For details about when the grid will be shown, and what it will look like, see
: the variable `org-agenda-time-grid'.

** org-columns-modify-value-for-display-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-modify-value-for-display-function
   :END:

- *Type:* (choice (const nil) (function)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-modify-value-for-display-function&sr=1][Find modifications in git logs]]

: Function that modifies values for display in column view.
: For example, it can be used to cut out a certain part from a time stamp.
: The function must take 2 arguments:
: 
: column-title    The title of the column (*not* the property name)
: value           The value that should be modified.
: 
: The function should return the value that should be displayed,
: or nil if the normal value should be used.

** org-edit-src-content-indentation =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-content-indentation
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-content-indentation&sr=1][Find modifications in git logs]]

: Indentation for the content of a source code block.
: 
: This should be the number of spaces added to the indentation of the #+begin
: line in order to compute the indentation of the block content after
: editing it with `\[org-edit-src-code]'.
: 
: It has no effect if `org-src-preserve-indentation' is non-nil.

** org-indent-mode-turns-off-org-adapt-indentation =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-mode-turns-off-org-adapt-indentation
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-indent.el;hb=HEAD][org-indent.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-mode-turns-off-org-adapt-indentation&sr=1][Find modifications in git logs]]

: Non-nil means setting the variable `org-indent-mode' will turn off indentation adaptation.
: For details see the variable `org-adapt-indentation'.

** org-table-relative-ref-may-cross-hline =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-relative-ref-may-cross-hline
   :END:

- *Type:* (choice (const :tag "Allow to ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-relative-ref-may-cross-hline&sr=1][Find modifications in git logs]]

: Non-nil means relative formula references may cross hlines.
: Here are the allowed values:
: 
: nil    Relative references may not cross hlines.  They will reference the
:        field next to the hline instead.  Coming from below, the reference
:        will be to the field below the hline.  Coming from above, it will be
:        to the field above.
: t      Relative references may cross hlines.
: error  An attempt to cross a hline will throw an error.
: 
: It is probably good to never set this variable to nil, for the sake of
: portability of tables.

** org-ascii-paragraph-spacing =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-paragraph-spacing
   :END:

- *Type:* (choice (integer :tag "Number ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-paragraph-spacing&sr=1][Find modifications in git logs]]

: Number of white lines between paragraphs.
: If the value is an integer, add this number of blank lines
: between contiguous paragraphs.  If is it the symbol `auto', keep
: the same number of blank lines as in the original document.

** org-export-headline-levels =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-headline-levels
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-headline-levels&sr=1][Find modifications in git logs]]

: The last level which is still exported as a headline.
: 
: Inferior levels will usually produce itemize or enumerate lists
: when exported, but back-end behavior may differ.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "H:2".

** org-export-with-statistics-cookies =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-statistics-cookies
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-statistics-cookies&sr=1][Find modifications in git logs]]

: Non-nil means include statistics cookies in export.
: This option can also be set with the OPTIONS keyword,
: e.g. "stat:nil"

** org-agenda-entry-text-maxlines =5=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-entry-text-maxlines
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-entry-text-maxlines&sr=1][Find modifications in git logs]]

: Number of text lines to be added when `E' is pressed in the agenda.
: 
: Note that this variable only used during agenda display.  To add entry text
: when exporting the agenda, configure the variable
: `org-agenda-add-entry-text-maxlines'.

** org-babel-tangle-use-relative-file-links =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-use-relative-file-links
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-use-relative-file-links&sr=1][Find modifications in git logs]]

: Use relative path names in links from tangled source back the Org file.

** org-agenda-entry-text-leaders ="    > "=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-entry-text-leaders
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-entry-text-leaders&sr=1][Find modifications in git logs]]

: Text prepended to the entry text in agenda buffers.

** org-ctrl-k-protect-subtree =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-ctrl-k-protect-subtree
   :END:

- *Type:* (choice (const :tag "Do not pr...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctrl-k-protect-subtree&sr=1][Find modifications in git logs]]

: Non-nil means, do not delete a hidden subtree with C-k.
: When set to the symbol `error', simply throw an error when C-k is
: used to kill (part-of) a headline that has hidden text behind it.
: Any other non-nil value will result in a query to the user, if it is
: OK to kill that hidden subtree.  When nil, kill without remorse.

** org-directory =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-directory
   :END:

- *Type:* directory
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-directory&sr=1][Find modifications in git logs]]

: Directory with Org files.
: This is just a default location to look for Org files.  There is no need
: at all to put your files into this directory.  It is used in the
: following situations:
: 
: 1. When a capture template specifies a target file that is not an
:    absolute path.  The path will then be interpreted relative to
:    `org-directory'
: 2. When the value of variable `org-agenda-files' is a single file, any
:    relative paths in this file will be taken as relative to
:    `org-directory'.

** org-latex-footnote-separator =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-footnote-separator
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-footnote-separator&sr=1][Find modifications in git logs]]

: Text used to separate footnotes.

** org-clock-auto-clock-resolution =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-auto-clock-resolution
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-auto-clock-resolution&sr=1][Find modifications in git logs]]

: When to automatically resolve open clocks found in Org buffers.

** org-log-state-notes-insert-after-drawers =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-state-notes-insert-after-drawers
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-state-notes-insert-after-drawers&sr=1][Find modifications in git logs]]

: Non-nil means insert state change notes after any drawers in entry.
: Only the drawers that *immediately* follow the headline and the
: deadline/scheduled line are skipped.
: When nil, insert notes right after the heading and perhaps the line
: with deadline/scheduling if present.
: 
: This variable will have no effect if `org-log-into-drawer' is
: set.

** org-plain-list-ordered-item-terminator =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-plain-list-ordered-item-terminator
   :END:

- *Type:* (choice (const :tag "dot like ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-plain-list-ordered-item-terminator&sr=1][Find modifications in git logs]]

: The character that makes a line with leading number an ordered list item.
: Valid values are ?. and ?).  To get both terminators, use t.
: 
: This variable needs to be set before org.el is loaded.  If you
: need to make a change while Emacs is running, use the customize
: interface or run the following code after updating it:
: 
:   `\[org-element-update-syntax]'

** org-ascii-indented-line-width =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-indented-line-width
   :END:

- *Type:* (choice (integer :tag "Number ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-indented-line-width&sr=1][Find modifications in git logs]]

: Additional indentation width for the first line in a paragraph.
: If the value is an integer, indent the first line of each
: paragraph by this width, unless it is located at the beginning of
: a section, in which case indentation is removed from that line.
: If it is the symbol `auto' preserve indentation from original
: document.

** org-attach-expert =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-expert
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-expert&sr=1][Find modifications in git logs]]

: Non-nil means do not show the splash buffer with the attach dispatcher.

** org-highlight-links =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-highlight-links
   :END:

- *Type:* (set :greedy t (const :tag "Do...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-highlight-links&sr=1][Find modifications in git logs]]

: Types of links that should be highlighted in Org files.
: 
: This is a list of symbols, each one of them leading to the
: highlighting of a certain link type.
: 
: You can still open links that are not highlighted.
: 
: In principle, it does not hurt to turn on highlighting for all
: link types.  There may be a small gain when turning off unused
: link types.  The types are:
: 
: bracket   The recommended [[link][description]] or [[link]] links with hiding.
: angle     Links in angular brackets that may contain whitespace like
:           <bbdb:Carsten Dominik>.
: plain     Plain links in normal text, no whitespace, like http://google.com.
: radio     Text that is matched by a radio target, see manual for details.
: tag       Tag settings in a headline (link to tag search).
: date      Time stamps (link to calendar).
: footnote  Footnote labels.
: 
: If you set this variable during an Emacs session, use `org-mode-restart'
: in the Org buffer so that the change takes effect.

** org-src-preserve-indentation =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-src-preserve-indentation
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-preserve-indentation&sr=1][Find modifications in git logs]]

: If non-nil preserve leading whitespace characters on export.
: \<org-mode-map>
: If non-nil leading whitespace characters in source code blocks
: are preserved on export, and when switching between the org
: buffer and the language mode edit buffer.
: 
: When this variable is nil, after editing with `\[org-edit-src-code]',
: the minimum (across-lines) number of leading whitespace characters
: are removed from all lines, and the code block is uniformly indented
: according to the value of `org-edit-src-content-indentation'.

** org-custom-properties =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-custom-properties
   :END:

- *Type:* (repeat (string :tag "Property...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-custom-properties&sr=1][Find modifications in git logs]]

: List of properties (as strings) with a special meaning.
: The default use of these custom properties is to let the user
: hide them with `org-toggle-custom-properties-visibility'.

** org-clock-heading-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-heading-function
   :END:

- *Type:* (choice (const nil) (function)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-heading-function&sr=1][Find modifications in git logs]]

: When non-nil, should be a function to create `org-clock-heading'.
: This is the string shown in the mode line when a clock is running.
: The function is called with point at the beginning of the headline.

** org-link-frame-setup =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-link-frame-setup
   :END:

- *Type:* (list (cons (const vm) (choice...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-link-frame-setup&sr=1][Find modifications in git logs]]

: Setup the frame configuration for following links.
: When following a link with Emacs, it may often be useful to display
: this link in another window or frame.  This variable can be used to
: set this up for the different types of links.
: For VM, use any of
:     `vm-visit-folder'
:     `vm-visit-folder-other-window'
:     `vm-visit-folder-other-frame'
: For Gnus, use any of
:     `gnus'
:     `gnus-other-frame'
:     `org-gnus-no-new-news'
: For FILE, use any of
:     `find-file'
:     `find-file-other-window'
:     `find-file-other-frame'
: For Wanderlust use any of
:     `wl'
:     `wl-other-frame'
: For the calendar, use the variable `calendar-setup'.
: For BBDB, it is currently only possible to display the matches in
: another window.

** org-agenda-remove-times-when-in-prefix =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-remove-times-when-in-prefix
   :END:

- *Type:* (choice (const :tag "Always" t...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-remove-times-when-in-prefix&sr=1][Find modifications in git logs]]

: Non-nil means remove duplicate time specifications in agenda items.
: When the format `org-agenda-prefix-format' contains a `%t' specifier, a
: time-of-day specification in a headline or diary entry is extracted and
: placed into the prefix.  If this option is non-nil, the original specification
: (a timestamp or -range, or just a plain time(range) specification like
: 11:30-4pm) will be removed for agenda display.  This makes the agenda less
: cluttered.
: The option can be t or nil.  It may also be the symbol `beg', indicating
: that the time should only be removed when it is located at the beginning of
: the headline/diary entry.

** org-pretty-entities-include-sub-superscripts =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-pretty-entities-include-sub-superscripts
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-pretty-entities-include-sub-superscripts&sr=1][Find modifications in git logs]]

: Non-nil means, pretty entity display includes formatting sub/superscripts.

** org-todo-interpretation =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-interpretation
   :END:

- *Type:* (choice (const sequence) (cons...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-interpretation&sr=1][Find modifications in git logs]]

: Controls how TODO keywords are interpreted.
: This variable is in principle obsolete and is only used for
: backward compatibility, if the interpretation of todo keywords is
: not given already in `org-todo-keywords'.  See that variable for
: more information.

** org-yank-folded-subtrees =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-yank-folded-subtrees
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-yank-folded-subtrees&sr=1][Find modifications in git logs]]

: Non-nil means when yanking subtrees, fold them.
: If the kill is a single subtree, or a sequence of subtrees, i.e. if
: it starts with a heading and all other headings in it are either children
: or siblings, then fold all the subtrees.  However, do this only if no
: text after the yank would be swallowed into a folded tree by this action.

** org-table-formula-use-constants =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-formula-use-constants
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-formula-use-constants&sr=1][Find modifications in git logs]]

: Non-nil means interpret constants in formulas in tables.
: A constant looks like `$c' or `$Grav' and will be replaced before evaluation
: by the value given in `org-table-formula-constants', or by a value obtained
: from the `constants.el' package.

** org-display-internal-link-with-indirect-buffer =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-display-internal-link-with-indirect-buffer
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-display-internal-link-with-indirect-buffer&sr=1][Find modifications in git logs]]

: Non-nil means use indirect buffer to display infile links.
: Activating internal links (from one location in a file to another location
: in the same file) normally just jumps to the location.  When the link is
: activated with a `\[universal-argument]' prefix (or with mouse-3), the link is displayed in
: another window.  When this option is set, the other window actually displays
: an indirect buffer clone of the current buffer, to avoid any visibility
: changes to the current buffer.

** org-clock-sound =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-sound
   :END:

- *Type:* (choice (const :tag "No sound"...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-sound&sr=1][Find modifications in git logs]]

: Sound to use for notifications.
: Possible values are:
: 
: nil        No sound played
: t          Standard Emacs beep
: file name  Play this sound file, fall back to beep

** org-property-format =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-property-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-property-format&sr=1][Find modifications in git logs]]

: How property key/value pairs should be formatted by `indent-line'.
: When `indent-line' hits a property definition, it will format the line
: according to this format, mainly to make sure that the values are
: lined-up with respect to each other.

** org-log-refile =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-refile
   :END:

- *Type:* (choice (const :tag "No loggin...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-refile&sr=1][Find modifications in git logs]]

: Information to record when a task is refiled.
: 
: Possible values are:
: 
: nil     Don't add anything
: time    Add a time stamp to the task
: note    Prompt for a note and add it with template `org-log-note-headings'
: 
: This option can also be set with on a per-file-basis with
: 
:    #+STARTUP: nologrefile
:    #+STARTUP: logrefile
:    #+STARTUP: lognoterefile
: 
: You can have local logging settings for a subtree by setting the LOGGING
: property to one or more of these keywords.
: 
: When bulk-refiling from the agenda, the value `note' is forbidden and
: will temporarily be changed to `time'.

** org-mobile-allpriorities =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-allpriorities
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-allpriorities&sr=1][Find modifications in git logs]]

: Default set of priority cookies for the index file.

** org-bibtex-autogen-keys =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-autogen-keys
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-autogen-keys&sr=1][Find modifications in git logs]]

: Set to a truth value to use `bibtex-generate-autokey' to generate keys.

** org-export-with-todo-keywords =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-todo-keywords
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-todo-keywords&sr=1][Find modifications in git logs]]

: Non-nil means include TODO keywords in export.
: When nil, remove all these keywords from the export.  This option
: can also be set with the OPTIONS keyword, e.g.  "todo:nil".

** org-export-with-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-tags
   :END:

- *Type:* (choice (const :tag "Off" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-tags&sr=1][Find modifications in git logs]]

: If nil, do not export tags, just remove them from headlines.
: 
: If this is the symbol `not-in-toc', tags will be removed from
: table of contents entries, but still be shown in the headlines of
: the document.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "tags:nil".

** org-latex-toc-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-toc-command
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-toc-command&sr=1][Find modifications in git logs]]

: LaTeX command to set the table of contents, list of figures, etc.
: This command only applies to the table of contents generated with
: the toc:nil option, not to those generated with #+TOC keyword.

** org-cycle-separator-lines =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-separator-lines
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-separator-lines&sr=1][Find modifications in git logs]]

: Number of empty lines needed to keep an empty line between collapsed trees.
: If you leave an empty line between the end of a subtree and the following
: headline, this empty line is hidden when the subtree is folded.
: Org mode will leave (exactly) one empty line visible if the number of
: empty lines is equal or larger to the number given in this variable.
: So the default 2 means at least 2 empty lines after the end of a subtree
: are needed to produce free space between a collapsed subtree and the
: following headline.
: 
: If the number is negative, and the number of empty lines is at least -N,
: all empty lines are shown.
: 
: Special case: when 0, never leave empty lines in collapsed view.

** org-disputed-keys =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-disputed-keys
   :END:

- *Type:* alist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-disputed-keys&sr=1][Find modifications in git logs]]

: Keys for which Org mode and other modes compete.
: This is an alist, cars are the default keys, second element specifies
: the alternative to use when `org-replace-disputed-keys' is t.
: 
: Keys can be specified in any syntax supported by `define-key'.
: The value of this option takes effect only at Org mode startup,
: therefore you'll have to restart Emacs to apply it after changing.

** org-cycle-skip-children-state-if-no-children =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-skip-children-state-if-no-children
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-skip-children-state-if-no-children&sr=1][Find modifications in git logs]]

: Non-nil means skip CHILDREN state in entries that don't have any.

** org-hide-emphasis-markers =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-hide-emphasis-markers
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hide-emphasis-markers&sr=1][Find modifications in git logs]]

: Non-nil mean font-lock should hide the emphasis marker characters.

** org-clock-persist-query-save =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-persist-query-save
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-persist-query-save&sr=1][Find modifications in git logs]]

: When non-nil, ask before saving the current clock on exit.

** org-odt-format-headline-function =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-format-headline-function
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-format-headline-function&sr=1][Find modifications in git logs]]

: Function to format headline text.
: 
: This function will be called with 5 arguments:
: TODO      the todo keyword (string or nil).
: TODO-TYPE the type of todo (symbol: `todo', `done', nil)
: PRIORITY  the priority of the headline (integer or nil)
: TEXT      the main headline text (string).
: TAGS      the tags string, separated with colons (string or nil).
: 
: The function result will be used as headline text.

** org-refile-target-verify-function =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-refile-target-verify-function
   :END:

- *Type:* (choice (const nil) (function)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile-target-verify-function&sr=1][Find modifications in git logs]]

: Function to verify if the headline at point should be a refile target.
: The function will be called without arguments, with point at the
: beginning of the headline.  It should return t and leave point
: where it is if the headline is a valid target for refiling.
: 
: If the target should not be selected, the function must return nil.
: In addition to this, it may move point to a place from where the search
: should be continued.  For example, the function may decide that the entire
: subtree of the current entry should be excluded and move point to the end
: of the subtree.

** org-clock-out-when-done =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-out-when-done
   :END:

- *Type:* (choice (const :tag "No" nil) ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-out-when-done&sr=1][Find modifications in git logs]]

: When non-nil, clock will be stopped when the clocked entry is marked DONE.
: \<org-mode-map>DONE here means any DONE-like state.
: A nil value means clock will keep running until stopped explicitly with
: `\[org-clock-out]', or until the clock is started in a different item.
: Instead of t, this can also be a list of TODO states that should trigger
: clocking out.

** org-attach-allow-inheritance =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-allow-inheritance
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-allow-inheritance&sr=1][Find modifications in git logs]]

: Non-nil means allow attachment directories be inherited.

** org-export-copy-to-kill-ring =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-copy-to-kill-ring
   :END:

- *Type:* (choice (const :tag "Always" t...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-copy-to-kill-ring&sr=1][Find modifications in git logs]]

: Non-nil means pushing export output to the kill ring.
: This variable is ignored during asynchronous export.

** org-inlinetask-min-level =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-inlinetask-min-level
   :END:

- *Type:* (choice (const :tag "Off" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-inlinetask.el;hb=HEAD][org-inlinetask.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-inlinetask-min-level&sr=1][Find modifications in git logs]]

: Minimum level a headline must have before it is treated as an inline task.
: Don't set it to something higher than `29' or clocking will break since this
: is the hardcoded maximum number of stars `org-clock-sum' will work with.
: 
: It is strongly recommended that you set `org-cycle-max-level' not at all,
: or to a number smaller than this one.  In fact, when `org-cycle-max-level' is
: not set, it will be assumed to be one less than the value of smaller than
: the value of this variable.

** org-archive-mark-done =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-mark-done
   :END:

- *Type:* (choice (const :tag "No" nil) ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-mark-done&sr=1][Find modifications in git logs]]

: Non-nil means mark entries as DONE when they are moved to the archive file.
: This can be a string to set the keyword to use.  When non-nil, Org will
: use the first keyword in its list that means done.

** org-icalendar-combined-agenda-file =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-combined-agenda-file
   :END:

- *Type:* file
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-combined-agenda-file&sr=1][Find modifications in git logs]]

: The file name for the iCalendar file covering all agenda files.
: This file is created with the command `\[org-icalendar-combine-agenda-files]'.
: The file name should be absolute.  It will be overwritten without warning.

** org-confirm-elisp-link-not-regexp =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-confirm-elisp-link-not-regexp
   :END:

- *Type:* regexp
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-confirm-elisp-link-not-regexp&sr=1][Find modifications in git logs]]

: A regexp to skip confirmation for Elisp links.

** org-babel-C-compiler =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-C-compiler
   :END:

- *Type:* string
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-C.el;hb=HEAD][ob-C.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-C-compiler&sr=1][Find modifications in git logs]]

: Command used to compile a C source code file into an executable.
: May be either a command in the path, like gcc
: or an absolute path name, like /usr/local/bin/gcc
: parameter may be used, like gcc -v

** org-babel-D-compiler =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-D-compiler
   :END:

- *Type:* string
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-C.el;hb=HEAD][ob-C.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-D-compiler&sr=1][Find modifications in git logs]]

: Command used to compile and execute a D source code file.
: May be either a command in the path, like rdmd
: or an absolute path name, like /usr/local/bin/rdmd
: parameter may be used, like rdmd --chatty

** org-clock-string-limit =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-string-limit
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-string-limit&sr=1][Find modifications in git logs]]

: Maximum length of clock strings in the mode line.  0 means no limit.

** org-agenda-move-date-from-past-immediately-to-today =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-move-date-from-past-immediately-to-today
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-move-date-from-past-immediately-to-today&sr=1][Find modifications in git logs]]

: Non-nil means jump to today when moving a past date forward in time.
: When using S-right in the agenda to move a a date forward, and the date
: stamp currently points to the past, the first key press will move it
: to today.  WHen nil, just move one day forward even if the date stays
: in the past.

** org-bookmark-names-plist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-bookmark-names-plist
   :END:

- *Type:* plist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bookmark-names-plist&sr=1][Find modifications in git logs]]

: Names for bookmarks automatically set by some Org commands.
: This can provide strings as names for a number of bookmarks Org sets
: automatically.  The following keys are currently implemented:
:   :last-capture
:   :last-capture-marker
:   :last-refile
: When a key does not show up in the property list, the corresponding bookmark
: is not set.

** org-babel-clojure-backend =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-clojure-backend
   :END:

- *Type:* (choice (const :tag "cider" ci...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-clojure.el;hb=HEAD][ob-clojure.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-clojure-backend&sr=1][Find modifications in git logs]]

: Backend used to evaluate Clojure code blocks.

** org-export-show-temporary-export-buffer =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-show-temporary-export-buffer
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-show-temporary-export-buffer&sr=1][Find modifications in git logs]]

: Non-nil means show buffer after exporting to temp buffer.
: When Org exports to a file, the buffer visiting that file is never
: shown, but remains buried.  However, when exporting to
: a temporary buffer, that buffer is popped up in a second window.
: When this variable is nil, the buffer remains buried also in
: these cases.

** org-export-in-background =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-in-background
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-in-background&sr=1][Find modifications in git logs]]

: Non-nil means export and publishing commands will run in background.
: Results from an asynchronous export are never displayed
: automatically.  But you can retrieve them with `\[org-export-stack]'.

** org-agenda-show-inherited-tags =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-inherited-tags
   :END:

- *Type:* (choice (const :tag "Show inhe...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-inherited-tags&sr=1][Find modifications in git logs]]

: Non-nil means show inherited tags in each agenda line.
: 
: When this option is set to `always', it takes precedence over
: `org-agenda-use-tag-inheritance' and inherited tags are shown
: in every agenda.
: 
: When this option is set to t (the default), inherited tags are
: shown when they are available, i.e. when the value of
: `org-agenda-use-tag-inheritance' enables tag inheritance for the
: given agenda type.
: 
: This can be set to a list of agenda types in which the agenda
: must display the inherited tags.  Available types are `todo',
: `agenda', `search' and `timeline'.
: 
: When set to nil, never show inherited tags in agenda lines.

** org-babel-no-eval-on-ctrl-c-ctrl-c =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-no-eval-on-ctrl-c-ctrl-c
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-no-eval-on-ctrl-c-ctrl-c&sr=1][Find modifications in git logs]]

: \<org-mode-map>Remove code block evaluation from the `\[org-ctrl-c-ctrl-c]' key binding.

** org-odd-levels-only =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-odd-levels-only
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odd-levels-only&sr=1][Find modifications in git logs]]

: Non-nil means skip even levels and only use odd levels for the outline.
: This has the effect that two stars are being added/taken away in
: promotion/demotion commands.  It also influences how levels are
: handled by the exporters.
: Changing it requires restart of `font-lock-mode' to become effective
: for fontification also in regions already fontified.
: You may also set this on a per-file basis by adding one of the following
: lines to the buffer:
: 
:    #+STARTUP: odd
:    #+STARTUP: oddeven

** org-ascii-headline-spacing =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-headline-spacing
   :END:

- *Type:* (choice (const :tag "Replicate...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-headline-spacing&sr=1][Find modifications in git logs]]

: Number of blank lines inserted around headlines.
: 
: This variable can be set to a cons cell.  In that case, its car
: represents the number of blank lines present before headline
: contents whereas its cdr reflects the number of blank lines after
: contents.
: 
: A nil value replicates the number of blank lines found in the
: original Org buffer at the same place.

** org-html-htmlize-output-type =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-htmlize-output-type
   :END:

- *Type:* (choice (const css) (const inl...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-htmlize-output-type&sr=1][Find modifications in git logs]]

: Output type to be used by htmlize when formatting code snippets.
: Choices are `css' to export the CSS selectors only,`inline-css'
: to export the CSS attribute values inline in the HTML or `nil' to
: export plain text.  We use as default `inline-css', in order to
: make the resulting HTML self-containing.
: 
: However, this will fail when using Emacs in batch mode for export, because
: then no rich font definitions are in place.  It will also not be good if
: people with different Emacs setup contribute HTML files to a website,
: because the fonts will represent the individual setups.  In these cases,
: it is much better to let Org/Htmlize assign classes only, and to use
: a style file to define the look of these classes.
: To get a start for your css file, start Emacs session and make sure that
: all the faces you are interested in are defined, for example by loading files
: in all modes you want.  Then, use the command
: `\[org-html-htmlize-generate-css]' to extract class definitions.

** org-read-date-display-live =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-read-date-display-live
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-read-date-display-live&sr=1][Find modifications in git logs]]

: Non-nil means display current interpretation of date prompt live.
: This display will be in an overlay, in the minibuffer.

** org-clock-history-length =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-history-length
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-history-length&sr=1][Find modifications in git logs]]

: Number of clock tasks to remember in history.

** org-imenu-depth =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-imenu-depth
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-imenu-depth&sr=1][Find modifications in git logs]]

: The maximum level for Imenu access to Org headlines.
: This also applied for speedbar access.

** org-icalendar-use-scheduled =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-use-scheduled
   :END:

- *Type:* (set :greedy t (const :tag "SC...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-use-scheduled&sr=1][Find modifications in git logs]]

: Contexts where iCalendar export should use a scheduling time stamp.
: 
: This is a list with possibly several symbols in it.  Valid symbols are:
: 
: `event-if-todo'       Scheduling time stamps in TODO entries become an event.
: `event-if-not-todo'   Scheduling time stamps in non-TODO entries become an event.
: `todo-start'          Scheduling time stamps in TODO entries become start date.
:                       Some calendar applications show TODO entries only after
:                       that date.

** org-latex-format-headline-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-format-headline-function
   :END:

- *Type:* function
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-format-headline-function&sr=1][Find modifications in git logs]]

: Function for formatting the headline's text.
: 
: This function will be called with six arguments:
: TODO      the todo keyword (string or nil)
: TODO-TYPE the type of todo (symbol: `todo', `done', nil)
: PRIORITY  the priority of the headline (integer or nil)
: TEXT      the main headline text (string)
: TAGS      the tags (list of strings or nil)
: INFO      the export options (plist)
: 
: The function result will be used in the section format string.

** org-koma-letter-default-class ="default-koma-letter"=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-default-class
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-default-class&sr=1][Find modifications in git logs]]

: Default class for `org-koma-letter'.
: The value must be a member of `org-latex-classes'.

** org-cycle-max-level =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-max-level
   :END:

- *Type:* (choice (const :tag "No limit"...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-max-level&sr=1][Find modifications in git logs]]

: Maximum level which should still be subject to visibility cycling.
: Levels higher than this will, for cycling, be treated as text, not a headline.
: When `org-odd-levels-only' is set, a value of N in this variable actually
: means 2N-1 stars as the limiting headline.
: When nil, cycle all levels.
: Note that the limiting level of cycling is also influenced by
: `org-inlinetask-min-level'.  When `org-cycle-max-level' is not set but
: `org-inlinetask-min-level' is, cycling will be limited to levels one less
: than its value.

** org-md-footnote-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-md-footnote-format
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-md.el;hb=HEAD][ox-md.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-md-footnote-format&sr=1][Find modifications in git logs]]

: Format string for the footnote reference.
: The %s will be replaced by the footnote reference itself.

** org-bbdb-extract-date-fun =(funcall (function (closure (d...=
   :PROPERTIES:
   :CUSTOM_ID: org-bbdb-extract-date-fun
   :END:

- *Type:* function
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bbdb.el;hb=HEAD][org-bbdb.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bbdb-extract-date-fun&sr=1][Find modifications in git logs]]

: How to retrieve `month date year' from the anniversary field.
: 
: Customize if you have already filled your BBDB with dates
: different from YYYY-MM-DD.  The function must return a list (month
: date year).

** org-link-file-path-type =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-link-file-path-type
   :END:

- *Type:* (choice (const relative) (cons...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-link-file-path-type&sr=1][Find modifications in git logs]]

: How the path name in file links should be stored.
: Valid values are:
: 
: relative  Relative to the current directory, i.e. the directory of the file
:           into which the link is being inserted.
: absolute  Absolute path, if possible with ~ for home directory.
: noabbrev  Absolute path, no abbreviation of home directory.
: adaptive  Use relative path for files in the current directory and sub-
:           directories of it.  For other files, use an absolute path.

** org-koma-letter-from-address =""=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-from-address
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-from-address&sr=1][Find modifications in git logs]]

: Sender's address, as a string.
: This option can also be set with one or more FROM_ADDRESS
: keywords.

** org-export-with-emphasize =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-emphasize
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-emphasize&sr=1][Find modifications in git logs]]

: Non-nil means interpret *word*, /word/, _word_ and +word+.
: 
: If the export target supports emphasizing text, the word will be
: typeset in bold, italic, with an underline or strike-through,
: respectively.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "*:nil".

** org-odt-schema-dir =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-schema-dir
   :END:

- *Type:* (choice (const :tag "Not set" ...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-schema-dir&sr=1][Find modifications in git logs]]

: Directory that contains OpenDocument schema files.
: 
: This directory contains:
: 1. rnc files for OpenDocument schema
: 2. a "schemas.xml" file that specifies locating rules needed
:    for auto validation of OpenDocument XML files.
: 
: Use the customize interface to set this variable.  This ensures
: that `rng-schema-locating-files' is updated and auto-validation
: of OpenDocument XML takes place based on the value
: `rng-nxml-auto-validate-flag'.
: 
: The default value of this variable varies depending on the
: version of org in use and is initialized from
: `org-odt-schema-dir-list'.  The OASIS schema files are available
: only in the org's private git repository.  It is *not* bundled
: with GNU ELPA tar or standard Emacs distribution.

** org-inlinetask-default-state =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-inlinetask-default-state
   :END:

- *Type:* (choice (const :tag "No state"...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-inlinetask.el;hb=HEAD][org-inlinetask.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-inlinetask-default-state&sr=1][Find modifications in git logs]]

: Non-nil means make inline tasks have a TODO keyword initially.
: This should be the state `org-inlinetask-insert-task' should use by
: default, or nil of no state should be assigned.

** org-mobile-inbox-for-pull =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-inbox-for-pull
   :END:

- *Type:* file
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-inbox-for-pull&sr=1][Find modifications in git logs]]

: The file where captured notes and flags will be appended to.
: During the execution of `org-mobile-pull', the file
: `org-mobile-capture-file' will be emptied it's contents have
: been appended to the file given here.  This file should be in
: `org-directory', and not in the staging area or on the web server.

** org-babel-exp-call-line-template =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-exp-call-line-template
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-exp.el;hb=HEAD][ob-exp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-exp-call-line-template&sr=1][Find modifications in git logs]]

: Template used to export call lines.
: This template may be customized to include the call line name
: with any export markup.  The template is filled out using
: `org-fill-template', and the following %keys may be used.
: 
:  line --- call line
: 
: An example value would be "\n: call: %line" to export the call line
: wrapped in a verbatim environment.
: 
: Note: the results are inserted separately after the contents of
: this template.

** org-agenda-skip-timestamp-if-done =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-timestamp-if-done
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-timestamp-if-done&sr=1][Find modifications in git logs]]

: Non-nil means don't select item by timestamp or -range if it is DONE.

** org-html-toplevel-hlevel =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-toplevel-hlevel
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-toplevel-hlevel&sr=1][Find modifications in git logs]]

: The <H> level for level 1 headings in HTML export.
: This is also important for the classes that will be wrapped around headlines
: and outline structure.  If this variable is 1, the top-level headlines will
: be <h1>, and the corresponding classes will be outline-1, section-number-1,
: and outline-text-1.  If this is 2, all of these will get a 2 instead.
: The default for this variable is 2, because we use <h1> for formatting the
: document title.

** org-latex-minted-langs =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-minted-langs
   :END:

- *Type:* (repeat (list (symbol :tag "Ma...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-minted-langs&sr=1][Find modifications in git logs]]

: Alist mapping languages to their minted language counterpart.
: The key is a symbol, the major mode symbol without the "-mode".
: The value is the string that should be inserted as the language
: parameter for the minted package.  If the mode name and the
: listings name are the same, the language does not need an entry
: in this list - but it does not hurt if it is present.
: 
: Note that minted uses all lower case for language identifiers,
: and that the full list of language identifiers can be obtained
: with:
: 
:   pygmentize -L lexers

** org-clock-clocktable-default-properties =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-clocktable-default-properties
   :END:

- *Type:* plist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-clocktable-default-properties&sr=1][Find modifications in git logs]]

: Default properties for new clocktables.
: These will be inserted into the BEGIN line, to make it easy for users to
: play with them.

** org-html-table-use-header-tags-for-first-column =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-use-header-tags-for-first-column
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-use-header-tags-for-first-column&sr=1][Find modifications in git logs]]

: Non-nil means format column one in tables with header tags.
: When nil, also column one will use data tags.

** org-link-translation-function =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-link-translation-function
   :END:

- *Type:* (choice (const nil) (function)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-link-translation-function&sr=1][Find modifications in git logs]]

: Function to translate links with different syntax to Org syntax.
: This can be used to translate links created for example by the Planner
: or emacs-wiki packages to Org syntax.
: The function must accept two parameters, a TYPE containing the link
: protocol name like "rmail" or "gnus" as a string, and the linked path,
: which is everything after the link protocol.  It should return a cons
: with possibly modified values of type and path.
: Org contains a function for this, so if you set this variable to
: `org-translate-link-from-planner', you should be able follow many
: links created by planner.

** org-latex-remove-logfiles =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-remove-logfiles
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-remove-logfiles&sr=1][Find modifications in git logs]]

: Non-nil means remove the logfiles produced by PDF production.
: By default, logfiles are files with these extensions: .aux, .idx,
: .log, .out, .toc, .nav, .snm and .vrb.  To define the set of
: logfiles to remove, set `org-latex-logfiles-extensions'.

** org-koma-letter-location =""=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-location
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-location&sr=1][Find modifications in git logs]]

: Sender's extension field, as a string.
: 
: This option can also be set with the LOCATION keyword.
: Moreover, when:
:   (1) Either `org-koma-letter-prefer-special-headings' is non-nil
:       or there is no LOCATION keyword or the LOCATION keyword is
:       empty;
:   (2) the letter contains a headline with the special
:       tag "location";
: then the location will be set as the content of the location
: special heading.
: 
: The location field is typically printed right of the address
: field (See Figure 4.9. in the English manual of 2015-10-03).

** org-latex-custom-lang-environments =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-custom-lang-environments
   :END:

- *Type:* (repeat (list (symbol :tag "La...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-custom-lang-environments&sr=1][Find modifications in git logs]]

: Alist mapping languages to language-specific LaTeX environments.
: 
: It is used during export of src blocks by the listings and minted
: latex packages.  The environment may be a simple string, composed of
: only letters and numbers.  In this case, the string is directly the
: name of the latex environment to use.  The environment may also be
: a format string.  In this case the format string will be directly
: exported.  This format string may contain these elements:
: 
:   %s for the formatted source
:   %c for the caption
:   %f for the float attribute
:   %l for an appropriate label
:   %o for the LaTeX attributes
: 
: For example,
: 
:   (setq org-latex-custom-lang-environments
:      \='((python "pythoncode")
:        (ocaml "\\begin{listing}
: \\begin{minted}[%o]{ocaml}
: %s\\end{minted}
: \\caption{%c}
: \\label{%l}")))
: 
: would have the effect that if Org encounters a Python source block
: during LaTeX export it will produce
: 
:   \begin{pythoncode}
:   <src block body>
:   \end{pythoncode}
: 
: and if Org encounters an Ocaml source block during LaTeX export it
: will produce
: 
:   \begin{listing}
:   \begin{minted}[<attr_latex options>]{ocaml}
:   <src block body>
:   \end{minted}
:   \caption{<caption>}
:   \label{<label>}
:   \end{listing}

** org-id-search-archives =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-search-archives
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-search-archives&sr=1][Find modifications in git logs]]

: Non-nil means search also the archive files of agenda files for entries.
: This is a possibility to reduce overhead, but it means that entries moved
: to the archives can no longer be found by ID.
: This variable is only relevant when `org-id-track-globally' is set.

** org-org-htmlized-css-url =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-org-htmlized-css-url
   :END:

- *Type:* (choice (const :tag "Don't inc...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-org.el;hb=HEAD][ox-org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-org-htmlized-css-url&sr=1][Find modifications in git logs]]

: URL pointing to the CSS defining colors for htmlized Emacs buffers.
: Normally when creating an htmlized version of an Org buffer,
: htmlize will create the CSS to define the font colors.  However,
: this does not work when converting in batch mode, and it also can
: look bad if different people with different fontification setup
: work on the same website.  When this variable is non-nil,
: creating an htmlized version of an Org buffer using
: `org-org-export-as-org' will include a link to this URL if the
: setting of `org-html-htmlize-output-type' is `css'.

** org-use-fast-tag-selection =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-fast-tag-selection
   :END:

- *Type:* (choice (const :tag "Always" t...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-fast-tag-selection&sr=1][Find modifications in git logs]]

: Non-nil means use fast tag selection scheme.
: This is a special interface to select and deselect tags with single keys.
: When nil, fast selection is never used.
: When the symbol `auto', fast selection is used if and only if selection
: characters for tags have been configured, either through the variable
: `org-tag-alist' or through a #+TAGS line in the buffer.
: When t, fast selection is always used and selection keys are assigned
: automatically if necessary.

** org-preview-latex-process-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-preview-latex-process-alist
   :END:

- *Type:* (alist :tag "LaTeX to image ba...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-preview-latex-process-alist&sr=1][Find modifications in git logs]]

: Definitions of external processes for LaTeX previewing.
: Org mode can use some external commands to generate TeX snippet's images for
: previewing or inserting into HTML files, e.g., "dvipng".  This variable tells
: `org-create-formula-image' how to call them.
: 
: The value is an alist with the pattern (NAME . PROPERTIES).  NAME is a symbol.
: PROPERTIES accepts the following attributes:
: 
:   :programs           list of strings, required programs.
:   :description        string, describe the process.
:   :message            string, message it when required programs cannot be found.
:   :image-input-type   string, input file type of image converter (e.g., "dvi").
:   :image-output-type  string, output file type of image converter (e.g., "png").
:   :use-xcolor         boolean, when non-nil, LaTeX "xcolor" macro is used to
:                       deal with background and foreground color of image.
:                       Otherwise, dvipng style background and foregroud color
:                       format are generated.  You may then refer to them in
:                       command options with "%F" and "%B".
:   :image-size-adjust  cons of numbers, the car element is used to adjust LaTeX
:                       image size showed in buffer and the cdr element is for
:                       HTML file.  This option is only useful for process
:                       developers, users should use variable
:                       `org-format-latex-options' instead.
:   :post-clean         list of strings, files matched are to be cleaned up once
:                       the image is generated.  When nil, the files with ".dvi",
:                       ".xdv", ".pdf", ".tex", ".aux", ".log", ".svg",
:                       ".png", ".jpg", ".jpeg" or ".out" extension will
:                       be cleaned up.
:   :latex-header       list of strings, the LaTeX header of the snippet file.
:                       When nil, the fallback value is used instead, which is
:                       controlled by `org-format-latex-header',
:                       `org-latex-default-packages-alist' and
:                       `org-latex-packages-alist', which see.
:   :latex-compiler     list of LaTeX commands, as strings.  Each of them is given
:                       to the shell.  Place-holders "%t", "%b" and "%o" are
:                       replaced with values defined below.
:   :image-converter    list of image converter commands strings.  Each of them is
:                       given to the shell and supports any of the following
:                       place-holders defined below.
: 
: Place-holders used by `:image-converter' and `:latex-compiler':
: 
:   %f    input file name
:   %b    base name of input file
:   %o    base directory of input file
:   %O    absolute output file name
: 
: Place-holders only used by `:image-converter':
: 
:   %F    foreground of image
:   %B    background of image
:   %D    dpi, which is used to adjust image size by some processing commands.
:   %S    the image size scale ratio, which is used to adjust image size by some
:         processing commands.

** org-archive-subtree-add-inherited-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-subtree-add-inherited-tags
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-subtree-add-inherited-tags&sr=1][Find modifications in git logs]]

: Non-nil means append inherited tags when archiving a subtree.

** org-get-priority-function =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-get-priority-function
   :END:

- *Type:* (choice (const nil) (function)...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-get-priority-function&sr=1][Find modifications in git logs]]

: Function to extract the priority from a string.
: The string is normally the headline.  If this is nil Org computes the
: priority from the priority cookie like [#A] in the headline.  It returns
: an integer, increasing by 1000 for each priority level.
: The user can set a different function here, which should take a string
: as an argument and return the numeric priority.

** org-html-table-align-individual-fields =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-align-individual-fields
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-align-individual-fields&sr=1][Find modifications in git logs]]

: Non-nil means attach style attributes for alignment to each table field.
: When nil, alignment will only be specified in the column tags, but this
: is ignored by some browsers (like Firefox, Safari).  Opera does it right
: though.

** org-beamer-outline-frame-title =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-outline-frame-title
   :END:

- *Type:* (string :tag "Outline frame ti...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-outline-frame-title&sr=1][Find modifications in git logs]]

: Default title of a frame containing an outline.

** org-latex-text-markup-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-text-markup-alist
   :END:

- *Type:* alist
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-text-markup-alist&sr=1][Find modifications in git logs]]

: Alist of LaTeX expressions to convert text markup.
: 
: The key must be a symbol among `bold', `code', `italic',
: `strike-through', `underline' and `verbatim'.  The value is
: a formatting string to wrap fontified text with.
: 
: Value can also be set to the following symbols: `verb' and
: `protectedtexttt'.  For the former, Org will use "\verb" to
: create a format string and select a delimiter character that
: isn't in the string.  For the latter, Org will use "\texttt"
: to typeset and try to protect special characters.
: 
: If no association can be found for a given markup, text will be
: returned as-is.

** org-ascii-caption-above =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-caption-above
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-caption-above&sr=1][Find modifications in git logs]]

: When non-nil, place caption string before the element.
: Otherwise, place it right after it.

** org-clock-file-time-cell-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-file-time-cell-format
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-file-time-cell-format&sr=1][Find modifications in git logs]]

: Format string for the file time cells.

** org-babel-lua-mode =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lua-mode
   :END:

- *Type:* symbol
- *Since:* Emacs version 24.5
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lua.el;hb=HEAD][ob-lua.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lua-mode&sr=1][Find modifications in git logs]]

: Preferred lua mode for use in running lua interactively.
: This will typically be 'lua-mode.

** org-export-dispatch-use-expert-ui =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-dispatch-use-expert-ui
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-dispatch-use-expert-ui&sr=1][Find modifications in git logs]]

: Non-nil means using a non-intrusive `org-export-dispatch'.
: In that case, no help buffer is displayed.  Though, an indicator
: for current export scope is added to the prompt ("b" when
: output is restricted to body only, "s" when it is restricted to
: the current subtree, "v" when only visible elements are
: considered for export, "f" when publishing functions should be
: passed the FORCE argument and "a" when the export should be
: asynchronous).  Also, [?] allows switching back to standard
: mode.

** org-export-with-footnotes =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-footnotes
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-footnotes&sr=1][Find modifications in git logs]]

: Non-nil means Org footnotes should be exported.
: This option can also be set with the OPTIONS keyword,
: e.g. "f:nil".

** org-html-creator-string =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-creator-string
   :END:

- *Type:* (string :tag "Creator string")
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-creator-string&sr=1][Find modifications in git logs]]

: Information about the creator of the HTML document.
: This option can also be set on with the CREATOR keyword.

** org-md-footnotes-section =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-md-footnotes-section
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-md.el;hb=HEAD][ox-md.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-md-footnotes-section&sr=1][Find modifications in git logs]]

: Format string for the footnotes section.
: The first %s placeholder will be replaced with the localized Footnotes section
: heading, the second with the contents of the Footnotes section.

** org-export-with-inlinetasks =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-inlinetasks
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-inlinetasks&sr=1][Find modifications in git logs]]

: Non-nil means inlinetasks should be exported.
: This option can also be set with the OPTIONS keyword,
: e.g. "inline:nil".

** org-html-coding-system =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-coding-system
   :END:

- *Type:* coding-system
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-coding-system&sr=1][Find modifications in git logs]]

: Coding system for HTML export.
: Use utf-8 as the default value.

** org-agenda-skip-additional-timestamps-same-entry =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-additional-timestamps-same-entry
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-additional-timestamps-same-entry&sr=1][Find modifications in git logs]]

: When nil, multiple same-day timestamps in entry make multiple agenda lines.
: When non-nil, after the search for timestamps has matched once in an
: entry, the rest of the entry will not be searched.

** org-icalendar-include-bbdb-anniversaries =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-include-bbdb-anniversaries
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-include-bbdb-anniversaries&sr=1][Find modifications in git logs]]

: Non-nil means a combined iCalendar file should include anniversaries.
: The anniversaries are defined in the BBDB database.

** org-babel-picolisp-cmd =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-picolisp-cmd
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-picolisp.el;hb=HEAD][ob-picolisp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-picolisp-cmd&sr=1][Find modifications in git logs]]

: Name of command used to evaluate picolisp blocks.

** org-enforce-todo-dependencies =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-enforce-todo-dependencies
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-enforce-todo-dependencies&sr=1][Find modifications in git logs]]

: Non-nil means undone TODO entries will block switching the parent to DONE.
: Also, if a parent has an :ORDERED: property, switching an entry to DONE will
: be blocked if any prior sibling is not yet done.
: Finally, if the parent is blocked because of ordered siblings of its own,
: the child will also be blocked.

** org-id-method =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-method
   :END:

- *Type:* (choice (const :tag "Org's int...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-method&sr=1][Find modifications in git logs]]

: The method that should be used to create new IDs.
: 
: An ID will consist of the optional prefix specified in `org-id-prefix',
: and a unique part created by the method this variable specifies.
: 
: Allowed values are:
: 
: org        Org's own internal method, using an encoding of the current time to
:            microsecond accuracy, and optionally the current domain of the
:            computer.  See the variable `org-id-include-domain'.
: 
: uuid       Create random (version 4) UUIDs.  If the program defined in
:            `org-id-uuid-program' is available it is used to create the ID.
:            Otherwise an internal functions is used.

** org-export-with-sub-superscripts =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-sub-superscripts
   :END:

- *Type:* (choice (const :tag "Interpret...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-sub-superscripts&sr=1][Find modifications in git logs]]

: Non-nil means interpret "_" and "^" for export.
: 
: If you want to control how Org displays those characters, see
: `org-use-sub-superscripts'.  `org-export-with-sub-superscripts'
: used to be an alias for `org-use-sub-superscripts' in Org <8.0,
: it is not anymore.
: 
: When this option is turned on, you can use TeX-like syntax for
: sub- and superscripts and see them exported correctly.
: 
: You can also set the option with #+OPTIONS: ^:t
: 
: Several characters after "_" or "^" will be considered as a
: single item - so grouping with {} is normally not needed.  For
: example, the following things will be parsed as single sub- or
: superscripts:
: 
:  10^24   or   10^tau     several digits will be considered 1 item.
:  10^-12  or   10^-tau    a leading sign with digits or a word
:  x^2-y^3                 will be read as x^2 - y^3, because items are
: 			 terminated by almost any nonword/nondigit char.
:  x_{i^2} or   x^(2-i)    braces or parenthesis do grouping.
: 
: Still, ambiguity is possible.  So when in doubt, use {} to enclose
: the sub/superscript.  If you set this variable to the symbol `{}',
: the braces are *required* in order to trigger interpretations as
: sub/superscript.  This can be helpful in documents that need "_"
: frequently in plain text.

** org-icalendar-exclude-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-exclude-tags
   :END:

- *Type:* (repeat (string :tag "Tag"))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-exclude-tags&sr=1][Find modifications in git logs]]

: Tags that exclude a tree from export.
: This variable allows specifying different exclude tags from other
: back-ends.  It can also be set with the ICALENDAR_EXCLUDE_TAGS
: keyword.

** org-src-ask-before-returning-to-edit-buffer =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-src-ask-before-returning-to-edit-buffer
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-ask-before-returning-to-edit-buffer&sr=1][Find modifications in git logs]]

: Non-nil means ask before switching to an existing edit buffer.
: If nil, when `org-edit-src-code' is used on a block that already
: has an active edit buffer, it will switch to that edit buffer
: immediately; otherwise it will ask whether you want to return to
: the existing edit buffer.

** org-agenda-window-frame-fractions =(quote (0.5 . 0.75))=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-window-frame-fractions
   :END:

- *Type:* (cons (number :tag "Minimum") ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-window-frame-fractions&sr=1][Find modifications in git logs]]

: The min and max height of the agenda window as a fraction of frame height.
: The value of the variable is a cons cell with two numbers between 0 and 1.
: It only matters if `org-agenda-window-setup' is `reorganize-frame'.

** org-latex-default-table-environment =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-default-table-environment
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-default-table-environment&sr=1][Find modifications in git logs]]

: Default environment used to build tables.

** org-babel-stan-cmdstan-directory =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-stan-cmdstan-directory
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-stan.el;hb=HEAD][ob-stan.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-stan-cmdstan-directory&sr=1][Find modifications in git logs]]

: CmdStan source directory.
: 'make' will be called from this directory to compile the Stan
: block.  When nil, executing Stan blocks dumps the content to a
: plain text file.

** org-columns-default-format =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-default-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-default-format&sr=1][Find modifications in git logs]]

: The default column format, if no other format has been defined.
: This variable can be set on the per-file basis by inserting a line
: 
: #+COLUMNS: %25ITEM .....

** org-url-hexify-p =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-url-hexify-p
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-url-hexify-p&sr=1][Find modifications in git logs]]

: When non-nil, hexify URL when creating a link.

** org-table-duration-hour-zero-padding =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-duration-hour-zero-padding
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-duration-hour-zero-padding&sr=1][Find modifications in git logs]]

: Non-nil means hours in table duration computations should be zero-padded.
: So this is about 08:32:34 versus 8:33:34.

** org-clock-continuously =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-continuously
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-continuously&sr=1][Find modifications in git logs]]

: Non-nil means to start clocking from the last clock-out time, if any.

** org-agenda-include-diary =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-include-diary
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-include-diary&sr=1][Find modifications in git logs]]

: If non-nil, include in the agenda entries from the Emacs Calendar's diary.
: Custom commands can set this variable in the options section.

** org-export-with-priority =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-priority
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-priority&sr=1][Find modifications in git logs]]

: Non-nil means include priority cookies in export.
: This option can also be set with the OPTIONS keyword,
: e.g. "pri:t".

** org-provide-todo-statistics =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-provide-todo-statistics
   :END:

- *Type:* (choice (const :tag "Yes, only...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-provide-todo-statistics&sr=1][Find modifications in git logs]]

: Non-nil means update todo statistics after insert and toggle.
: ALL-HEADLINES means update todo statistics by including headlines
: with no TODO keyword as well, counting them as not done.
: A list of TODO keywords means the same, but skip keywords that are
: not in this list.
: When set to a list of two lists, the first list contains keywords
: to consider as TODO keywords, the second list contains keywords
: to consider as DONE keywords.
: 
: When this is set, todo statistics is updated in the parent of the
: current entry each time a todo state is changed.

** org-ditaa-jar-path =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ditaa-jar-path
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-ditaa.el;hb=HEAD][ob-ditaa.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ditaa-jar-path&sr=1][Find modifications in git logs]]

: Path to the ditaa jar executable.

** org-highest-priority =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-highest-priority
   :END:

- *Type:* character
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-highest-priority&sr=1][Find modifications in git logs]]

: The highest priority of TODO items.  A character like ?A, ?B etc.
: Must have a smaller ASCII number than `org-lowest-priority'.

** org-edit-src-auto-save-idle-delay =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-auto-save-idle-delay
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-auto-save-idle-delay&sr=1][Find modifications in git logs]]

: Delay before saving a source code buffer back into its base buffer.
: When a positive integer N, save after N seconds of idle time.
: When 0 (the default), don't auto-save.
: 
: If you want to save the source code buffer itself, don't use this.
: Check `org-edit-src-turn-on-auto-save' instead.

** org-koma-letter-closing =""=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-closing
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-closing&sr=1][Find modifications in git logs]]

: Letter's closing, as a string.
: This option can also be set with the CLOSING keyword.  Moreover,
: when:
:   (1) Either `org-koma-letter-prefer-special-headings' is non-nil
:       or the CLOSING keyword is empty;
:   (2) `org-koma-letter-headline-is-opening-maybe' is non-nil;
:   (3) the letter contains a headline with the special
:       tag "closing";
: then the opening will be set as the title of the closing special
: heading title.

** org-capture-templates-contexts =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-templates-contexts
   :END:

- *Type:* (repeat (list :tag "Rule" (str...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-templates-contexts&sr=1][Find modifications in git logs]]

: Alist of capture templates and valid contexts.
: 
: For example, if you have a capture template "c" and you want
: this template to be accessible only from `message-mode' buffers,
: use this:
: 
:    \='(("c" ((in-mode . "message-mode"))))
: 
: Here are the available contexts definitions:
: 
:       in-file: command displayed only in matching files
:       in-mode: command displayed only in matching modes
:   not-in-file: command not displayed in matching files
:   not-in-mode: command not displayed in matching modes
:     in-buffer: command displayed only in matching buffers
: not-in-buffer: command not displayed in matching buffers
:    [function]: a custom function taking no argument
: 
: If you define several checks, the agenda command will be
: accessible if there is at least one valid check.
: 
: You can also bind a key to another agenda custom command
: depending on contextual rules.
: 
:     \='(("c" "d" ((in-mode . "message-mode"))))
: 
: Here it means: in `message-mode buffers', use "c" as the
: key for the capture template otherwise associated with "d".
: (The template originally associated with "d" is not displayed
: to avoid duplicates.)

** org-odt-format-drawer-function =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-format-drawer-function
   :END:

- *Type:* function
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-format-drawer-function&sr=1][Find modifications in git logs]]

: Function called to format a drawer in ODT code.
: 
: The function must accept two parameters:
:   NAME      the drawer name, like "LOGBOOK"
:   CONTENTS  the contents of the drawer.
: 
: The function should return the string to be exported.
: 
: The default value simply returns the value of CONTENTS.

** org-table-number-regexp =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-number-regexp
   :END:

- *Type:* (choice (const :tag "Positive ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-number-regexp&sr=1][Find modifications in git logs]]

: Regular expression for recognizing numbers in table columns.
: If a table column contains mostly numbers, it will be aligned to the
: right.  If not, it will be aligned to the left.
: 
: The default value of this option is a regular expression which allows
: anything which looks remotely like a number as used in scientific
: context.  For example, all of the following will be considered a
: number:
:     12    12.2    2.4e-08    2x10^12    4.034+-0.02    2.7(10)  >3.5
: 
: Other options offered by the customize interface are more restrictive.

** org-return-follows-link =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-return-follows-link
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-return-follows-link&sr=1][Find modifications in git logs]]

: Non-nil means on links RET will follow the link.
: In tables, the special behavior of RET has precedence.

** org-ascii-underline =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-underline
   :END:

- *Type:* (list (cons :tag "Underline ch...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-underline&sr=1][Find modifications in git logs]]

: Characters for underlining headings in ASCII export.
: 
: Alist whose key is a symbol among `ascii', `latin1' and `utf-8'
: and whose value is a list of characters.
: 
: For each supported charset, this variable associates a sequence
: of underline characters.  In a sequence, the characters will be
: used in order for headlines level 1, 2, ...  If no character is
: available for a given level, the headline won't be underlined.

** org-agenda-compact-blocks =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-compact-blocks
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-compact-blocks&sr=1][Find modifications in git logs]]

: Non-nil means make the block agenda more compact.
: This is done globally by leaving out lines like the agenda span
: name and week number or the separator lines.

** org-texinfo-format-drawer-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-format-drawer-function
   :END:

- *Type:* function
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-format-drawer-function&sr=1][Find modifications in git logs]]

: Function called to format a drawer in Texinfo code.
: 
: The function must accept two parameters:
:   NAME      the drawer name, like "LOGBOOK"
:   CONTENTS  the contents of the drawer.
: 
: The function should return the string to be exported.
: 
: The default function simply returns the value of CONTENTS.

** org-highlight-sparse-tree-matches =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-highlight-sparse-tree-matches
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-highlight-sparse-tree-matches&sr=1][Find modifications in git logs]]

: Non-nil means highlight all matches that define a sparse tree.
: The highlights will automatically disappear the next time the buffer is
: changed by an edit command.

** org-bibtex-inherit-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-inherit-tags
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-inherit-tags&sr=1][Find modifications in git logs]]

: Controls whether inherited tags are converted to bibtex keywords.
: It is relevant only if `org-bibtex-tags-are-keywords' is non-nil.
: Tag inheritence itself is controlled by `org-use-tag-inheritence'
: and `org-exclude-tags-from-inheritence'.

** org-archive-sibling-heading =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-sibling-heading
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-sibling-heading&sr=1][Find modifications in git logs]]

: Name of the local archive sibling that is used to archive entries locally.
: Locally means: in the tree, under a sibling.
: See `org-archive-to-archive-sibling' for more information.

** org-learn-fraction =0.5=
   :PROPERTIES:
   :CUSTOM_ID: org-learn-fraction
   :END:

- *Type:* float
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-learn.el;hb=HEAD][org-learn.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-learn-fraction&sr=1][Find modifications in git logs]]

: Controls the rate at which EF is increased or decreased.
: Must be a number between 0 and 1 (the greater it is the faster
: the changes of the OF matrix).

** org-agenda-files =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-files
   :END:

- *Type:* (choice (repeat :tag "List of ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-files&sr=1][Find modifications in git logs]]

: The files to be used for agenda display.
: 
: If an entry is a directory, all files in that directory that are matched
: by `org-agenda-file-regexp' will be part of the file list.
: 
: If the value of the variable is not a list but a single file name, then
: the list of agenda files is actually stored and maintained in that file,
: one agenda file per line.  In this file paths can be given relative to
: `org-directory'.  Tilde expansion and environment variable substitution
: are also made.
: 
: Entries may be added to this list with `\[org-agenda-file-to-front]'
: and removed with `\[org-remove-file]'.

** org-fontify-whole-heading-line =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-fontify-whole-heading-line
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-fontify-whole-heading-line&sr=1][Find modifications in git logs]]

: Non-nil means fontify the whole line for headings.
: This is useful when setting a background color for the
: org-level-* faces.

** org-properties-postprocess-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-properties-postprocess-alist
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-properties-postprocess-alist&sr=1][Find modifications in git logs]]

: Alist of properties and functions to adjust inserted values.
: Elements of this alist must be of the form
: 
:   ([string] [function])
: 
: where [string] must be a property name and [function] must be a
: lambda expression: this lambda expression must take one argument,
: the value to adjust, and return the new value as a string.
: 
: For example, this element will allow the property "Remaining"
: to be updated wrt the relation between the "Effort" property
: and the clock summary:
: 
:  (("Remaining" (lambda(value)
:                    (let ((clocksum (org-clock-sum-current-item))
:                          (effort (org-duration-to-minutes
:                                    (org-entry-get (point) "Effort"))))
:                      (org-minutes-to-clocksum-string (- effort clocksum))))))

** org-latex-subtitle-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-subtitle-format
   :END:

- *Type:* (string :tag "Format string")
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-subtitle-format&sr=1][Find modifications in git logs]]

: Format string used for transcoded subtitle.
: The format string should have at most one "%s"-expression,
: which is replaced with the subtitle.

** org-agenda-skip-scheduled-if-deadline-is-shown =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-scheduled-if-deadline-is-shown
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-scheduled-if-deadline-is-shown&sr=1][Find modifications in git logs]]

: Non-nil means skip scheduling line if same entry shows because of deadline.
: 
: In the agenda of today, an entry can show up multiple times
: because it is both scheduled and has a nearby deadline, and maybe
: a plain time stamp as well.
: 
: When this variable is nil, the entry will be shown several times.
: 
: When set to t, then only the deadline is shown and the fact that
: the entry is scheduled today or was scheduled previously is not
: shown.
: 
: When set to the symbol `not-today', skip scheduled previously,
: but not scheduled today.
: 
: When set to the symbol `repeated-after-deadline', skip scheduled
: items if they are repeated beyond the current deadline.

** org-babel-lisp-dir-fmt =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lisp-dir-fmt
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lisp.el;hb=HEAD][ob-lisp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lisp-dir-fmt&sr=1][Find modifications in git logs]]

: Format string used to wrap code bodies to set the current directory.
: For example a value of "(progn ;; %s\n   %%s)" would ignore the
: current directory string.

** org-footnote-define-inline =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-define-inline
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-define-inline&sr=1][Find modifications in git logs]]

: Non-nil means define footnotes inline, at reference location.
: When nil, footnotes will be defined in a special section near
: the end of the document.  When t, the [fn:label:definition] notation
: will be used to define the footnote at the reference position.

** org-replace-disputed-keys =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-replace-disputed-keys
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-replace-disputed-keys&sr=1][Find modifications in git logs]]

: Non-nil means use alternative key bindings for some keys.
: Org mode uses S-<cursor> keys for changing timestamps and priorities.
: These keys are also used by other packages like shift-selection-mode'
: (built into Emacs 23), `CUA-mode' or `windmove.el'.
: If you want to use Org mode together with one of these other modes,
: or more generally if you would like to move some Org mode commands to
: other keys, set this variable and configure the keys with the variable
: `org-disputed-keys'.
: 
: This option is only relevant at load-time of Org mode, and must be set
: *before* org.el is loaded.  Changing it requires a restart of Emacs to
: become effective.

** org-agenda-block-separator =61=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-block-separator
   :END:

- *Type:* (choice (const :tag "Disabled"...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-block-separator&sr=1][Find modifications in git logs]]

: The separator between blocks in the agenda.
: If this is a string, it will be used as the separator, with a newline added.
: If it is a character, it will be repeated to fill the window width.
: If nil the separator is disabled.  In `org-agenda-custom-commands' this
: addresses the separator between the current and the previous block.

** org-beamer-column-view-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-column-view-format
   :END:

- *Type:* (choice (const :tag "Do not in...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-column-view-format&sr=1][Find modifications in git logs]]

: Column view format that should be used to fill the template.

** org-texinfo-text-markup-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-text-markup-alist
   :END:

- *Type:* alist
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-text-markup-alist&sr=1][Find modifications in git logs]]

: Alist of Texinfo expressions to convert text markup.
: 
: The key must be a symbol among `bold', `code', `italic',
: `strike-through', `underscore' and `verbatim'.  The value is
: a formatting string to wrap fontified text with.
: 
: Value can also be set to the following symbols: `verb', `samp'
: and `code'.  With the first one, Org uses "@verb" to create
: a format string and selects a delimiter character that isn't in
: the string.  For the other two, Org uses "@samp" or "@code"
: to typeset and protects special characters.
: 
: When no association is found for a given markup, text is returned
: as-is.

** org-clock-in-switch-to-state =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-in-switch-to-state
   :END:

- *Type:* (choice (const :tag "Don't for...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-in-switch-to-state&sr=1][Find modifications in git logs]]

: Set task to a special todo state while clocking it.
: The value should be the state to which the entry should be
: switched.  If the value is a function, it must take one
: parameter (the current TODO state of the item) and return the
: state to switch it to.

** org-agenda-restore-windows-after-quit =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-restore-windows-after-quit
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-restore-windows-after-quit&sr=1][Find modifications in git logs]]

: Non-nil means restore window configuration upon exiting agenda.
: Before the window configuration is changed for displaying the agenda,
: the current status is recorded.  When the agenda is exited with
: `q' or `x' and this option is set, the old state is restored.  If
: `org-agenda-window-setup' is `other-frame', the value of this
: option will be ignored.

** org-src-fontify-natively =(funcall (function (closure (b...=
   :PROPERTIES:
   :CUSTOM_ID: org-src-fontify-natively
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-fontify-natively&sr=1][Find modifications in git logs]]

: When non-nil, fontify code in code blocks.
: See also the `org-block' face.

** org-bbdb-general-anniversary-description-after =(funcall (function (closure (d...=
   :PROPERTIES:
   :CUSTOM_ID: org-bbdb-general-anniversary-description-after
   :END:

- *Type:* integer
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bbdb.el;hb=HEAD][org-bbdb.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bbdb-general-anniversary-description-after&sr=1][Find modifications in git logs]]

: When to switch anniversary descriptions to a more general format.
: 
: Anniversary descriptions include the point in time, when the
: anniversary appears.  This is, in its most general form, just the
: date of the anniversary.  Or more specific terms, like "today",
: "tomorrow" or "in n days" are used to describe the time span.
: 
: If the anniversary happens in less than that number of days, the
: specific description is used.  Otherwise, the general one is
: used.

** org-gnus-no-server =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-gnus-no-server
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-gnus.el;hb=HEAD][org-gnus.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-gnus-no-server&sr=1][Find modifications in git logs]]

: Should Gnus be started using `gnus-no-server'?

** org-protocol-reverse-list-of-files =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-protocol-reverse-list-of-files
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-protocol.el;hb=HEAD][org-protocol.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-protocol-reverse-list-of-files&sr=1][Find modifications in git logs]]

: Non-nil means re-reverse the list of filenames passed on the command line.
: The filenames passed on the command line are passed to the emacs-server in
: reverse order.  Set to t (default) to re-reverse the list, i.e. use the
: sequence on the command line.  If nil, the sequence of the filenames is
: unchanged.

** org-protocol-project-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-protocol-project-alist
   :END:

- *Type:* alist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-protocol.el;hb=HEAD][org-protocol.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-protocol-project-alist&sr=1][Find modifications in git logs]]

: Map URLs to local filenames for `org-protocol-open-source' (open-source).
: 
: Each element of this list must be of the form:
: 
:   (module-name :property value property: value ...)
: 
: where module-name is an arbitrary name.  All the values are strings.
: 
: Possible properties are:
: 
:   :online-suffix     - the suffix to strip from the published URLs
:   :working-suffix    - the replacement for online-suffix
:   :base-url          - the base URL, e.g. http://www.example.com/project/
:                        Last slash required.
:   :working-directory - the local working directory.  This is, what base-url will
:                        be replaced with.
:   :redirects         - A list of cons cells, each of which maps a regular
:                        expression to match to a path relative to :working-directory.
: 
: Example:
: 
:    (setq org-protocol-project-alist
:        \='(("https://orgmode.org/worg/"
:           :online-suffix ".php"
:           :working-suffix ".org"
:           :base-url "https://orgmode.org/worg/"
:           :working-directory "/home/user/org/Worg/")
:          ("http://localhost/org-notes/"
:           :online-suffix ".html"
:           :working-suffix ".org"
:           :base-url "http://localhost/org/"
:           :working-directory "/home/user/org/"
:           :rewrites (("org/?$" . "index.php")))
:          ("Hugo based blog"
:           :base-url "https://www.site.com/"
:           :working-directory "~/site/content/post/"
:           :online-suffix ".html"
:           :working-suffix ".md"
:           :rewrites (("\(https://site.com/[0-9]+/[0-9]+/[0-9]+/\)" . ".md")))))
: 
: 
:    The last line tells `org-protocol-open-source' to open
:    /home/user/org/index.php, if the URL cannot be mapped to an existing
:    file, and ends with either "org" or "org/".
: 
: Consider using the interactive functions `org-protocol-create' and
: `org-protocol-create-for-org' to help you filling this variable with valid contents.

** org-enforce-todo-checkbox-dependencies =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-enforce-todo-checkbox-dependencies
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-enforce-todo-checkbox-dependencies&sr=1][Find modifications in git logs]]

: Non-nil means unchecked boxes will block switching the parent to DONE.
: When this is nil, checkboxes have no influence on switching TODO states.
: When non-nil, you first need to check off all check boxes before the TODO
: entry can be switched to DONE.
: This variable needs to be set before org.el is loaded, and you need to
: restart Emacs after a change to make the change effective.  The only way
: to change is while Emacs is running is through the customize interface.

** org-babel-ditaa-java-cmd =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-ditaa-java-cmd
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-ditaa.el;hb=HEAD][ob-ditaa.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-ditaa-java-cmd&sr=1][Find modifications in git logs]]

: Java executable to use when evaluating ditaa blocks.

** org-icalendar-include-sexps =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-include-sexps
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-include-sexps&sr=1][Find modifications in git logs]]

: Non-nil means export to iCalendar files should also cover sexp entries.
: These are entries like in the diary, but directly in an Org file.

** org-babel-ruby-hline-to =(funcall (function (closure (i...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-ruby-hline-to
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-ruby.el;hb=HEAD][ob-ruby.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-ruby-hline-to&sr=1][Find modifications in git logs]]

: Replace hlines in incoming tables with this when translating to ruby.

** org-cycle-level-after-item/entry-creation =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-level-after-item/entry-creation
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-level-after-item/entry-creation&sr=1][Find modifications in git logs]]

: Non-nil means cycle entry level or item indentation in new empty entries.
: 
: When the cursor is at the end of an empty headline, i.e., with only stars
: and maybe a TODO keyword, TAB will then switch the entry to become a child,
: and then all possible ancestor states, before returning to the original state.
: This makes data entry extremely fast:  M-RET to create a new headline,
: on TAB to make it a child, two or more tabs to make it a (grand-)uncle.
: 
: When the cursor is at the end of an empty plain list item, one TAB will
: make it a subitem, two or more tabs will back up to make this an item
: higher up in the item hierarchy.

** org-agenda-start-with-follow-mode =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-start-with-follow-mode
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-start-with-follow-mode&sr=1][Find modifications in git logs]]

: The initial value of follow mode in a newly created agenda window.

** org-agenda-export-html-style =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-export-html-style
   :END:

- *Type:* (choice (const nil) (string))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-export-html-style&sr=1][Find modifications in git logs]]

: The style specification for exported HTML Agenda files.
: If this variable contains a string, it will replace the default <style>
: section as produced by `htmlize'.
: Since there are different ways of setting style information, this variable
: needs to contain the full HTML structure to provide a style, including the
: surrounding HTML tags.  The style specifications should include definitions
: the fonts used by the agenda, here is an example:
: 
:    <style type="text/css">
:        p { font-weight: normal; color: gray; }
:        .org-agenda-structure {
:           font-size: 110%;
:           color: #003399;
:           font-weight: 600;
:        }
:        .org-todo {
:           color: #cc6666;
:           font-weight: bold;
:        }
:        .org-agenda-done {
:           color: #339933;
:        }
:        .org-done {
:           color: #339933;
:        }
:        .title { text-align: center; }
:        .todo, .deadline { color: red; }
:        .done { color: green; }
:     </style>
: 
: or, if you want to keep the style in a file,
: 
:    <link rel="stylesheet" type="text/css" href="mystyles.css">
: 
: As the value of this option simply gets inserted into the HTML <head> header,
: you can "misuse" it to also add other text to the header.

** org-agenda-follow-indirect =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-follow-indirect
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-follow-indirect&sr=1][Find modifications in git logs]]

: Non-nil means `org-agenda-follow-mode' displays only the
: current item's tree, in an indirect buffer.

** org-agenda-persistent-filter =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-persistent-filter
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-persistent-filter&sr=1][Find modifications in git logs]]

: When set, keep filters from one agenda view to the next.

** org-global-properties =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-global-properties
   :END:

- *Type:* (repeat (cons (string :tag "Pr...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-global-properties&sr=1][Find modifications in git logs]]

: List of property/value pairs that can be inherited by any entry.
: 
: This list will be combined with the constant `org-global-properties-fixed'.
: 
: The entries in this list are cons cells where the car is a property
: name and cdr is a string with the value.
: 
: You can set buffer-local values for the same purpose in the variable
: `org-file-properties' this by adding lines like
: 
: #+PROPERTY: NAME VALUE

** org-hide-block-startup =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-hide-block-startup
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hide-block-startup&sr=1][Find modifications in git logs]]

: Non-nil means entering Org mode will fold all blocks.
: This can also be set in on a per-file basis with
: 
: #+STARTUP: hideblocks
: #+STARTUP: showblocks

** org-babel-tangle-comment-format-beg =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-comment-format-beg
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-comment-format-beg&sr=1][Find modifications in git logs]]

: Format of inserted comments in tangled code files.
: The following format strings can be used to insert special
: information into the output using `org-fill-template'.
: %start-line --- the line number at the start of the code block
: %file --------- the file from which the code block was tangled
: %link --------- Org style link to the code block
: %source-name -- name of the code block
: 
: Upon insertion the formatted comment will be commented out, and
: followed by a newline.  To inhibit this post-insertion processing
: set the `org-babel-tangle-uncomment-comments' variable to a
: non-nil value.
: 
: Whether or not comments are inserted during tangling is
: controlled by the :comments header argument.

** org-archive-stamp-time =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-stamp-time
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-stamp-time&sr=1][Find modifications in git logs]]

: Non-nil means add a time stamp to entries moved to an archive file.
: This variable is obsolete and has no effect anymore, instead add or remove
: `time' from the variable `org-archive-save-context-info'.

** org-odt-format-inlinetask-function =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-format-inlinetask-function
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-format-inlinetask-function&sr=1][Find modifications in git logs]]

: Function called to format an inlinetask in ODT code.
: 
: The function must accept six parameters:
:   TODO      the todo keyword, as a string
:   TODO-TYPE the todo type, a symbol among `todo', `done' and nil.
:   PRIORITY  the inlinetask priority, as a string
:   NAME      the inlinetask name, as a string.
:   TAGS      the inlinetask tags, as a string.
:   CONTENTS  the contents of the inlinetask, as a string.
: 
: The function should return the string to be exported.

** org-babel-inline-result-wrap =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-inline-result-wrap
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-inline-result-wrap&sr=1][Find modifications in git logs]]

: Format string used to wrap inline results.
: This string must include a "%s" which will be replaced by the results.

** org-calc-default-modes =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-calc-default-modes
   :END:

- *Type:* plist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-calc-default-modes&sr=1][Find modifications in git logs]]

: List with Calc mode settings for use in `calc-eval' for table formulas.
: The list must contain alternating symbols (Calc modes variables and values).
: Don't remove any of the default settings, just change the values.  Org mode
: relies on the variables to be present in the list.

** org-agenda-exporter-settings =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-exporter-settings
   :END:

- *Type:* (repeat (list (variable) (sexp...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-exporter-settings&sr=1][Find modifications in git logs]]

: Alist of variable/value pairs that should be active during agenda export.
: This is a good place to set options for ps-print and for htmlize.
: Note that the way this is implemented, the values will be evaluated
: before assigned to the variables.  So make sure to quote values you do
: *not* want evaluated, for example
: 
:    (setq org-agenda-exporter-settings
:          \='((ps-print-color-p \='black-white)))

** org-log-note-headings =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-note-headings
   :END:

- *Type:* (list :greedy t (cons (const :...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-note-headings&sr=1][Find modifications in git logs]]

: Headings for notes added to entries.
: 
: The value is an alist, with the car being a symbol indicating the
: note context, and the cdr is the heading to be used.  The heading
: may also be the empty string.  The following placeholders can be
: used:
: 
:   %t  a time stamp.
:   %T  an active time stamp instead the default inactive one
:   %d  a short-format time stamp.
:   %D  an active short-format time stamp.
:   %s  the new TODO state or time stamp (inactive), in double quotes.
:   %S  the old TODO state or time stamp (inactive), in double quotes.
:   %u  the user name.
:   %U  full user name.
: 
: In fact, it is not a good idea to change the `state' entry,
: because Agenda Log mode depends on the format of these entries.

** org-babel-python-hline-to =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-python-hline-to
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-python.el;hb=HEAD][ob-python.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-python-hline-to&sr=1][Find modifications in git logs]]

: Replace hlines in incoming tables with this when translating to python.

** org-babel-shell-names =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-shell-names
   :END:

- *Type:* (repeat (string :tag "Shell na...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-shell.el;hb=HEAD][ob-shell.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-shell-names&sr=1][Find modifications in git logs]]

: List of names of shell supported by babel shell code blocks.
: Call `org-babel-shell-initialize' when modifying this variable
: outside the Customize interface.

** org-deadline-past-days =10000=
   :PROPERTIES:
   :CUSTOM_ID: org-deadline-past-days
   :END:

- *Type:* integer
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-deadline-past-days&sr=1][Find modifications in git logs]]

: Number of days to warn about missed deadlines.
: When an item has deadline on a date, it shows up in the agenda on
: this day and will appear as a reminder until it is marked DONE or
: for the number of days given here.

** org-html-use-infojs =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-use-infojs
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-use-infojs&sr=1][Find modifications in git logs]]

: Non-nil when Sebastian Rose's Java Script org-info.js should be active.
: This option can be nil or t to never or always use the script.
: It can also be the symbol `when-configured', meaning that the
: script will be linked into the export file if and only if there
: is a "#+INFOJS_OPT:" line in the buffer.  See also the variable
: `org-html-infojs-options'.

** org-beamer-theme =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-theme
   :END:

- *Type:* (choice (const :tag "Do not in...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-theme&sr=1][Find modifications in git logs]]

: Default theme used in Beamer presentations.

** org-clock-total-time-cell-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-total-time-cell-format
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-total-time-cell-format&sr=1][Find modifications in git logs]]

: Format string for the total time cells.

** org-export-snippet-translation-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-snippet-translation-alist
   :END:

- *Type:* (repeat (cons (string :tag "Sh...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-snippet-translation-alist&sr=1][Find modifications in git logs]]

: Alist between export snippets back-ends and exporter back-ends.
: 
: This variable allows providing shortcuts for export snippets.
: 
: For example, with a value of \='(("h" . "html")), the
: HTML back-end will recognize the contents of "@@h:<b>@@" as
: HTML code while every other back-end will ignore it.

** org-agenda-category-icon-alist =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-category-icon-alist
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-category-icon-alist&sr=1][Find modifications in git logs]]

: Alist of category icon to be displayed in agenda views.
: 
: Each entry should have the following format:
: 
:   (CATEGORY-REGEXP FILE-OR-DATA TYPE DATA-P PROPS)
: 
: Where CATEGORY-REGEXP is a regexp matching the categories where
: the icon should be displayed.
: FILE-OR-DATA either a file path or a string containing image data.
: 
: The other fields can be omitted safely if not needed:
: TYPE indicates the image type.
: DATA-P is a boolean indicating whether the FILE-OR-DATA string is
: image data.
: PROPS are additional image attributes to assign to the image,
: like, e.g. `:ascent center'.
: 
:    ("Org" "/path/to/icon.png" nil nil :ascent center)
: 
: If you want to set the display properties yourself, just put a
: list as second element:
: 
:   (CATEGORY-REGEXP (MY PROPERTY LIST))
: 
: For example, to display a 16px horizontal space for Emacs
: category, you can use:
: 
:   ("Emacs" \='(space . (:width (16))))

** org-fontify-done-headline =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-fontify-done-headline
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-fontify-done-headline&sr=1][Find modifications in git logs]]

: Non-nil means change the face of a headline if it is marked DONE.
: Normally, only the TODO/DONE keyword indicates the state of a headline.
: When this is non-nil, the headline after the keyword is set to the
: `org-headline-done' as an additional indication.

** org-mouse-punctuation =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-punctuation
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-punctuation&sr=1][Find modifications in git logs]]

: Punctuation used when inserting text by drag and drop.

** org-latex-tables-booktabs =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-tables-booktabs
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-tables-booktabs&sr=1][Find modifications in git logs]]

: When non-nil, display tables in a formal "booktabs" style.
: This option assumes that the "booktabs" package is properly
: loaded in the header of the document.  This value can be ignored
: locally with ":booktabs t" and ":booktabs nil" LaTeX
: attributes.

** org-startup-indented =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-startup-indented
   :END:

- *Type:* (choice (const :tag "Not" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-startup-indented&sr=1][Find modifications in git logs]]

: Non-nil means turn on `org-indent-mode' on startup.
: This can also be configured on a per-file basis by adding one of
: the following lines anywhere in the buffer:
: 
:    #+STARTUP: indent
:    #+STARTUP: noindent

** org-agenda-add-entry-text-descriptive-links =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-add-entry-text-descriptive-links
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-add-entry-text-descriptive-links&sr=1][Find modifications in git logs]]

: Non-nil means export org-links as descriptive links in agenda added text.
: This variable applies to the text added to the agenda when
: `org-agenda-add-entry-text-maxlines' is larger than 0.
: When this variable nil, the URL will (also) be shown.

** org-html-text-markup-alist =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-text-markup-alist
   :END:

- *Type:* (alist :key-type (symbol :tag ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-text-markup-alist&sr=1][Find modifications in git logs]]

: Alist of HTML expressions to convert text markup.
: 
: The key must be a symbol among `bold', `code', `italic',
: `strike-through', `underline' and `verbatim'.  The value is
: a formatting string to wrap fontified text with.
: 
: If no association can be found for a given markup, text will be
: returned as-is.

** org-list-automatic-rules =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-automatic-rules
   :END:

- *Type:* (alist :tag "Sets of rules" :k...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-automatic-rules&sr=1][Find modifications in git logs]]

: Non-nil means apply set of rules when acting on lists.
: \<org-mode-map>
: By default, automatic actions are taken when using
:   `\[org-meta-return]',
:   `\[org-metaright]',
:   `\[org-metaleft]',
:   `\[org-shiftmetaright]',
:   `\[org-shiftmetaleft]',
:   `\[org-ctrl-c-minus]',
:   `\[org-toggle-checkbox]',
:   `\[org-insert-todo-heading]'.
: 
: You can disable individually these rules by setting them to nil.
: Valid rules are:
: 
: checkbox  when non-nil, checkbox statistics is updated each time
:           you either insert a new checkbox or toggle a checkbox.
: indent    when non-nil, indenting or outdenting list top-item
:           with its subtree will move the whole list and
:           outdenting a list whose bullet is * to column 0 will
:           change that bullet to "-".

** org-hide-leading-stars =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-hide-leading-stars
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hide-leading-stars&sr=1][Find modifications in git logs]]

: Non-nil means hide the first N-1 stars in a headline.
: This works by using the face `org-hide' for these stars.  This
: face is white for a light background, and black for a dark
: background.  You may have to customize the face `org-hide' to
: make this work.
: Changing it requires restart of `font-lock-mode' to become effective
: also in regions already fontified.
: You may also set this on a per-file basis by adding one of the following
: lines to the buffer:
: 
:    #+STARTUP: hidestars
:    #+STARTUP: showstars

** org-odt-inline-formula-rules =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-inline-formula-rules
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-inline-formula-rules&sr=1][Find modifications in git logs]]

: Rules characterizing formula files that can be inlined into ODT.
: 
: A rule consists in an association whose key is the type of link
: to consider, and value is a regexp that will be matched against
: link's path.

** org-table-allow-automatic-line-recalculation =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-allow-automatic-line-recalculation
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-allow-automatic-line-recalculation&sr=1][Find modifications in git logs]]

: Non-nil means lines marked with |#| or |*| will be recomputed automatically.
: \<org-mode-map>Automatically means when `TAB' or `RET' or `\[org-ctrl-c-ctrl-c]' are pressed in the line.

** org-use-fast-todo-selection =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-fast-todo-selection
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-fast-todo-selection&sr=1][Find modifications in git logs]]

: \<org-mode-map>Non-nil means use the fast todo selection scheme with `\[org-todo]'.
: This variable describes if and under what circumstances the cycling
: mechanism for TODO keywords will be replaced by a single-key, direct
: selection scheme.
: 
: When nil, fast selection is never used.
: 
: When the symbol `prefix', it will be used when `org-todo' is called
: with a prefix argument,  i.e. `\[universal-argument] \[org-todo]' in an Org buffer, and
: `\[universal-argument] t' in an agenda buffer.
: 
: When t, fast selection is used by default.  In this case, the prefix
: argument forces cycling instead.
: 
: In all cases, the special interface is only used if access keys have
: actually been assigned by the user, i.e. if keywords in the configuration
: are followed by a letter in parenthesis, like TODO(t).

** org-habit-following-days =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-following-days
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-following-days&sr=1][Find modifications in git logs]]

: Number of days after today to appear in consistency graphs.

** org-special-ctrl-k =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-special-ctrl-k
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-special-ctrl-k&sr=1][Find modifications in git logs]]

: Non-nil means `C-k' will behave specially in headlines.
: When nil, `C-k' will call the default `kill-line' command.
: When t, the following will happen while the cursor is in the headline:
: 
: - When the cursor is at the beginning of a headline, kill the entire
:   line and possible the folded subtree below the line.
: - When in the middle of the headline text, kill the headline up to the tags.
: - When after the headline text, kill the tags.

** org-special-ctrl-o =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-special-ctrl-o
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-special-ctrl-o&sr=1][Find modifications in git logs]]

: Non-nil means, make `C-o' insert a row in tables.

** org-man-remove-logfiles =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-remove-logfiles
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-remove-logfiles&sr=1][Find modifications in git logs]]

: Non-nil means remove the logfiles produced by PDF production.
: These are the .aux, .log, .out, and .toc files.

** org-latex-image-default-width =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-image-default-width
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-image-default-width&sr=1][Find modifications in git logs]]

: Default width for images.
: This value will not be used if a height is provided.

** org-columns-summary-types =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-summary-types
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-colview.el;hb=HEAD][org-colview.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-summary-types&sr=1][Find modifications in git logs]]

: Alist between operators and summarize functions.
: 
: Each association follows the pattern (LABEL . SUMMARIZE) where
: 
:   LABEL is a string used in #+COLUMNS definition describing the
:   summary type.  It can contain any character but "}".  It is
:   case-sensitive.
: 
:   SUMMARIZE is a function called with two arguments.  The first
:   argument is a non-empty list of values, as non-empty strings.
:   The second one is a format string or nil.  It has to return
:   a string summarizing the list of values.
: 
: Note that the return value can become one value for an higher
: order summary, so the function is expected to handle its own
: output.
: 
: Types defined in this variable take precedence over those defined
: in `org-columns-summary-types-default', which see.

** org-list-demote-modify-bullet =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-demote-modify-bullet
   :END:

- *Type:* (repeat (cons (choice :tag "If...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-demote-modify-bullet&sr=1][Find modifications in git logs]]

: Default bullet type installed when demoting an item.
: This is an association list, for each bullet type, this alist will point
: to the bullet that should be used when this item is demoted.
: For example,
: 
:  (setq org-list-demote-modify-bullet
:        \='(("+" . "-") ("-" . "+") ("*" . "+")))
: 
: will make
: 
:   + Movies
:     + Silence of the Lambs
:     + My Cousin Vinny
:   + Books
:     + The Hunt for Red October
:     + The Road to Omaha
: 
: into
: 
:   + Movies
:     - Silence of the Lambs
:     - My Cousin Vinny
:   + Books
:     - The Hunt for Red October
:     - The Road to Omaha

** org-clock-task-overrun-text =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-task-overrun-text
   :END:

- *Type:* (choice (const :tag "Just mark...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-task-overrun-text&sr=1][Find modifications in git logs]]

: Extra mode line text to indicate that the clock is overrun.
: The can be nil to indicate that instead of adding text, the clock time
: should get a different face (`org-mode-line-clock-overrun').
: When this is a string, it is prepended to the clock string as an indication,
: also using the face `org-mode-line-clock-overrun'.

** org-publish-sitemap-sort-ignore-case =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-sitemap-sort-ignore-case
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-sitemap-sort-ignore-case&sr=1][Find modifications in git logs]]

: Non-nil when site-map sorting should ignore case.
: 
: You can overwrite this default per project in your
: `org-publish-project-alist', using `:sitemap-ignore-case'.

** org-tags-sort-function =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-tags-sort-function
   :END:

- *Type:* (choice (const :tag "No sortin...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tags-sort-function&sr=1][Find modifications in git logs]]

: When set, tags are sorted using this function as a comparator.

** org-read-date-prefer-future =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-read-date-prefer-future
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-read-date-prefer-future&sr=1][Find modifications in git logs]]

: Non-nil means assume future for incomplete date input from user.
: This affects the following situations:
: 1. The user gives a month but not a year.
:    For example, if it is April and you enter "feb 2", this will be read
:    as Feb 2, *next* year.  "May 5", however, will be this year.
: 2. The user gives a day, but no month.
:    For example, if today is the 15th, and you enter "3", Org will read
:    this as the third of *next* month.  However, if you enter "17",
:    it will be considered as *this* month.
: 
: If you set this variable to the symbol `time', then also the following
: will work:
: 
: 3. If the user gives a time.
:    If the time is before now, it will be interpreted as tomorrow.
: 
: Currently none of this works for ISO week specifications.
: 
: When this option is nil, the current day, month and year will always be
: used as defaults.
: 
: See also `org-agenda-jump-prefer-future'.

** org-edit-src-turn-on-auto-save =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-turn-on-auto-save
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-turn-on-auto-save&sr=1][Find modifications in git logs]]

: Non-nil means turn `auto-save-mode' on when editing a source block.
: This will save the content of the source code editing buffer into
: a newly created file, not the base buffer for this source block.
: 
: If you want to regularly save the base buffer instead of the source
: code editing buffer, see `org-edit-src-auto-save-idle-delay' instead.

** org-agenda-file-regexp =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-file-regexp
   :END:

- *Type:* regexp
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-file-regexp&sr=1][Find modifications in git logs]]

: Regular expression to match files for `org-agenda-files'.
: If any element in the list in that variable contains a directory instead
: of a normal file, all files in that directory that are matched by this
: regular expression will be included.

** org-export-with-smart-quotes =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-smart-quotes
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-smart-quotes&sr=1][Find modifications in git logs]]

: Non-nil means activate smart quotes during export.
: This option can also be set with the OPTIONS keyword,
: e.g., "':t".
: 
: When setting this to non-nil, you need to take care of
: using the correct Babel package when exporting to LaTeX.
: E.g., you can load Babel for french like this:
: 
: #+LATEX_HEADER: \usepackage[french]{babel}

** org-html-inline-image-rules =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-inline-image-rules
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-inline-image-rules&sr=1][Find modifications in git logs]]

: Rules characterizing image files that can be inlined into HTML.
: A rule consists in an association whose key is the type of link
: to consider, and value is a regexp that will be matched against
: link's path.

** org-table-convert-region-max-lines =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-convert-region-max-lines
   :END:

- *Type:* integer
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-convert-region-max-lines&sr=1][Find modifications in git logs]]

: Max lines that `org-table-convert-region' will attempt to process.
: 
: The function can be slow on larger regions; this safety feature
: prevents it from hanging emacs.

** org-latex-compiler =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-compiler
   :END:

- *Type:* (choice (const :tag "pdfLaTeX"...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-compiler&sr=1][Find modifications in git logs]]

: LaTeX compiler to use.
: 
: Must be an element in `org-latex-compilers' or the empty quote.
: Can also be set in buffers via #+LATEX_COMPILER.  See also
: `org-latex-compiler-file-string'.

** org-log-redeadline =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-redeadline
   :END:

- *Type:* (choice (const :tag "No loggin...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-redeadline&sr=1][Find modifications in git logs]]

: Information to record when the deadline date of a tasks is modified.
: 
: Possible values are:
: 
: nil     Don't add anything, just change the date
: time    Add a time stamp to the task
: note    Prompt for a note and add it with template `org-log-note-headings'
: 
: This option can also be set with on a per-file-basis with
: 
:    #+STARTUP: nologredeadline
:    #+STARTUP: logredeadline
:    #+STARTUP: lognoteredeadline
: 
: You can have local logging settings for a subtree by setting the LOGGING
: property to one or more of these keywords.

** org-agenda-todo-ignore-timestamp =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-ignore-timestamp
   :END:

- *Type:* (choice (const :tag "Ignore fu...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-ignore-timestamp&sr=1][Find modifications in git logs]]

: Non-nil means don't show entries with a timestamp.
: This applies when creating the global todo list.
: Valid values are:
: 
: past     Don't show entries for today or in the past.
: 
: future   Don't show entries with a timestamp in the future.
:          The idea behind this is that if it has a future
:          timestamp, you don't want to think about it until the
:          date.
: 
: all      Don't show any entries with a timestamp in the global todo list.
:          The idea behind this is that by setting a timestamp, you
:          have already "taken care" of this item.
: 
: This variable can also have an integer as a value.  If positive (N),
: todos with a timestamp N or more days in the future will be ignored.  If
: negative (-N), todos with a timestamp N or more days in the past will be
: ignored.  If 0, todos with a timestamp either today or in the future will
: be ignored.  For example, a value of -1 will exclude todos with a
: timestamp in the past (yesterday or earlier), while a value of 7 will
: exclude todos with a timestamp a week or more in the future.
: 
: See also `org-agenda-todo-ignore-with-date'.
: See also the variable `org-agenda-tags-todo-honor-ignore-options' if you want
: to make his option also apply to the tags-todo list.

** org-koma-letter-email =(quote org-koma-letter-email)=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-email
   :END:

- *Type:* (radio (function-item org-koma...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-email&sr=1][Find modifications in git logs]]

: Sender's email address.
: 
: This variable defaults to the value `org-koma-letter-email' which
: returns `user-mail-address'.  Alternatively a string, nil or
: a function may be given.  Functions must return a string.
: 
: This option can also be set with the EMAIL keyword.

** org-agenda-tags-column =-80=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-tags-column
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-tags-column&sr=1][Find modifications in git logs]]

: Shift tags in agenda items to this column.
: If this number is positive, it specifies the column.  If it is negative,
: it means that the tags should be flushright to that column.  For example,
: -80 works well for a normal 80 character screen.

** org-koma-letter-headline-is-opening-maybe =t=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-headline-is-opening-maybe
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-headline-is-opening-maybe&sr=1][Find modifications in git logs]]

: Non-nil means a headline may be used as an opening and closing.
: See also `org-koma-letter-opening' and
: `org-koma-letter-closing'.

** org-agenda-current-time-string ="now - - - - - - - - - - - - -...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-current-time-string
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-current-time-string&sr=1][Find modifications in git logs]]

: The string for the current time marker in the agenda.

** org-bibtex-key-property =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-key-property
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-key-property&sr=1][Find modifications in git logs]]

: Property that holds the bibtex key.
: By default, this is CUSTOM_ID, which enables easy linking to
: bibtex headlines from within an org file.  This can be set to ID
: to enable global links, but only with great caution, as global
: IDs must be unique.

** org-export-with-archived-trees =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-archived-trees
   :END:

- *Type:* (choice (const :tag "Not at al...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-archived-trees&sr=1][Find modifications in git logs]]

: Whether sub-trees with the ARCHIVE tag should be exported.
: 
: This can have three different values:
: nil         Do not export, pretend this tree is not present.
: t           Do export the entire tree.
: `headline'  Only export the headline, but skip the tree below it.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "arch:nil".

** org-coderef-label-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-coderef-label-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-coderef-label-format&sr=1][Find modifications in git logs]]

: The default coderef format.
: This format string will be used to search for coderef labels in literal
: examples (EXAMPLE and SRC blocks).  The format can be overwritten in
: an individual literal example with the -l option, like
: 
: #+BEGIN_SRC pascal +n -r -l "((%s))"
: ...
: #+END_SRC
: 
: If you want to use this for HTML export, make sure that the format does
: not introduce special font-locking, and avoid the HTML special
: characters `<', `>', and `&'.  The reason for this restriction is that
: the labels are searched for only after htmlize has done its job.

** org-bbdb-default-anniversary-format =(funcall (function (closure (d...=
   :PROPERTIES:
   :CUSTOM_ID: org-bbdb-default-anniversary-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bbdb.el;hb=HEAD][org-bbdb.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bbdb-default-anniversary-format&sr=1][Find modifications in git logs]]

: Default anniversary class.

** org-clock-out-remove-zero-time-clocks =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-out-remove-zero-time-clocks
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-out-remove-zero-time-clocks&sr=1][Find modifications in git logs]]

: Non-nil means remove the clock line when the resulting time is zero.

** org-export-with-fixed-width =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-fixed-width
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-fixed-width&sr=1][Find modifications in git logs]]

: Non-nil means export lines starting with ":".
: This option can also be set with the OPTIONS keyword,
: e.g. "::nil".

** org-rss-categories =(quote from-tags)=
   :PROPERTIES:
   :CUSTOM_ID: org-rss-categories
   :END:

- *Type:* (choice (const :tag "From tags...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-rss.el;hb=HEAD][ox-rss.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-rss-categories&sr=1][Find modifications in git logs]]

: Where to extract items category information from.
: The default is to extract categories from the tags of the
: headlines.  When set to another value, extract the category
: from the :CATEGORY: property of the entry.

** org-babel-python-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-python-command
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-python.el;hb=HEAD][ob-python.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-python-command&sr=1][Find modifications in git logs]]

: Name of the command for executing Python code.

** org-latex-logfiles-extensions =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-logfiles-extensions
   :END:

- *Type:* (repeat (string :tag "Extensio...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-logfiles-extensions&sr=1][Find modifications in git logs]]

: The list of file extensions to consider as LaTeX logfiles.
: The logfiles will be removed if `org-latex-remove-logfiles' is
: non-nil.

** org-rss-use-entry-url-as-guid =t=
   :PROPERTIES:
   :CUSTOM_ID: org-rss-use-entry-url-as-guid
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-rss.el;hb=HEAD][ox-rss.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-rss-use-entry-url-as-guid&sr=1][Find modifications in git logs]]

: Use the URL for the <guid> metatag?
: When nil, Org will create ids using `org-icalendar-create-uid'.

** org-babel-tangle-comment-format-end =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-comment-format-end
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-comment-format-end&sr=1][Find modifications in git logs]]

: Format of inserted comments in tangled code files.
: The following format strings can be used to insert special
: information into the output using `org-fill-template'.
: %start-line --- the line number at the start of the code block
: %file --------- the file from which the code block was tangled
: %link --------- Org style link to the code block
: %source-name -- name of the code block
: 
: Upon insertion the formatted comment will be commented out, and
: followed by a newline.  To inhibit this post-insertion processing
: set the `org-babel-tangle-uncomment-comments' variable to a
: non-nil value.
: 
: Whether or not comments are inserted during tangling is
: controlled by the :comments header argument.

** org-export-preserve-breaks =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-preserve-breaks
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-preserve-breaks&sr=1][Find modifications in git logs]]

: Non-nil means preserve all line breaks when exporting.
: This option can also be set with the OPTIONS keyword,
: e.g. "\n:t".

** org-doi-server-url =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-doi-server-url
   :END:

- *Type:* string
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-doi-server-url&sr=1][Find modifications in git logs]]

: The URL of the DOI server.

** org-ctags-path-to-ctags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-path-to-ctags
   :END:

- *Type:* file
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-path-to-ctags&sr=1][Find modifications in git logs]]

: Name of the ctags executable file.

** org-clock-in-resume =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-in-resume
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-in-resume&sr=1][Find modifications in git logs]]

: If non-nil, resume clock when clocking into task with open clock.
: When clocking into a task with a clock entry which has not been closed,
: the clock can be resumed from that point.

** org-agenda-show-current-time-in-grid =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-show-current-time-in-grid
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-show-current-time-in-grid&sr=1][Find modifications in git logs]]

: Non-nil means show the current time in the time grid.

** org-goto-interface =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-goto-interface
   :END:

- *Type:* (choice (const :tag "Outline" ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-interface&sr=1][Find modifications in git logs]]

: The default interface to be used for `org-goto'.
: Allowed values are:
: outline                  The interface shows an outline of the relevant file
:                          and the correct heading is found by moving through
:                          the outline or by searching with incremental search.
: outline-path-completion  Headlines in the current buffer are offered via
:                          completion.  This is the interface also used by
:                          the refile command.

** org-agenda-timerange-leaders =(quote ("" "(%d/%d): "))=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-timerange-leaders
   :END:

- *Type:* (list (string :tag "Deadline t...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-timerange-leaders&sr=1][Find modifications in git logs]]

: Text preceding timerange entries in the agenda view.
: This is a list with two strings.  The first applies when the range
: is entirely on one day.  The second applies if the range spans several days.
: The strings may have two "%d" format specifiers which will be filled
: with the sequence number of the days, and the total number of days in the
: range, respectively.

** org-format-latex-signal-error =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-format-latex-signal-error
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-format-latex-signal-error&sr=1][Find modifications in git logs]]

: Non-nil means signal an error when image creation of LaTeX snippets fails.
: When nil, just push out a message.

** org-agenda-skip-unavailable-files =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-unavailable-files
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-unavailable-files&sr=1][Find modifications in git logs]]

: Non-nil means to just skip non-reachable files in `org-agenda-files'.
: A nil value means to remove them, after a query, from the list.

** org-ascii-text-width =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-text-width
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-text-width&sr=1][Find modifications in git logs]]

: Maximum width of exported text.
: This number includes margin size, as set in
: `org-ascii-global-margin'.

** org-table-duration-custom-format =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-duration-custom-format
   :END:

- *Type:* (choice (symbol :tag "Seconds"...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-duration-custom-format&sr=1][Find modifications in git logs]]

: Format for the output of calc computations like $1+$2;t.
: The default value is `hours', and will output the results as a
: number of hours.  Other allowed values are `seconds', `minutes' and
: `days', and the output will be a fraction of seconds, minutes or
: days. `hh:mm' selects to use hours and minutes, ignoring seconds.
: The `U' flag in a table formula will select this specific format for
: a single formula.

** org-latex-caption-above =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-caption-above
   :END:

- *Type:* (choice (const :tag "For all e...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-caption-above&sr=1][Find modifications in git logs]]

: When non-nil, place caption string at the beginning of elements.
: Otherwise, place it near the end.  When value is a list of
: symbols, put caption above selected elements only.  Allowed
: symbols are: `image', `table', `src-block' and `special-block'.

** org-agenda-sticky =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-sticky
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-sticky&sr=1][Find modifications in git logs]]

: Non-nil means agenda q key will bury agenda buffers.
: Agenda commands will then show existing buffer instead of generating new ones.
: When nil, `q' will kill the single agenda buffer.

** org-loop-over-headlines-in-active-region =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-loop-over-headlines-in-active-region
   :END:

- *Type:* (choice (const :tag "Don't loo...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-loop-over-headlines-in-active-region&sr=1][Find modifications in git logs]]

: Shall some commands act upon headlines in the active region?
: 
: When set to t, some commands will be performed in all headlines
: within the active region.
: 
: When set to `start-level', some commands will be performed in all
: headlines within the active region, provided that these headlines
: are of the same level than the first one.
: 
: When set to a string, those commands will be performed on the
: matching headlines within the active region.  Such string must be
: a tags/property/todo match as it is used in the agenda tags view.
: 
: The list of commands is: `org-schedule', `org-deadline',
: `org-todo', `org-archive-subtree', `org-archive-set-tag' and
: `org-archive-to-archive-sibling'.  The archiving commands skip
: already archived entries.

** org-sort-agenda-notime-is-late =t=
   :PROPERTIES:
   :CUSTOM_ID: org-sort-agenda-notime-is-late
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sort-agenda-notime-is-late&sr=1][Find modifications in git logs]]

: Non-nil means items without time are considered late.
: This is only relevant for sorting.  When t, items which have no explicit
: time like 15:30 will be considered as 99:01, i.e. later than any items which
: do have a time.  When nil, the default time is before 0:00.  You can use this
: option to decide if the schedule for today should come before or after timeless
: agenda entries.

** org-calendar-to-agenda-key =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-calendar-to-agenda-key
   :END:

- *Type:* sexp
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-calendar-to-agenda-key&sr=1][Find modifications in git logs]]

: The key to be installed in `calendar-mode-map' for switching to the agenda.
: The command `org-calendar-goto-agenda' will be bound to this key.  The
: default is the character `c' because then `c' can be used to switch back and
: forth between agenda and calendar.

** org-faces-easy-properties =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-faces-easy-properties
   :END:

- *Type:* (repeat (cons (choice (const t...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-faces-easy-properties&sr=1][Find modifications in git logs]]

: The property changes by easy faces.
: This is an alist, the keys show the area of application, the values
: can be `:foreground' or `:background'.  A color string for special
: keywords will then be interpreted as either foreground or background
: color.

** org-clock-frame-title-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-frame-title-format
   :END:

- *Type:* sexp
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-frame-title-format&sr=1][Find modifications in git logs]]

: The value for `frame-title-format' when clocking in.
: 
: When `org-clock-clocked-in-display' is set to `frame-title'
: or `both', clocking in will replace `frame-title-format' with
: this value.  Clocking out will restore `frame-title-format'.
: 
: `org-frame-title-string' is a format string using the same
: specifications than `frame-title-format', which see.

** org-icalendar-include-todo =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-include-todo
   :END:

- *Type:* (choice (const :tag "None" nil...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-include-todo&sr=1][Find modifications in git logs]]

: Non-nil means create VTODO components from TODO items.
: 
: Valid values are:
: nil                  don't include any task.
: t                    include tasks that are not in DONE state.
: `unblocked'          include all TODO items that are not blocked.
: `all'                include both done and not done items.

** org-agenda-todo-ignore-with-date =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-ignore-with-date
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-ignore-with-date&sr=1][Find modifications in git logs]]

: Non-nil means don't show entries with a date in the global todo list.
: You can use this if you prefer to mark mere appointments with a TODO keyword,
: but don't want them to show up in the TODO list.
: When this is set, it also covers deadlines and scheduled items, the settings
: of `org-agenda-todo-ignore-scheduled' and `org-agenda-todo-ignore-deadlines'
: will be ignored.
: See also the variable `org-agenda-tags-todo-honor-ignore-options'.

** org-use-effective-time =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-effective-time
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-effective-time&sr=1][Find modifications in git logs]]

: If non-nil, consider `org-extend-today-until' when creating timestamps.
: For example, if `org-extend-today-until' is 8, and it's 4am, then the
: "effective time" of any timestamps between midnight and 8am will be
: 23:59 of the previous day.

** org-icalendar-use-deadline =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-use-deadline
   :END:

- *Type:* (set :greedy t (const :tag "De...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-use-deadline&sr=1][Find modifications in git logs]]

: Contexts where iCalendar export should use a deadline time stamp.
: 
: This is a list with possibly several symbols in it.  Valid symbols are:
: 
: `event-if-todo'       Deadlines in TODO entries become calendar events.
: `event-if-not-todo'   Deadlines in non-TODO entries become calendar events.
: `todo-due'            Use deadlines in TODO entries as due-dates.

** org-latex-tables-centered =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-tables-centered
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-tables-centered&sr=1][Find modifications in git logs]]

: When non-nil, tables are exported in a center environment.

** org-table-formula-create-columns =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-formula-create-columns
   :END:

- *Type:* (choice (const :tag "Setting a...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-formula-create-columns&sr=1][Find modifications in git logs]]

: Non-nil means that evaluation of a field formula can add new
: columns if an out-of-bounds field is being set.

** org-agenda-span =(quote week)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-span
   :END:

- *Type:* (choice (const :tag "Day" day)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-span&sr=1][Find modifications in git logs]]

: Number of days to include in overview display.
: Can be day, week, month, year, or any number of days.
: Custom commands can set this variable in the options section.

** org-startup-with-beamer-mode =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-startup-with-beamer-mode
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-startup-with-beamer-mode&sr=1][Find modifications in git logs]]

: Non-nil means turn on `org-beamer-mode' on startup.
: This can also be configured on a per-file basis by adding one of
: the following lines anywhere in the buffer:
: 
:    #+STARTUP: beamer

** org-koma-letter-prefer-subject =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-prefer-subject
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-prefer-subject&sr=1][Find modifications in git logs]]

: Non-nil means title should be interpreted as subject if subject is missing.
: This option can also be set with the OPTIONS keyword,
: e.g. "title-subject:t".

** org-export-with-author =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-author
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-author&sr=1][Find modifications in git logs]]

: Non-nil means insert author name into the exported file.
: This option can also be set with the OPTIONS keyword,
: e.g. "author:nil".

** org-show-notification-handler =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-show-notification-handler
   :END:

- *Type:* (choice (const nil) (string :t...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-notification-handler&sr=1][Find modifications in git logs]]

: Function or program to send notification with.
: The function or program will be called with the notification
: string as argument.

** org-attach-store-link-p =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-store-link-p
   :END:

- *Type:* (choice (const :tag "Don't sto...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-store-link-p&sr=1][Find modifications in git logs]]

: Non-nil means store a link to a file when attaching it.

** org-babel-maxima-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-maxima-command
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-maxima.el;hb=HEAD][ob-maxima.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-maxima-command&sr=1][Find modifications in git logs]]

: Command used to call maxima on the shell.

** org-html-mathjax-template =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-mathjax-template
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-mathjax-template&sr=1][Find modifications in git logs]]

: The MathJax template.  See also `org-html-mathjax-options'.

** org-enable-table-editor =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-enable-table-editor
   :END:

- *Type:* (choice (const :tag "off" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-enable-table-editor&sr=1][Find modifications in git logs]]

: Non-nil means lines starting with "|" are handled by the table editor.
: When nil, such lines will be treated like ordinary lines.
: 
: When equal to the symbol `optimized', the table editor will be optimized to
: do the following:
: - Automatic overwrite mode in front of whitespace in table fields.
:   This makes the structure of the table stay in tact as long as the edited
:   field does not exceed the column width.
: - Minimize the number of realigns.  Normally, the table is aligned each time
:   TAB or RET are pressed to move to another field.  With optimization this
:   happens only if changes to a field might have changed the column width.
: Optimization requires replacing the functions `self-insert-command',
: `delete-char', and `backward-delete-char' in Org buffers, with a
: slight (in fact: unnoticeable) speed impact for normal typing.  Org is very
: good at guessing when a re-align will be necessary, but you can always
: force one with `\[org-ctrl-c-ctrl-c]'.
: 
: If you would like to use the optimized version in Org mode, but the
: un-optimized version in OrgTbl-mode, see the variable `orgtbl-optimized'.
: 
: This variable can be used to turn on and off the table editor during a session,
: but in order to toggle optimization, a restart is required.
: 
: See also the variable `org-table-auto-blank-field'.

** org-mobile-encryption-tempfile =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-encryption-tempfile
   :END:

- *Type:* directory
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-encryption-tempfile&sr=1][Find modifications in git logs]]

: File that is being used as a temporary file for encryption.
: This must be local file on your local machine (not on the WebDAV server).
: You might want to put this file into a directory where only you have access.

** org-time-stamp-rounding-minutes =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-time-stamp-rounding-minutes
   :END:

- *Type:* (list (integer :tag "when inse...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-time-stamp-rounding-minutes&sr=1][Find modifications in git logs]]

: Number of minutes to round time stamps to.
: \<org-mode-map>These are two values, the first applies when first creating a time stamp.
: The second applies when changing it with the commands `S-up' and `S-down'.
: When changing the time stamp, this means that it will change in steps
: of N minutes, as given by the second value.
: 
: When a setting is 0 or 1, insert the time unmodified.  Useful rounding
: numbers should be factors of 60, so for example 5, 10, 15.
: 
: When this is larger than 1, you can still force an exact time stamp by using
: a double prefix argument to a time stamp command like `\[org-time-stamp]' or `\[org-time-stamp-inactive],
: and by using a prefix arg to `S-up/down' to specify the exact number
: of minutes to shift.

** org-html-html5-fancy =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-html5-fancy
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-html5-fancy&sr=1][Find modifications in git logs]]

: Non-nil means using new HTML5 elements.
: This variable is ignored for anything other than HTML5 export.
: 
: For compatibility with Internet Explorer, it's probably a good
: idea to download some form of the html5shiv (for instance
: https://code.google.com/p/html5shiv/) and add it to your
: HTML_HEAD_EXTRA, so that your pages don't break for users of IE
: versions 8 and below.

** org-babel-exp-inline-code-template =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-exp-inline-code-template
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-exp.el;hb=HEAD][ob-exp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-exp-inline-code-template&sr=1][Find modifications in git logs]]

: Template used to export the body of inline code blocks.
: This template may be customized to include additional information
: such as the code block name, or the values of particular header
: arguments.  The template is filled out using `org-fill-template',
: and the following %keys may be used.
: 
:  lang ------ the language of the code block
:  name ------ the name of the code block
:  body ------ the body of the code block
:  switches -- the switches associated to the code block
:  flags ----- the flags passed to the code block
: 
: In addition to the keys mentioned above, every header argument
: defined for the code block may be used as a key and will be
: replaced with its value.

** org-export-use-babel =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-use-babel
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-exp.el;hb=HEAD][ob-exp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-use-babel&sr=1][Find modifications in git logs]]

: Switch controlling code evaluation and header processing during export.
: When set to nil no code will be evaluated as part of the export
: process and no header arguments will be obeyed.  When set to
: `inline-only', only inline code blocks will be executed.  Users
: who wish to avoid evaluating code on export should use the header
: argument `:eval never-export'.

** org-latex-to-mathml-convert-command =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-to-mathml-convert-command
   :END:

- *Type:* (choice (const :tag "None" nil...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-to-mathml-convert-command&sr=1][Find modifications in git logs]]

: Command to convert LaTeX fragments to MathML.
: Replace format-specifiers in the command as noted below and use
: `shell-command' to convert LaTeX to MathML.
: %j:     Executable file in fully expanded form as specified by
:         `org-latex-to-mathml-jar-file'.
: %I:     Input LaTeX file in fully expanded form.
: %i:     The latex fragment to be converted.
: %o:     Output MathML file.
: 
: This command is used by `org-create-math-formula'.
: 
: When using MathToWeb as the converter, set this option to
: "java -jar %j -unicode -force -df %o %I".
: 
: When using LaTeXML set this option to
: "latexmlmath "%i" --presentationmathml=%o".

** org-startup-align-all-tables =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-startup-align-all-tables
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-startup-align-all-tables&sr=1][Find modifications in git logs]]

: Non-nil means align all tables when visiting a file.
: This is useful when the column width in tables is forced with <N> cookies
: in table fields.  Such tables will look correct only after the first re-align.
: This can also be configured on a per-file basis by adding one of
: the following lines anywhere in the buffer:
:    #+STARTUP: align
:    #+STARTUP: noalign

** org-table-default-size =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-default-size
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-default-size&sr=1][Find modifications in git logs]]

: The default size for newly created tables, Columns x Rows.

** org-default-notes-file =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-default-notes-file
   :END:

- *Type:* file
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-default-notes-file&sr=1][Find modifications in git logs]]

: Default target for storing notes.
: Used as a fall back file for org-capture.el, for templates that
: do not specify a target file.

** org-make-link-description-function =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-make-link-description-function
   :END:

- *Type:* (choice (const nil) (function)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-make-link-description-function&sr=1][Find modifications in git logs]]

: Function to use for generating link descriptions from links.
: When nil, the link location will be used.  This function must take
: two parameters: the first one is the link, the second one is the
: description generated by `org-insert-link'.  The function should
: return the description to use.

** org-koma-letter-opening =""=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-opening
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-opening&sr=1][Find modifications in git logs]]

: Letter's opening, as a string.
: 
: This option can also be set with the OPENING keyword.  Moreover,
: when:
:   (1) Either `org-koma-letter-prefer-special-headings' is non-nil
:       or the CLOSING keyword is empty
:   (2) `org-koma-letter-headline-is-opening-maybe' is non-nil;
:   (3) the letter contains a headline without a special
:       tag (e.g. "to" or "ps");
: then the opening will be implicitly set as the untagged headline title.

** org-agenda-todo-keyword-format ="%-1s"=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-keyword-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-keyword-format&sr=1][Find modifications in git logs]]

: Format for the TODO keyword in agenda lines.
: Set this to something like "%-12s" if you want all TODO keywords
: to occupy a fixed space in the agenda display.

** org-babel-sh-var-quote-fmt ="$(cat <<'BABEL_TABLE'\n%s\nBA...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-sh-var-quote-fmt
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-sh.el;hb=HEAD][ob-sh.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-sh-var-quote-fmt&sr=1][Find modifications in git logs]]



** org-man-tables-verbatim =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-tables-verbatim
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-tables-verbatim&sr=1][Find modifications in git logs]]

: When non-nil, tables are exported verbatim.

** org-habit-show-done-always-green =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-show-done-always-green
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-show-done-always-green&sr=1][Find modifications in git logs]]

: Non-nil means DONE days will always be green in the consistency graph.
: It will be green even if it was done after the deadline.

** org-agenda-log-mode-items =(quote (closed clock))=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-log-mode-items
   :END:

- *Type:* (set :greedy t (const closed) ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-log-mode-items&sr=1][Find modifications in git logs]]

: List of items that should be shown in agenda log mode.
: \<org-agenda-mode-map>This list may contain the following symbols:
: 
:   closed    Show entries that have been closed on that day.
:   clock     Show entries that have received clocked time on that day.
:   state     Show all logged state changes.
: Note that instead of changing this variable, you can also press `\[universal-argument] \[org-agenda-log-mode]' in
: the agenda to display all available LOG items temporarily.

** org-agenda-remove-timeranges-from-blocks =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-remove-timeranges-from-blocks
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-remove-timeranges-from-blocks&sr=1][Find modifications in git logs]]

: Non-nil means remove time ranges specifications in agenda
: items that span on several days.

** org-latex-footnote-defined-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-footnote-defined-format
   :END:

- *Type:* (choice (const :tag "Use plain...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-footnote-defined-format&sr=1][Find modifications in git logs]]

: Format string used to format reference to footnote already defined.
: %s will be replaced by the label of the referred footnote.

** org-archive-location =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-location
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-location&sr=1][Find modifications in git logs]]

: The location where subtrees should be archived.
: 
: The value of this variable is a string, consisting of two parts,
: separated by a double-colon.  The first part is a filename and
: the second part is a headline.
: 
: When the filename is omitted, archiving happens in the same file.
: %s in the filename will be replaced by the current file
: name (without the directory part).  Archiving to a different file
: is useful to keep archived entries from contributing to the
: Org Agenda.
: 
: The archived entries will be filed as subtrees of the specified
: headline.  When the headline is omitted, the subtrees are simply
: filed away at the end of the file, as top-level entries.  Also in
: the heading you can use %s to represent the file name, this can be
: useful when using the same archive for a number of different files.
: 
: Here are a few examples:
: "%s_archive::"
: 	If the current file is Projects.org, archive in file
: 	Projects.org_archive, as top-level trees.  This is the default.
: 
: "::* Archived Tasks"
: 	Archive in the current file, under the top-level headline
: 	"* Archived Tasks".
: 
: "~/org/archive.org::"
: 	Archive in file ~/org/archive.org (absolute path), as top-level trees.
: 
: "~/org/archive.org::* From %s"
: 	Archive in file ~/org/archive.org (absolute path), under headlines
:         "From FILENAME" where file name is the current file name.
: 
: "~/org/datetree.org::datetree/* Finished Tasks"
:         The "datetree/" string is special, signifying to archive
:         items to the datetree.  Items are placed in either the CLOSED
:         date of the item, or the current date if there is no CLOSED date.
:         The heading will be a subentry to the current date.  There doesn't
:         need to be a heading, but there always needs to be a slash after
:         datetree.  For example, to store archived items directly in the
:         datetree, use "~/org/datetree.org::datetree/".
: 
: "basement::** Finished Tasks"
: 	Archive in file ./basement (relative path), as level 3 trees
: 	below the level 2 heading "** Finished Tasks".
: 
: You may set this option on a per-file basis by adding to the buffer a
: line like
: 
: #+ARCHIVE: basement::** Finished Tasks
: 
: You may also define it locally for a subtree by setting an ARCHIVE property
: in the entry.  If such a property is found in an entry, or anywhere up
: the hierarchy, it will be used.

** org-html-table-row-open-tag =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-row-open-tag
   :END:

- *Type:* (choice :tag "Opening tag" (st...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-row-open-tag&sr=1][Find modifications in git logs]]

: The opening tag for table rows.
: This is customizable so that alignment options can be specified.
: Instead of strings, these can be a Lisp function that will be
: evaluated for each row in order to construct the table row tags.
: 
: The function will be called with these arguments:
: 
:          `number': row number (0 is the first row)
:    `group-number': group number of current row
:    `start-group?': non-nil means the row starts a group
:      `end-group?': non-nil means the row ends a group
:            `top?': non-nil means this is the top row
:         `bottom?': non-nil means this is the bottom row
: 
: For example:
: 
:   (setq org-html-table-row-open-tag
:         (lambda (number group-number start-group? end-group-p top? bottom?)
:            (cond (top? "<tr class=\"tr-top\">")
:                  (bottom? "<tr class=\"tr-bottom\">")
:                  (t (if (= (mod number 2) 1)
:                         "<tr class=\"tr-odd\">"
:                       "<tr class=\"tr-even\">")))))
: 
: will use the "tr-top" and "tr-bottom" classes for the top row
: and the bottom row, and otherwise alternate between "tr-odd" and
: "tr-even" for odd and even rows.

** org-icalendar-combined-name =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-combined-name
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-combined-name&sr=1][Find modifications in git logs]]

: Calendar name for the combined iCalendar representing all agenda files.

** org-priority-start-cycle-with-default =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-priority-start-cycle-with-default
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-priority-start-cycle-with-default&sr=1][Find modifications in git logs]]

: Non-nil means start with default priority when starting to cycle.
: When this is nil, the first step in the cycle will be (depending on the
: command used) one higher or lower than the default priority.
: See also `org-default-priority'.

** org-table-use-standard-references =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-use-standard-references
   :END:

- *Type:* (choice (const :tag "Never, do...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-use-standard-references&sr=1][Find modifications in git logs]]

: Non-nil means using table references like B3 instead of @3$2.
: Possible values are:
: nil     never use them
: from    accept as input, do not present for editing
: t       accept as input and present for editing

** org-src-lang-modes =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-src-lang-modes
   :END:

- *Type:* (repeat (cons (string "Languag...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-lang-modes&sr=1][Find modifications in git logs]]

: Alist mapping languages to their major mode.
: The key is the language name, the value is the string that should
: be inserted as the name of the major mode.  For many languages this is
: simple, but for language where this is not the case, this variable
: provides a way to simplify things on the user side.
: For example, there is no ocaml-mode in Emacs, but the mode to use is
: `tuareg-mode'.

** org-startup-with-inline-images =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-startup-with-inline-images
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-startup-with-inline-images&sr=1][Find modifications in git logs]]

: Non-nil means show inline images when loading a new Org file.
: This can also be configured on a per-file basis by adding one of
: the following lines anywhere in the buffer:
:    #+STARTUP: inlineimages
:    #+STARTUP: noinlineimages

** org-refile-allow-creating-parent-nodes =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-refile-allow-creating-parent-nodes
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile-allow-creating-parent-nodes&sr=1][Find modifications in git logs]]

: Non-nil means allow the creation of new nodes as refile targets.
: New nodes are then created by adding "/new node name" to the completion
: of an existing node.  When the value of this variable is `confirm',
: new node creation must be confirmed by the user (recommended).
: When nil, the completion must match an existing entry.
: 
: Note that, if the new heading is not seen by the criteria
: listed in `org-refile-targets', multiple instances of the same
: heading would be created by trying again to file under the new
: heading.

** org-enable-fixed-width-editor =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-enable-fixed-width-editor
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-enable-fixed-width-editor&sr=1][Find modifications in git logs]]

: Non-nil means lines starting with ":" are treated as fixed-width.
: This currently only means they are never auto-wrapped.
: When nil, such lines will be treated like ordinary lines.

** org-html-metadata-timestamp-format =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-metadata-timestamp-format
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-metadata-timestamp-format&sr=1][Find modifications in git logs]]

: Format used for timestamps in preamble, postamble and metadata.
: See `format-time-string' for more information on its components.

** org-entities-user =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-entities-user
   :END:

- *Type:* (repeat (list (string :tag "na...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-entities.el;hb=HEAD][org-entities.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-entities-user&sr=1][Find modifications in git logs]]

: User-defined entities used in Org to produce special characters.
: Each entry in this list is a list of strings.  It associates the name
: of the entity that can be inserted into an Org file as \name with the
: appropriate replacements for the different export backends.  The order
: of the fields is the following
: 
: name                 As a string, without the leading backslash.
: LaTeX replacement    In ready LaTeX, no further processing will take place.
: LaTeX mathp          Either t or nil.  When t this entity needs to be in
:                      math mode.
: HTML replacement     In ready HTML, no further processing will take place.
:                      Usually this will be an &...; entity.
: ASCII replacement    Plain ASCII, no extensions.
: Latin1 replacement   Use the special characters available in latin1.
: utf-8 replacement    Use the special characters available in utf-8.
: 
: If you define new entities here that require specific LaTeX
: packages to be loaded, add these packages to `org-latex-packages-alist'.

** org-agenda-prefer-last-repeat =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-prefer-last-repeat
   :END:

- *Type:* (choice (const :tag "Prefer la...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-prefer-last-repeat&sr=1][Find modifications in git logs]]

: Non-nil sets date for repeated entries to their last repeat.
: 
: When nil, display SCHEDULED and DEADLINE dates at their base
: date, and in today's agenda, as a reminder.  Display plain
: time-stamps, on the other hand, at every repeat date in the past
: in addition to the base date.
: 
: When non-nil, show a repeated entry at its latest repeat date,
: possibly being today even if it wasn't marked as done.  This
: setting is useful if you do not always mark repeated entries as
: done and, yet, consider that reaching repeat date starts the task
: anew.
: 
: When set to a list of strings, prefer last repeats only for
: entries with these TODO keywords.

** org-agenda-skip-deadline-if-done =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-deadline-if-done
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-deadline-if-done&sr=1][Find modifications in git logs]]

: Non-nil means don't show deadlines when the corresponding item is done.
: When nil, the deadline is still shown and should give you a happy feeling.
: This is relevant for the daily/weekly agenda.  It applies only to the
: actual date of the deadline.  Warnings about approaching and past-due
: deadlines are always turned off when the item is DONE.

** org-texinfo-classes =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-classes
   :END:

- *Type:* (repeat (list (string :tag "Te...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-classes&sr=1][Find modifications in git logs]]

: Alist of Texinfo classes and associated header and structure.
: If #+TEXINFO_CLASS is set in the buffer, use its value and the
: associated information.  Here is the structure of a class
: definition:
: 
:   (class-name
:     header-string
:     (numbered-1 unnumbered-1 appendix-1)
:     (numbered-2 unnumbered-2 appendix-2)
:     ...)
: 
: 
: The header string
: -----------------
: 
: The header string is inserted in the header of the generated
: document, right after "@setfilename" and "@settitle"
: commands.
: 
: If it contains the special string
: 
:   "@documentencoding AUTO"
: 
: "AUTO" will be replaced with an appropriate coding system.  See
: `org-texinfo-coding-system' for more information.  Likewise, if
: the string contains the special string
: 
:   "@documentlanguage AUTO"
: 
: "AUTO" will be replaced with the language defined in the
: buffer, through #+LANGUAGE keyword, or globally, with
: `org-export-default-language', which see.
: 
: 
: The sectioning structure
: ------------------------
: 
: The sectioning structure of the class is given by the elements
: following the header string.  For each sectioning level, a number
: of strings is specified.  A %s formatter is mandatory in each
: section string and will be replaced by the title of the section.

** org-html-xml-declaration =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-xml-declaration
   :END:

- *Type:* (choice (string :tag "Single d...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-xml-declaration&sr=1][Find modifications in git logs]]

: The extension for exported HTML files.
: %s will be replaced with the charset of the exported file.
: This may be a string, or an alist with export extensions
: and corresponding declarations.
: 
: This declaration only applies when exporting to XHTML.

** org-sort-agenda-noeffort-is-high =t=
   :PROPERTIES:
   :CUSTOM_ID: org-sort-agenda-noeffort-is-high
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sort-agenda-noeffort-is-high&sr=1][Find modifications in git logs]]

: Non-nil means items without effort estimate are sorted as high effort.
: This also applies when filtering an agenda view with respect to the
: < or > effort operator.  Then, tasks with no effort defined will be treated
: as tasks with high effort.
: When nil, such items are sorted as 0 minutes effort.

** org-html-table-header-tags =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-header-tags
   :END:

- *Type:* (cons (string :tag "Opening ta...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-header-tags&sr=1][Find modifications in git logs]]

: The opening and ending tags for table header fields.
: This is customizable so that alignment options can be specified.
: The first %s will be filled with the scope of the field, either row or col.
: The second %s will be replaced by a style entry to align the field.
: See also the variable `org-html-table-use-header-tags-for-first-column'.
: See also the variable `org-html-table-align-individual-fields'.

** org-use-extra-keys =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-extra-keys
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-extra-keys&sr=1][Find modifications in git logs]]

: Non-nil means use extra key sequence definitions for certain commands.
: This happens automatically if `window-system' is nil.  This
: variable lets you do the same manually.  You must set it before
: loading Org.

** org-html-allow-name-attribute-in-anchors =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-allow-name-attribute-in-anchors
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-allow-name-attribute-in-anchors&sr=1][Find modifications in git logs]]

: When nil, do not set "name" attribute in anchors.
: By default, when appropriate, anchors are formatted with "id"
: but without "name" attribute.

** org-use-tag-inheritance =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-tag-inheritance
   :END:

- *Type:* (choice (const :tag "Not" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-tag-inheritance&sr=1][Find modifications in git logs]]

: Non-nil means tags in levels apply also for sublevels.
: When nil, only the tags directly given in a specific line apply there.
: This may also be a list of tags that should be inherited, or a regexp that
: matches tags that should be inherited.  Additional control is possible
: with the variable  `org-tags-exclude-from-inheritance' which gives an
: explicit list of tags to be excluded from inheritance, even if the value of
: `org-use-tag-inheritance' would select it for inheritance.
: 
: If this option is t, a match early-on in a tree can lead to a large
: number of matches in the subtree when constructing the agenda or creating
: a sparse tree.  If you only want to see the first match in a tree during
: a search, check out the variable `org-tags-match-list-sublevels'.

** org-html-doctype =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-doctype
   :END:

- *Type:* (choice (const "html4-strict")...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-doctype&sr=1][Find modifications in git logs]]

: Document type definition to use for exported HTML files.
: Can be set with the in-buffer HTML_DOCTYPE property or for
: publishing, with :html-doctype.

** org-agenda-todo-ignore-deadlines =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-ignore-deadlines
   :END:

- *Type:* (choice (const :tag "Ignore ne...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-ignore-deadlines&sr=1][Find modifications in git logs]]

: Non-nil means ignore some deadline TODO items when making TODO list.
: 
: There are different motivations for using different values, please think
: carefully when configuring this variable.
: 
: This applies when creating the global TODO list.
: 
: Valid values are:
: 
: near    Don't show near deadline entries.  A deadline is near when it is
:         closer than `org-deadline-warning-days' days.  The idea behind this
:         is that such items will appear in the agenda anyway.
: 
: far     Don't show TODO entries where a deadline has been defined, but
:         is not going to happen anytime soon.  This is useful if you want to use
:         the TODO list to figure out what to do now.
: 
: past    Don't show entries with a deadline timestamp for today or in the past.
: 
: future  Don't show entries with a deadline timestamp in the future, not even
:         when they become `near' ones.  Use it with caution.
: 
: all     Ignore all TODO entries that do have a deadline.
: 
: t       Same as `near', for backward compatibility.
: 
: This variable can also have an integer as a value.  See
: `org-agenda-todo-ignore-timestamp' for more details.
: 
: See also `org-agenda-todo-ignore-with-date'.
: See also the variable `org-agenda-tags-todo-honor-ignore-options' if you want
: to make his option also apply to the tags-todo list.

** org-latex-default-class =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-default-class
   :END:

- *Type:* (string :tag "LaTeX class")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-default-class&sr=1][Find modifications in git logs]]

: The default LaTeX class.

** org-crypt-key =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-crypt-key
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-crypt.el;hb=HEAD][org-crypt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-crypt-key&sr=1][Find modifications in git logs]]

: The default key to use when encrypting the contents of a heading.
: 
: This setting can also be overridden in the CRYPTKEY property.

** org-agenda-menu-show-matcher =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-menu-show-matcher
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-menu-show-matcher&sr=1][Find modifications in git logs]]

: Non-nil means show the match string in the agenda dispatcher menu.
: When nil, the matcher string is not shown, but is put into the help-echo
: property so than moving the mouse over the command shows it.
: Setting it to nil is good if matcher strings are very long and/or if
: you want to use two-columns display (see `org-agenda-menu-two-columns').

** org-cycle-level-faces =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-level-faces
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-level-faces&sr=1][Find modifications in git logs]]

: Non-nil means level styles cycle after level `org-n-level-faces'.
: Then so level org-n-level-faces+1 is styled like level 1.
: If nil, then all levels >=org-n-level-faces are styled like
: level org-n-level-faces

** org-html-with-latex =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-with-latex
   :END:

- *Type:* (choice (const :tag "Do not pr...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-with-latex&sr=1][Find modifications in git logs]]

: Non-nil means process LaTeX math snippets.
: 
: When set, the exporter will process LaTeX environments and
: fragments.
: 
: This option can also be set with the +OPTIONS line,
: e.g. "tex:mathjax".  Allowed values are:
: 
:   nil           Ignore math snippets.
:   `verbatim'    Keep everything in verbatim
:   `mathjax', t  Do MathJax preprocessing and arrange for MathJax.js to
:                 be loaded.
:   SYMBOL        Any symbol defined in `org-preview-latex-process-alist',
:                 e.g., `dvipng'.

** org-agenda-mouse-1-follows-link =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-mouse-1-follows-link
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-mouse-1-follows-link&sr=1][Find modifications in git logs]]

: Non-nil means mouse-1 on a link will follow the link in the agenda.
: A longer mouse click will still set point.  Needs to be set
: before org.el is loaded.

** org-babel-lua-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lua-command
   :END:

- *Type:* string
- *Since:* Emacs version 24.5
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lua.el;hb=HEAD][ob-lua.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lua-command&sr=1][Find modifications in git logs]]

: Name of the command for executing Lua code.

** org-ditaa-jar-option =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ditaa-jar-option
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-ditaa.el;hb=HEAD][ob-ditaa.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ditaa-jar-option&sr=1][Find modifications in git logs]]

: Option for the ditaa jar file.
: Do not leave leading or trailing spaces in this string.

** org-export-default-language =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-default-language
   :END:

- *Type:* (string :tag "Language")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-default-language&sr=1][Find modifications in git logs]]

: The default language for export and clocktable translations, as a string.
: This may have an association in
: `org-clock-clocktable-language-setup',
: `org-export-smart-quotes-alist' and `org-export-dictionary'.
: This option can also be set with the LANGUAGE keyword.

** org-publish-timestamp-directory =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-timestamp-directory
   :END:

- *Type:* directory
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-timestamp-directory&sr=1][Find modifications in git logs]]

: Name of directory in which to store publishing timestamps.

** org-agenda-scheduled-leaders =(quote ("Scheduled: " "Sched.%...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-scheduled-leaders
   :END:

- *Type:* (list (string :tag "Scheduled ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-scheduled-leaders&sr=1][Find modifications in git logs]]

: Text preceding scheduled items in the agenda view.
: This is a list with two strings.  The first applies when the item is
: scheduled on the current day.  The second applies when it has been scheduled
: previously, it may contain a %d indicating that this is the nth time that
: this item is scheduled, due to automatic rescheduling of unfinished items
: for the following day.  So this number is one larger than the number of days
: that passed since this item was scheduled first.

** org-export-with-tables =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-tables
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-tables&sr=1][Find modifications in git logs]]

: Non-nil means export tables.
: This option can also be set with the OPTIONS keyword,
: e.g. "|:nil".

** org-duration-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-duration-format
   :END:

- *Type:* (choice (const :tag "Use H:MM"...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-duration.el;hb=HEAD][org-duration.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-duration-format&sr=1][Find modifications in git logs]]

: Format definition for a duration.
: 
: The value can be set to, respectively, the symbols `h:mm:ss' or
: `h:mm', which means a duration is expressed as, respectively,
: a "H:MM:SS" or "H:MM" string.
: 
: Alternatively, the value can be a list of entries following the
: pattern:
: 
:   (UNIT . REQUIRED?)
: 
: UNIT is a unit string, as defined in `org-duration-units'.  The
: time duration is formatted using only the time components that
: are specified here.
: 
: Units with a zero value are skipped, unless REQUIRED? is non-nil.
: In that case, the unit is always used.
: 
: Eventually, the list can contain one of the following special
: entries:
: 
:   (special . h:mm)
:   (special . h:mm:ss)
: 
:     Units shorter than an hour are ignored.  The hours and
:     minutes part of the duration is expressed unconditionally
:     with H:MM, or H:MM:SS, pattern.
: 
:   (special . PRECISION)
: 
:     A duration is expressed with a single unit, PRECISION being
:     the number of decimal places to show.  The unit chosen is the
:     first one required or with a non-zero integer part.  If there
:     is no such unit, the smallest one is used.
: 
: For example,
: 
:    (("d" . nil) ("h" . t) ("min" . t))
: 
: means a duration longer than a day is expressed in days, hours
: and minutes, whereas a duration shorter than a day is always
: expressed in hours and minutes, even when shorter than an hour.
: 
: On the other hand, the value
: 
:   (("d" . nil) ("min" . nil))
: 
: means a duration longer than a day is expressed in days and
: minutes, whereas a duration shorter than a day is expressed
: entirely in minutes, even when longer than an hour.
: 
: The following format
: 
:   (("d" . nil) (special . h:mm))
: 
: means that any duration longer than a day is expressed with both
: a "d" unit and a "H:MM" part, whereas a duration shorter than
: a day is expressed only as a "H:MM" string.
: 
: Eventually,
: 
:   (("d" . nil) ("h" . nil) (special . 2))
: 
: expresses a duration longer than a day as a decimal number, with
: a 2-digits fractional part, of "d" unit.  A duration shorter
: than a day uses "h" unit instead.

** org-timer-default-timer =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-default-timer
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-default-timer&sr=1][Find modifications in git logs]]

: The default timer when a timer is set, in minutes or hh:mm:ss format.
: When 0, the user is prompted for a value.

** org-clock-persist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-persist
   :END:

- *Type:* (choice (const :tag "Just the ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-persist&sr=1][Find modifications in git logs]]

: When non-nil, save the running clock when Emacs is closed.
: The clock is resumed when Emacs restarts.
: When this is t, both the running clock, and the entire clock
: history are saved.  When this is the symbol `clock', only the
: running clock is saved.  When this is the symbol `history', only
: the clock history is saved.
: 
: When Emacs restarts with saved clock information, the file containing
: the running clock as well as all files mentioned in the clock history
: will be visited.
: 
: All this depends on running `org-clock-persistence-insinuate' in your
: Emacs initialization file.

** org-agenda-columns-compute-summary-properties =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-columns-compute-summary-properties
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-columns-compute-summary-properties&sr=1][Find modifications in git logs]]

: Non-nil means recompute all summary properties before column view.
: When column view in the agenda is listing properties that have a summary
: operator, it can go to all relevant buffers and recompute the summaries
: there.  This can mean overhead for the agenda column view, but is necessary
: to have thing up to date.
: As a special case, a CLOCKSUM property also makes sure that the clock
: computations are current.

** org-agenda-deadline-faces =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-deadline-faces
   :END:

- *Type:* (repeat (cons (number :tag "Fr...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-deadline-faces&sr=1][Find modifications in git logs]]

: Faces for showing deadlines in the agenda.
: This is a list of cons cells.  The cdr of each cell is a face to be used,
: and it can also just be like \='(:foreground "yellow").
: Each car is a fraction of the head-warning time that must have passed for
: this the face in the cdr to be used for display.  The numbers must be
: given in descending order.  The head-warning time is normally taken
: from `org-deadline-warning-days', but can also be specified in the deadline
: timestamp itself, like this:
: 
:    DEADLINE: <2007-08-13 Mon -8d>
: 
: You may use d for days, w for weeks, m for months and y for years.  Months
: and years will only be treated in an approximate fashion (30.4 days for a
: month and 365.24 days for a year).

** org-export-with-toc =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-toc
   :END:

- *Type:* (choice (const :tag "No Table ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-toc&sr=1][Find modifications in git logs]]

: Non-nil means create a table of contents in exported files.
: 
: The TOC contains headlines with levels up
: to`org-export-headline-levels'.  When an integer, include levels
: up to N in the toc, this may then be different from
: `org-export-headline-levels', but it will not be allowed to be
: larger than the number of headline levels.  When nil, no table of
: contents is made.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "toc:nil" or "toc:3".

** org-cycle-emulate-tab =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-emulate-tab
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-emulate-tab&sr=1][Find modifications in git logs]]

: Where should `org-cycle' emulate TAB.
: nil         Never
: white       Only in completely white lines
: whitestart  Only at the beginning of lines, before the first non-white char
: t           Everywhere except in headlines
: exc-hl-bol  Everywhere except at the start of a headline
: If TAB is used in a place where it does not emulate TAB, the current subtree
: visibility is cycled.

** org-remove-highlights-with-change =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-remove-highlights-with-change
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-remove-highlights-with-change&sr=1][Find modifications in git logs]]

: Non-nil means any change to the buffer will remove temporary highlights.
: \<org-mode-map>Such highlights are created by `org-occur' and `org-clock-display'.
: When nil, `\[org-ctrl-c-ctrl-c]' needs to be used to get rid of the highlights.
: The highlights created by `org-toggle-latex-fragment' always need
: `\[org-toggle-latex-fragment]' to be removed.

** org-adapt-indentation =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-adapt-indentation
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-adapt-indentation&sr=1][Find modifications in git logs]]

: Non-nil means adapt indentation to outline node level.
: 
: When this variable is set, Org assumes that you write outlines by
: indenting text in each node to align with the headline (after the
: stars).  The following issues are influenced by this variable:
: 
: - The indentation is increased by one space in a demotion
:   command, and decreased by one in a promotion command.  However,
:   in the latter case, if shifting some line in the entry body
:   would alter document structure (e.g., insert a new headline),
:   indentation is not changed at all.
: 
: - Property drawers and planning information is inserted indented
:   when this variable is set.  When nil, they will not be indented.
: 
: - TAB indents a line relative to current level.  The lines below
:   a headline will be indented when this variable is set.
: 
: Note that this is all about true indentation, by adding and
: removing space characters.  See also `org-indent.el' which does
: level-dependent indentation in a virtual way, i.e. at display
: time in Emacs.

** org-list-radio-list-templates =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-radio-list-templates
   :END:

- *Type:* (repeat (list (symbol :tag "Ma...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-radio-list-templates&sr=1][Find modifications in git logs]]

: Templates for radio lists in different major modes.
: All occurrences of %n in a template will be replaced with the name of the
: list, obtained by prompting the user.

** org-koma-letter-use-foldmarks =t=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-use-foldmarks
   :END:

- *Type:* (choice (const :tag "Activate ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-use-foldmarks&sr=1][Find modifications in git logs]]

: Configure appearance of folding marks.
: 
: When t, activate default folding marks.  When nil, do not insert
: folding marks at all.  It can also be a list of symbols among the
: following ones:
: 
:   `B'  Activate upper horizontal mark on left paper edge
:   `b'  Deactivate upper horizontal mark on left paper edge
: 
:   `H'  Activate all horizontal marks on left paper edge
:   `h'  Deactivate all horizontal marks on left paper edge
: 
:   `L'  Activate left vertical mark on upper paper edge
:   `l'  Deactivate left vertical mark on upper paper edge
: 
:   `M'  Activate middle horizontal mark on left paper edge
:   `m'  Deactivate middle horizontal mark on left paper edge
: 
:   `P'  Activate punch or center mark on left paper edge
:   `p'  Deactivate punch or center mark on left paper edge
: 
:   `T'  Activate lower horizontal mark on left paper edge
:   `t'  Deactivate lower horizontal mark on left paper edge
: 
:   `V'  Activate all vertical marks on upper paper edge
:   `v'  Deactivate all vertical marks on upper paper edge
: 
: This option can also be set with the OPTIONS keyword, e.g.:
: "foldmarks:(b l m t)".

** org-odt-table-styles =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-table-styles
   :END:

- *Type:* (choice (const :tag "None" nil...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-table-styles&sr=1][Find modifications in git logs]]

: Specify how Table Styles should be derived from a Table Template.
: This is a list where each element is of the
: form (TABLE-STYLE-NAME TABLE-TEMPLATE-NAME TABLE-CELL-OPTIONS).
: 
: TABLE-STYLE-NAME is the style associated with the table through
: "#+ATTR_ODT: :style TABLE-STYLE-NAME" line.
: 
: TABLE-TEMPLATE-NAME is a set of - upto 9 - automatic
: TABLE-CELL-STYLE-NAMEs and PARAGRAPH-STYLE-NAMEs (as defined
: below) that is included in `org-odt-content-template-file'.
: 
: TABLE-CELL-STYLE-NAME := TABLE-TEMPLATE-NAME + TABLE-CELL-TYPE +
:                          "TableCell"
: PARAGRAPH-STYLE-NAME  := TABLE-TEMPLATE-NAME + TABLE-CELL-TYPE +
:                          "TableParagraph"
: TABLE-CELL-TYPE       := "FirstRow"   | "LastColumn" |
:                          "FirstRow"   | "LastRow"    |
:                          "EvenRow"    | "OddRow"     |
:                          "EvenColumn" | "OddColumn"  | ""
: where "+" above denotes string concatenation.
: 
: TABLE-CELL-OPTIONS is an alist where each element is of the
: form (TABLE-CELL-STYLE-SELECTOR . ON-OR-OFF).
: TABLE-CELL-STYLE-SELECTOR := `use-first-row-styles'       |
:                              `use-last-row-styles'        |
:                              `use-first-column-styles'    |
:                              `use-last-column-styles'     |
:                              `use-banding-rows-styles'    |
:                              `use-banding-columns-styles' |
:                              `use-first-row-styles'
: ON-OR-OFF                 := t | nil
: 
: For example, with the following configuration
: 
: (setq org-odt-table-styles
:       \='(("TableWithHeaderRowsAndColumns" "Custom"
:          ((use-first-row-styles . t)
:           (use-first-column-styles . t)))
:         ("TableWithHeaderColumns" "Custom"
:          ((use-first-column-styles . t)))))
: 
: 1. A table associated with "TableWithHeaderRowsAndColumns"
:    style will use the following table-cell styles -
:    "CustomFirstRowTableCell", "CustomFirstColumnTableCell",
:    "CustomTableCell" and the following paragraph styles
:    "CustomFirstRowTableParagraph",
:    "CustomFirstColumnTableParagraph", "CustomTableParagraph"
:    as appropriate.
: 
: 2. A table associated with "TableWithHeaderColumns" style will
:    use the following table-cell styles -
:    "CustomFirstColumnTableCell", "CustomTableCell" and the
:    following paragraph styles
:    "CustomFirstColumnTableParagraph", "CustomTableParagraph"
:    as appropriate..
: 
: Note that TABLE-TEMPLATE-NAME corresponds to the
: "<table:table-template>" elements contained within
: "<office:styles>".  The entries (TABLE-STYLE-NAME
: TABLE-TEMPLATE-NAME TABLE-CELL-OPTIONS) correspond to
: "table:template-name" and "table:use-first-row-styles" etc
: attributes of "<table:table>" element.  Refer ODF-1.2
: specification for more information.  Also consult the
: implementation filed under `org-odt-get-table-cell-styles'.
: 
: The TABLE-STYLE-NAME "OrgEquation" is used internally for
: formatting of numbered display equations.  Do not delete this
: style from the list.

** org-export-date-timestamp-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-date-timestamp-format
   :END:

- *Type:* (choice (string :tag "Time-sta...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-date-timestamp-format&sr=1][Find modifications in git logs]]

: Time-stamp format string to use for DATE keyword.
: 
: The format string, when specified, only applies if date consists
: in a single time-stamp.  Otherwise its value will be ignored.
: 
: See `format-time-string' for details on how to build this
: string.

** org-agenda-hide-tags-regexp =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-hide-tags-regexp
   :END:

- *Type:* (choice (const :tag "Hide none...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-hide-tags-regexp&sr=1][Find modifications in git logs]]

: Regular expression used to filter away specific tags in agenda views.
: This means that these tags will be present, but not be shown in the agenda
: line.  Secondary filtering will still work on the hidden tags.
: Nil means don't hide any tags.

** org-table-tab-recognizes-table.el =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-tab-recognizes-table.el
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-tab-recognizes-table.el&sr=1][Find modifications in git logs]]

: Non-nil means TAB will automatically notice a table.el table.
: When it sees such a table, it moves point into it and - if necessary -
: calls `table-recognize-table'.

** org-preview-latex-image-directory =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-preview-latex-image-directory
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-preview-latex-image-directory&sr=1][Find modifications in git logs]]

: Path to store latex preview images.
: A relative path here creates many directories relative to the
: processed org files paths.  An absolute path puts all preview
: images at the same place.

** org-latex-subtitle-separate =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-subtitle-separate
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-subtitle-separate&sr=1][Find modifications in git logs]]

: Non-nil means the subtitle is not typeset as part of title.

** org-attach-file-list-property =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-file-list-property
   :END:

- *Type:* (choice (const :tag "None" nil...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-file-list-property&sr=1][Find modifications in git logs]]

: The property used to keep a list of attachment belonging to this entry.
: This is not really needed, so you may set this to nil if you don't want it.
: Also, for entries where children inherit the directory, the list of
: attachments is not kept in this property.

** org-agenda-skip-deadline-prewarning-if-scheduled =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-deadline-prewarning-if-scheduled
   :END:

- *Type:* (choice (const :tag "Always sh...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-deadline-prewarning-if-scheduled&sr=1][Find modifications in git logs]]

: Non-nil means skip deadline prewarning when entry is also scheduled.
: This will apply on all days where a prewarning for the deadline would
: be shown, but not at the day when the entry is actually due.  On that day,
: the deadline will be shown anyway.
: This variable may be set to nil, t, the symbol `pre-scheduled',
: or a number which will then give the number of days before the actual
: deadline when the prewarnings should resume.  The symbol `pre-scheduled'
: eliminates the deadline prewarning only prior to the scheduled date.
: This can be used in a workflow where the first showing of the deadline will
: trigger you to schedule it, and then you don't want to be reminded of it
: because you will take care of it on the day when scheduled.

** org-closed-keep-when-no-todo =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-closed-keep-when-no-todo
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-closed-keep-when-no-todo&sr=1][Find modifications in git logs]]

: Remove CLOSED: time-stamp when switching back to a non-todo state?

** org-babel-uppercase-example-markers =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-uppercase-example-markers
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-uppercase-example-markers&sr=1][Find modifications in git logs]]

: When non-nil, begin/end example markers will be inserted in upper case.

** org-texinfo-active-timestamp-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-active-timestamp-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-active-timestamp-format&sr=1][Find modifications in git logs]]

: A printf format string to be applied to active timestamps.

** org-refile-targets =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-refile-targets
   :END:

- *Type:* (repeat (cons (choice :value o...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile-targets&sr=1][Find modifications in git logs]]

: Targets for refiling entries with `\[org-refile]'.
: This is a list of cons cells.  Each cell contains:
: - a specification of the files to be considered, either a list of files,
:   or a symbol whose function or variable value will be used to retrieve
:   a file name or a list of file names.  If you use `org-agenda-files' for
:   that, all agenda files will be scanned for targets.  Nil means consider
:   headings in the current buffer.
: - A specification of how to find candidate refile targets.  This may be
:   any of:
:   - a cons cell (:tag . "TAG") to identify refile targets by a tag.
:     This tag has to be present in all target headlines, inheritance will
:     not be considered.
:   - a cons cell (:todo . "KEYWORD") to identify refile targets by
:     todo keyword.
:   - a cons cell (:regexp . "REGEXP") with a regular expression matching
:     headlines that are refiling targets.
:   - a cons cell (:level . N).  Any headline of level N is considered a target.
:     Note that, when `org-odd-levels-only' is set, level corresponds to
:     order in hierarchy, not to the number of stars.
:   - a cons cell (:maxlevel . N).  Any headline with level <= N is a target.
:     Note that, when `org-odd-levels-only' is set, level corresponds to
:     order in hierarchy, not to the number of stars.
: 
: Each element of this list generates a set of possible targets.
: The union of these sets is presented (with completion) to
: the user by `org-refile'.
: 
: You can set the variable `org-refile-target-verify-function' to a function
: to verify each headline found by the simple criteria above.
: 
: When this variable is nil, all top-level headlines in the current buffer
: are used, equivalent to the value `((nil . (:level . 1))'.

** org-html-preamble =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-preamble
   :END:

- *Type:* (choice (const :tag "No preamb...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-preamble&sr=1][Find modifications in git logs]]

: Non-nil means insert a preamble in HTML export.
: 
: When t, insert a string as defined by the formatting string in
: `org-html-preamble-format'.  When set to a string, use this
: formatting string instead (see `org-html-postamble-format' for an
: example of such a formatting string).
: 
: When set to a function, apply this function and insert the
: returned string.  The function takes the property list of export
: options as its only argument.
: 
: Setting :html-preamble in publishing projects will take
: precedence over this variable.

** org-babel-noweb-wrap-start =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-noweb-wrap-start
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-noweb-wrap-start&sr=1][Find modifications in git logs]]

: String used to begin a noweb reference in a code block.
: See also `org-babel-noweb-wrap-end'.

** org-mark-ring-length =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-mark-ring-length
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mark-ring-length&sr=1][Find modifications in git logs]]

: Number of different positions to be recorded in the ring.
: Changing this requires a restart of Emacs to work correctly.

** org-startup-folded =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-startup-folded
   :END:

- *Type:* (choice (const :tag "nofold: s...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-startup-folded&sr=1][Find modifications in git logs]]

: Non-nil means entering Org mode will switch to OVERVIEW.
: 
: This can also be configured on a per-file basis by adding one of
: the following lines anywhere in the buffer:
: 
:    #+STARTUP: fold              (or `overview', this is equivalent)
:    #+STARTUP: nofold            (or `showall', this is equivalent)
:    #+STARTUP: content
:    #+STARTUP: showeverything
: 
: Set `org-agenda-inhibit-startup' to a non-nil value if you want
: to ignore this option when Org opens agenda files for the first
: time.

** org-md-headline-style =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-md-headline-style
   :END:

- *Type:* (choice (const :tag "Use \"atx...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-md.el;hb=HEAD][ox-md.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-md-headline-style&sr=1][Find modifications in git logs]]

: Style used to format headlines.
: This variable can be set to either `atx' or `setext'.

** org-export-allow-bind-keywords =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-allow-bind-keywords
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-allow-bind-keywords&sr=1][Find modifications in git logs]]

: Non-nil means BIND keywords can define local variable values.
: This is a potential security risk, which is why the default value
: is nil.  You can also allow them through local buffer variables.

** org-highlight-latex-and-related =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-highlight-latex-and-related
   :END:

- *Type:* (choice (const :tag "No highli...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-highlight-latex-and-related&sr=1][Find modifications in git logs]]

: Non-nil means highlight LaTeX related syntax in the buffer.
: When non nil, the value should be a list containing any of the
: following symbols:
:   `latex'    Highlight LaTeX snippets and environments.
:   `script'   Highlight subscript and superscript.
:   `entities' Highlight entities.

** org-texinfo-table-default-markup =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-table-default-markup
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-table-default-markup&sr=1][Find modifications in git logs]]

: Default markup for first column in two-column tables.
: 
: This should an indicating command, e.g., "@code", "@kbd" or
: "@samp".
: 
: It can be overridden locally using the ":indic" attribute.

** org-mobile-use-encryption =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-use-encryption
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-use-encryption&sr=1][Find modifications in git logs]]

: Non-nil means keep only encrypted files on the WebDAV server.
: Encryption uses AES-256, with a password given in
: `org-mobile-encryption-password'.
: When nil, plain files are kept on the server.
: Turning on encryption requires setting the same password in the MobileOrg
: application.  Before turning this on, check of MobileOrg does already
: support it - at the time of this writing it did not yet.

** org-export-with-timestamps =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-timestamps
   :END:

- *Type:* (choice (const :tag "All times...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-timestamps&sr=1][Find modifications in git logs]]

: Non nil means allow timestamps in export.
: 
: It can be set to any of the following values:
:   t          export all timestamps.
:   `active'   export active timestamps only.
:   `inactive' export inactive timestamps only.
:   nil        do not export timestamps
: 
: This only applies to timestamps isolated in a paragraph
: containing only timestamps.  Other timestamps are always
: exported.
: 
: This option can also be set with the OPTIONS keyword, e.g.
: "<:nil".

** org-export-time-stamp-file =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-time-stamp-file
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-time-stamp-file&sr=1][Find modifications in git logs]]

: Non-nil means insert a time stamp into the exported file.
: The time stamp shows when the file was created.  This option can
: also be set with the OPTIONS keyword, e.g. "timestamp:nil".

** org-auto-align-tags =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-auto-align-tags
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-auto-align-tags&sr=1][Find modifications in git logs]]

: Non-nil keeps tags aligned when modifying headlines.
: Some operations (i.e. demoting) change the length of a headline and
: therefore shift the tags around.  With this option turned on, after
: each such operation the tags are again aligned to `org-tags-column'.

** org-koma-letter-use-email =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-use-email
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-use-email&sr=1][Find modifications in git logs]]

: Non-nil prints sender's email address.
: This option can also be set with the OPTIONS keyword, e.g.:
: "email:t".

** org-bibtex-no-export-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-no-export-tags
   :END:

- *Type:* (repeat :tag "Tag" (string))
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-no-export-tags&sr=1][Find modifications in git logs]]

: List of tag(s) that should not be converted to keywords.
: This variable is relevant only if `org-bibtex-tags-are-keywords'
: is non-nil.

** org-tag-persistent-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-tag-persistent-alist
   :END:

- *Type:* (repeat (choice (cons (string ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tag-persistent-alist&sr=1][Find modifications in git logs]]

: Tags always available in Org files.
: 
: The value of this variable is an alist.  Associations either:
: 
:   (TAG)
:   (TAG . SELECT)
:   (SPECIAL)
: 
: where TAG is a tag as a string, SELECT is a character, used to
: select that tag through the fast tag selection interface, and
: SPECIAL is one of the following keywords: `:startgroup',
: `:startgrouptag', `:grouptags', `:engroup', `:endgrouptag' or
: `:newline'.  These keywords are used to define a hierarchy of
: tags.  See manual for details.
: 
: Unlike to `org-tag-alist', tags defined in this variable do not
: depend on a local TAGS keyword.  Instead, to disable these tags
: on a per-file basis, insert anywhere in the file:
: 
:   #+STARTUP: noptag

** org-datetree-add-timestamp =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-datetree-add-timestamp
   :END:

- *Type:* (choice (const :tag "Do not ad...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-datetree.el;hb=HEAD][org-datetree.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-datetree-add-timestamp&sr=1][Find modifications in git logs]]

: When non-nil, add a time stamp matching date of entry.
: Added time stamp is active unless value is `inactive'.

** org-babel-python-None-to =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-python-None-to
   :END:

- *Type:* symbol
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-python.el;hb=HEAD][ob-python.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-python-None-to&sr=1][Find modifications in git logs]]

: Replace `None' in python tables with this before returning.

** org-latex-minted-options =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-minted-options
   :END:

- *Type:* (repeat (list (string :tag "Mi...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-minted-options&sr=1][Find modifications in git logs]]

: Association list of options for the latex minted package.
: 
: These options are supplied within square brackets in
: \begin{minted} environments.  Each element of the alist should
: be a list containing two strings: the name of the option, and the
: value.  For example,
: 
:   (setq org-latex-minted-options
:     \='(("bgcolor" "bg") ("frame" "lines")))
: 
: will result in src blocks being exported with
: 
: \begin{minted}[bgcolor=bg,frame=lines]{<LANG>}
: 
: as the start of the minted environment. Note that the same
: options will be applied to blocks of all languages.  If you need
: block-specific options, you may use the following syntax:
: 
:   #+ATTR_LATEX: :options key1=value1,key2=value2
:   #+BEGIN_SRC <LANG>
:   ...
:   #+END_SRC

** org-html-validation-link =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-validation-link
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-validation-link&sr=1][Find modifications in git logs]]

: Link to HTML validation service.

** org-agenda-time-leading-zero =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-time-leading-zero
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-time-leading-zero&sr=1][Find modifications in git logs]]

: Non-nil means use leading zero for military times in agenda.
: For example, 9:30am would become 09:30 rather than  9:30.

** org-odt-inline-image-rules =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-inline-image-rules
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-inline-image-rules&sr=1][Find modifications in git logs]]

: Rules characterizing image files that can be inlined into ODT.
: 
: A rule consists in an association whose key is the type of link
: to consider, and value is a regexp that will be matched against
: link's path.

** org-latex-format-inlinetask-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-format-inlinetask-function
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-format-inlinetask-function&sr=1][Find modifications in git logs]]

: Function called to format an inlinetask in LaTeX code.
: 
: The function must accept seven parameters:
:   TODO      the todo keyword (string or nil)
:   TODO-TYPE the todo type (symbol: `todo', `done', nil)
:   PRIORITY  the inlinetask priority (integer or nil)
:   NAME      the inlinetask name (string)
:   TAGS      the inlinetask tags (list of strings or nil)
:   CONTENTS  the contents of the inlinetask (string or nil)
:   INFO      the export options (plist)
: 
: The function should return the string to be exported.

** org-icalendar-alarm-time =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-alarm-time
   :END:

- *Type:* integer
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-alarm-time&sr=1][Find modifications in git logs]]

: Number of minutes for triggering an alarm for exported timed events.
: 
: A zero value (the default) turns off the definition of an alarm trigger
: for timed events.  If non-zero, alarms are created.
: 
: - a single alarm per entry is defined
: - The alarm will go off N minutes before the event
: - only a DISPLAY action is defined.

** org-icalendar-include-body =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-include-body
   :END:

- *Type:* (choice (const :tag "Nothing" ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-include-body&sr=1][Find modifications in git logs]]

: Amount of text below headline to be included in iCalendar export.
: This is a number of characters that should maximally be included.
: Properties, scheduling and clocking lines will always be removed.
: The text will be inserted into the DESCRIPTION field.

** org-latex-listings-options =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-listings-options
   :END:

- *Type:* (repeat (list (string :tag "Li...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-listings-options&sr=1][Find modifications in git logs]]

: Association list of options for the latex listings package.
: 
: These options are supplied as a comma-separated list to the
: \lstset command.  Each element of the association list should be
: a list containing two strings: the name of the option, and the
: value.  For example,
: 
:   (setq org-latex-listings-options
:     \='(("basicstyle" "\\small")
:       ("keywordstyle" "\\color{black}\\bfseries\\underbar")))
: 
: will typeset the code in a small size font with underlined, bold
: black keywords.
: 
: Note that the same options will be applied to blocks of all
: languages.  If you need block-specific options, you may use the
: following syntax:
: 
:   #+ATTR_LATEX: :options key1=value1,key2=value2
:   #+BEGIN_SRC <LANG>
:   ...
:   #+END_SRC

** org-bibtex-headline-format-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-headline-format-function
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-headline-format-function&sr=1][Find modifications in git logs]]

: Function returning the headline text for `org-bibtex-write'.
: It should take a single argument, the bibtex entry (an alist as
: returned by `org-bibtex-read').  The default value simply returns
: the entry title.

** org-confirm-shell-link-function =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-confirm-shell-link-function
   :END:

- *Type:* (choice (const :tag "with yes-...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-confirm-shell-link-function&sr=1][Find modifications in git logs]]

: Non-nil means ask for confirmation before executing shell links.
: Shell links can be dangerous: just think about a link
: 
:      [[shell:rm -rf ~/*][Google Search]]
: 
: This link would show up in your Org document as "Google Search",
: but really it would remove your entire home directory.
: Therefore we advise against setting this variable to nil.
: Just change it to `y-or-n-p' if you want to confirm with a
: single keystroke rather than having to type "yes".

** org-texinfo-diary-timestamp-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-diary-timestamp-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-diary-timestamp-format&sr=1][Find modifications in git logs]]

: A printf format string to be applied to diary timestamps.

** org-list-allow-alphabetical =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-allow-alphabetical
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-allow-alphabetical&sr=1][Find modifications in git logs]]

: Non-nil means single character alphabetical bullets are allowed.
: 
: Both uppercase and lowercase are handled.  Lists with more than
: 26 items will fallback to standard numbering.  Alphabetical
: counters like "[@c]" will be recognized.
: 
: This variable needs to be set before org.el is loaded.  If you
: need to make a change while Emacs is running, use the customize
: interface or run the following code after updating it:
: 
:   `\[org-element-update-syntax]'

** org-crypt-disable-auto-save =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-crypt-disable-auto-save
   :END:

- *Type:* (choice (const :tag "Always" t...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-crypt.el;hb=HEAD][org-crypt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-crypt-disable-auto-save&sr=1][Find modifications in git logs]]

: What org-decrypt should do if `auto-save-mode' is enabled.
: 
: t        : Disable auto-save-mode for the current buffer
:            prior to decrypting an entry.
: 
: nil      : Leave auto-save-mode enabled.
:            This may cause data to be written to disk unencrypted!
: 
: `ask'    : Ask user whether or not to disable auto-save-mode
:            for the current buffer.
: 
: `encrypt': Leave auto-save-mode enabled for the current buffer,
:            but automatically re-encrypt all decrypted entries
:            *before* auto-saving.
:            NOTE: This only works for entries which have a tag
:            that matches `org-crypt-tag-matcher'.

** org-id-prefix =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-prefix
   :END:

- *Type:* (choice (const :tag "No prefix...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-prefix&sr=1][Find modifications in git logs]]

: The prefix for IDs.
: 
: This may be a string, or it can be nil to indicate that no prefix is required.
: When a string, the string should have no space characters as IDs are expected
: to have no space characters in them.

** org-tag-faces =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-tag-faces
   :END:

- *Type:* (repeat (cons (string :tag "Ta...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tag-faces&sr=1][Find modifications in git logs]]

: Faces for specific tags.
: This is a list of cons cells, with tags in the car and faces in the cdr.
: The face can be a symbol, a foreground color (in which case the rest is
: inherited from the `org-tag' face) or a property list of attributes,
: like (:foreground "blue" :weight bold :underline t).
: If you set this variable through customize, it will immediately be effective
: in new buffers and in modified lines.
: If you set it with Lisp, a restart of Emacs is required to activate the
: changes.

** org-icalendar-categories =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-categories
   :END:

- *Type:* (repeat (choice (const :tag "T...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-categories&sr=1][Find modifications in git logs]]

: Items that should be entered into the "categories" field.
: 
: This is a list of symbols, the following are valid:
: `category'    The Org mode category of the current file or tree
: `todo-state'  The todo state, if any
: `local-tags'  The tags, defined in the current line
: `all-tags'    All tags, including inherited ones.

** org-mobile-agendas =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-agendas
   :END:

- *Type:* (choice (const :tag "Default A...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-agendas&sr=1][Find modifications in git logs]]

: The agendas that should be pushed to MobileOrg.
: Allowed values:
: 
: default  the weekly agenda and the global TODO list
: custom   all custom agendas defined by the user
: all      the custom agendas and the default ones
: list     a list of selection key(s) as string.

** org-track-ordered-property-with-tag =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-track-ordered-property-with-tag
   :END:

- *Type:* (choice (const :tag "No tracki...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-track-ordered-property-with-tag&sr=1][Find modifications in git logs]]

: Should the ORDERED property also be shown as a tag?
: The ORDERED property decides if an entry should require subtasks to be
: completed in sequence.  Since a property is not very visible, setting
: this option means that toggling the ORDERED property with the command
: `org-toggle-ordered-property' will also toggle a tag ORDERED.  That tag is
: not relevant for the behavior, but it makes things more visible.
: 
: Note that toggling the tag with tags commands will not change the property
: and therefore not influence behavior!
: 
: This can be t, meaning the tag ORDERED should be used,  It can also be a
: string to select a different tag for this task.

** org-habit-graph-column =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-graph-column
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-graph-column&sr=1][Find modifications in git logs]]

: The absolute column at which to insert habit consistency graphs.
: Note that consistency graphs will overwrite anything else in the buffer.

** org-odt-preferred-output-format =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-preferred-output-format
   :END:

- *Type:* (choice :convert-widget (lambd...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-preferred-output-format&sr=1][Find modifications in git logs]]

: Automatically post-process to this format after exporting to "odt".
: Command `org-odt-export-to-odt' exports first to "odt" format
: and then uses `org-odt-convert-process' to convert the
: resulting document to this format.  During customization of this
: variable, the list of valid values are populated based on
: `org-odt-convert-capabilities'.
: 
: You can set this option on per-file basis using file local
: values.  See Info node `(emacs) File Variables'.

** org-list-indent-offset =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-indent-offset
   :END:

- *Type:* integer
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-indent-offset&sr=1][Find modifications in git logs]]

: Additional indentation for sub-items in a list.
: By setting this to a small number, usually 1 or 2, one can more
: clearly distinguish sub-items in a list.

** org-support-shift-select =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-support-shift-select
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-support-shift-select&sr=1][Find modifications in git logs]]

: Non-nil means make shift-cursor commands select text when possible.
: \<org-mode-map>
: In Emacs 23, when `shift-select-mode' is on, shifted cursor keys
: start selecting a region, or enlarge regions started in this way.
: In Org mode, in special contexts, these same keys are used for
: other purposes, important enough to compete with shift selection.
: Org tries to balance these needs by supporting `shift-select-mode'
: outside these special contexts, under control of this variable.
: 
: The default of this variable is nil, to avoid confusing behavior.  Shifted
: cursor keys will then execute Org commands in the following contexts:
: - on a headline, changing TODO state (left/right) and priority (up/down)
: - on a time stamp, changing the time
: - in a plain list item, changing the bullet type
: - in a property definition line, switching between allowed values
: - in the BEGIN line of a clock table (changing the time block).
: Outside these contexts, the commands will throw an error.
: 
: When this variable is t and the cursor is not in a special
: context, Org mode will support shift-selection for making and
: enlarging regions.  To make this more effective, the bullet
: cycling will no longer happen anywhere in an item line, but only
: if the cursor is exactly on the bullet.
: 
: If you set this variable to the symbol `always', then the keys
: will not be special in headlines, property lines, and item lines,
: to make shift selection work there as well.  If this is what you
: want, you can use the following alternative commands:
: `\[org-todo]' and `\[org-priority]' to change TODO state and priority,
: `\[universal-argument] \[universal-argument] \[org-todo]' can be used to switch TODO sets,
: `\[org-ctrl-c-minus]' to cycle item bullet types,
: and properties can be edited by hand or in column view.
: 
: However, when the cursor is on a timestamp, shift-cursor commands
: will still edit the time stamp - this is just too good to give up.

** org-ascii-verbatim-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-verbatim-format
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-verbatim-format&sr=1][Find modifications in git logs]]

: Format string used for verbatim text and inline code.

** org-agenda-start-with-entry-text-mode =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-start-with-entry-text-mode
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-start-with-entry-text-mode&sr=1][Find modifications in git logs]]

: The initial value of entry-text-mode in a newly created agenda window.

** org-mobile-index-file =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-index-file
   :END:

- *Type:* file
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-index-file&sr=1][Find modifications in git logs]]

: The index file with links to all Org files that should be loaded by MobileOrg.
: Relative to `org-mobile-directory'.  The Address field in the MobileOrg setup
: should point to this file.

** org-clock-clocktable-language-setup =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-clocktable-language-setup
   :END:

- *Type:* alist
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-clocktable-language-setup&sr=1][Find modifications in git logs]]

: Terms used in clocktable, translated to different languages.

** org-treat-S-cursor-todo-selection-as-state-change =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-treat-S-cursor-todo-selection-as-state-change
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-treat-S-cursor-todo-selection-as-state-change&sr=1][Find modifications in git logs]]

: Non-nil means switching TODO states with S-cursor counts as state change.
: This is the default behavior.  However, setting this to nil allows a
: convenient way to select a TODO state and bypass any logging associated
: with that.

** org-html-link-org-files-as-html =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-link-org-files-as-html
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-link-org-files-as-html&sr=1][Find modifications in git logs]]

: Non-nil means make file links to `file.org' point to `file.html'.
: When `org-mode' is exporting an `org-mode' file to HTML, links to
: non-html files are directly put into a href tag in HTML.
: However, links to other Org files (recognized by the extension
: ".org") should become links to the corresponding HTML
: file, assuming that the linked `org-mode' file will also be
: converted to HTML.
: When nil, the links still point to the plain ".org" file.

** org-bbdb-anniversary-field =(funcall (function (closure (d...=
   :PROPERTIES:
   :CUSTOM_ID: org-bbdb-anniversary-field
   :END:

- *Type:* symbol
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bbdb.el;hb=HEAD][org-bbdb.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bbdb-anniversary-field&sr=1][Find modifications in git logs]]

: The BBDB field which contains anniversaries.
: The anniversaries are stored in the following format
: 
: YYYY-MM-DD Class-or-Format-String
: 
: where class is one of the customized classes for anniversaries;
: birthday and wedding are predefined.  Format-String can take three
: substitutions 1) the name of the record containing this
: anniversary, 2) the number of years, and 3) an ordinal suffix for
: the year.
: 
: Multiple anniversaries can be separated by \n.

** org-agenda-bulk-mark-char =">"=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-bulk-mark-char
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-bulk-mark-char&sr=1][Find modifications in git logs]]

: A single-character string to be used as the bulk mark.

** org-koma-letter-subject-format =t=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-subject-format
   :END:

- *Type:* (choice (const :tag "No export...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-subject-format&sr=1][Find modifications in git logs]]

: Non-nil means include the subject.
: 
: Support formatting options.
: 
: When t, insert a subject using default options.  When nil, do not
: insert a subject at all.  It can also be a list of symbols among
: the following ones:
: 
:  `afteropening'  Subject after opening
:  `beforeopening' Subject before opening
:  `centered'      Subject centered
:  `left'          Subject left-justified
:  `right'         Subject right-justified
:  `titled'        Add title/description to subject
:  `underlined'    Set subject underlined
:  `untitled'      Do not add title/description to subject
: 
: Please refer to the KOMA-script manual (Table 4.16. in the
: English manual of 2012-07-22).
: 
: This option can also be set with the OPTIONS keyword, e.g.:
: "subject:(underlined centered)".

** org-list-description-max-indent =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-description-max-indent
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-description-max-indent&sr=1][Find modifications in git logs]]

: Maximum indentation for the second line of a description list.
: When the indentation would be larger than this, it will become
: 5 characters instead.

** org-html-postamble-format =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-postamble-format
   :END:

- *Type:* (repeat (list (string :tag "La...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-postamble-format&sr=1][Find modifications in git logs]]

: Alist of languages and format strings for the HTML postamble.
: 
: The first element of each list is the language code, as used for
: the LANGUAGE keyword.  See `org-export-default-language'.
: 
: The second element of each list is a format string to format the
: postamble itself.  This format string can contain these elements:
: 
:   %t stands for the title.
:   %s stands for the subtitle.
:   %a stands for the author's name.
:   %e stands for the author's email.
:   %d stands for the date.
:   %c will be replaced by `org-html-creator-string'.
:   %v will be replaced by `org-html-validation-link'.
:   %T will be replaced by the export time.
:   %C will be replaced by the last modification time.
: 
: If you need to use a "%" character, you need to escape it
: like that: "%%".

** org-agenda-ignore-properties =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-ignore-properties
   :END:

- *Type:* (set :greedy t (const effort) ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-ignore-properties&sr=1][Find modifications in git logs]]

: Avoid updating text properties when building the agenda.
: Properties are used to prepare buffers for effort estimates,
: appointments, statistics and subtree-local categories.
: If you don't use these in the agenda, you can add them to this
: list and agenda building will be a bit faster.
: The value is a list, with zero or more of the symbols `effort', `appt',
: `stats' or `category'.

** org-babel-hash-show-time =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-hash-show-time
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-hash-show-time&sr=1][Find modifications in git logs]]

: Non-nil means show the time the code block was evaluated in the result hash.

** org-agenda-max-tags =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-max-tags
   :END:

- *Type:* (choice (symbol :tag "No limit...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-max-tags&sr=1][Find modifications in git logs]]

: Maximum number of tagged entries to display in an agenda.
: This can be nil (no limit) or an integer or an alist of agenda
: types with an associated number of entries to display in this
: type.

** org-export-with-drawers =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-drawers
   :END:

- *Type:* (choice (const :tag "All drawe...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-drawers&sr=1][Find modifications in git logs]]

: Non-nil means export contents of standard drawers.
: 
: When t, all drawers are exported.  This may also be a list of
: drawer names to export, as strings.  If that list starts with
: `not', only drawers with such names will be ignored.
: 
: This variable doesn't apply to properties drawers.  See
: `org-export-with-properties' instead.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "d:nil".

** org-html-inline-images =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-inline-images
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-inline-images&sr=1][Find modifications in git logs]]

: Non-nil means inline images into exported HTML pages.
: This is done using an <img> tag.  When nil, an anchor with href is used to
: link to the image.

** org-agenda-clock-consistency-checks =(quote (:max-duration "10:00" ...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-clock-consistency-checks
   :END:

- *Type:* plist
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-clock-consistency-checks&sr=1][Find modifications in git logs]]

: This is a property list, with the following keys:
: 
: :max-duration    Mark clocking chunks that are longer than this time.
:                  This is a time string like "HH:MM", or the number
:                  of minutes as an integer.
: 
: :min-duration    Mark clocking chunks that are shorter that this.
:                  This is a time string like "HH:MM", or the number
:                  of minutes as an integer.
: 
: :max-gap         Mark gaps between clocking chunks that are longer than
:                  this duration.  A number of minutes, or a string
:                  like "HH:MM".
: 
: :gap-ok-around   List of times during the day which are usually not working
:                  times.  When a gap is detected, but the gap contains any
:                  of these times, the gap is *not* reported.  For example,
:                  if this is ("4:00" "13:00") then gaps that contain
:                  4:00 in the morning (i.e. the night) and 13:00
:                  (i.e. a typical lunch time) do not cause a warning.
:                  You should have at least one time during the night in this
:                  list, or otherwise the first task each morning will trigger
:                  a warning because it follows a long gap.
: 
: Furthermore, the following properties can be used to define faces for
: issue display.
: 
: :default-face         the default face, if the specific face is undefined
: :overlap-face         face for overlapping clocks
: :gap-face             face for gaps between clocks
: :no-end-time-face     face for incomplete clocks
: :long-face            face for clock intervals that are too long
: :short-face           face for clock intervals that are too short

** org-format-latex-header =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-format-latex-header
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-format-latex-header&sr=1][Find modifications in git logs]]

: The document header used for processing LaTeX fragments.
: It is imperative that this header make sure that no page number
: appears on the page.  The package defined in the variables
: `org-latex-default-packages-alist' and `org-latex-packages-alist'
: will either replace the placeholder "[PACKAGES]" in this
: header, or they will be appended.

** org-agenda-auto-exclude-function =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-auto-exclude-function
   :END:

- *Type:* (choice (const nil) (function)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-auto-exclude-function&sr=1][Find modifications in git logs]]

: A function called with a tag to decide if it is filtered on \<org-agenda-mode-map>`\[org-agenda-filter-by-tag] RET'.
: The sole argument to the function, which is called once for each
: possible tag, is a string giving the name of the tag.  The
: function should return either nil if the tag should be included
: as normal, or "-<TAG>" to exclude the tag.
: Note that for the purpose of tag filtering, only the lower-case version of
: all tags will be considered, so that this function will only ever see
: the lower-case version of all tags.

** org-agenda-remove-tags =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-remove-tags
   :END:

- *Type:* (choice (const :tag "Always" t...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-remove-tags&sr=1][Find modifications in git logs]]

: Non-nil means remove the tags from the headline copy in the agenda.
: When this is the symbol `prefix', only remove tags when
: `org-agenda-prefix-format' contains a `%T' specifier.

** org-koma-letter-prefer-special-headings =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-prefer-special-headings
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-prefer-special-headings&sr=1][Find modifications in git logs]]

: Non-nil means prefer headlines over keywords for TO and FROM.
: This option can also be set with the OPTIONS keyword, e.g.:
: "special-headings:t".

** org-mobile-force-mobile-change =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-force-mobile-change
   :END:

- *Type:* (choice (const :tag "Always" t...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-force-mobile-change&sr=1][Find modifications in git logs]]

: Non-nil means force the change made on the mobile device.
: So even if there have been changes to the computer version of the entry,
: force the new value set on the mobile.
: When nil, mark the entry from the mobile with an error message.
: Instead of nil or t, this variable can also be a list of symbols, indicating
: the editing types for which the mobile version should always dominate.

** org-mouse-features =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-features
   :END:

- *Type:* (set :greedy t (const :tag "Mo...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mouse.el;hb=HEAD][org-mouse.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-features&sr=1][Find modifications in git logs]]

: The features of org-mouse that should be activated.
: Changing this variable requires a restart of Emacs to get activated.

** org-agenda-menu-two-columns =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-menu-two-columns
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-menu-two-columns&sr=1][Find modifications in git logs]]

: Non-nil means, use two columns to show custom commands in the dispatcher.
: If you use this, you probably want to set `org-agenda-menu-show-matcher'
: to nil.

** org-mobile-force-id-on-agenda-items =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-force-id-on-agenda-items
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-force-id-on-agenda-items&sr=1][Find modifications in git logs]]

: Non-nil means make all agenda items carry an ID.

** org-clock-clocked-in-display =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-clocked-in-display
   :END:

- *Type:* (choice (const :tag "Mode line...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-clocked-in-display&sr=1][Find modifications in git logs]]

: When clocked in for a task, Org can display the current
: task and accumulated time in the mode line and/or frame title.
: Allowed values are:
: 
: both         displays in both mode line and frame title
: mode-line    displays only in mode line (default)
: frame-title  displays only in frame title
: nil          current clock is not displayed

** org-latex-classes =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-classes
   :END:

- *Type:* (repeat (list (string :tag "La...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-classes&sr=1][Find modifications in git logs]]

: Alist of LaTeX classes and associated header and structure.
: If #+LATEX_CLASS is set in the buffer, use its value and the
: associated information.  Here is the structure of each cell:
: 
:   (class-name
:     header-string
:     (numbered-section . unnumbered-section)
:     ...)
: 
: The header string
: -----------------
: 
: The HEADER-STRING is the header that will be inserted into the
: LaTeX file.  It should contain the \documentclass macro, and
: anything else that is needed for this setup.  To this header, the
: following commands will be added:
: 
: - Calls to \usepackage for all packages mentioned in the
:   variables `org-latex-default-packages-alist' and
:   `org-latex-packages-alist'.  Thus, your header definitions
:   should avoid to also request these packages.
: 
: - Lines specified via "#+LATEX_HEADER:" and
:   "#+LATEX_HEADER_EXTRA:" keywords.
: 
: If you need more control about the sequence in which the header
: is built up, or if you want to exclude one of these building
: blocks for a particular class, you can use the following
: macro-like placeholders.
: 
:  [DEFAULT-PACKAGES]      \usepackage statements for default packages
:  [NO-DEFAULT-PACKAGES]   do not include any of the default packages
:  [PACKAGES]              \usepackage statements for packages
:  [NO-PACKAGES]           do not include the packages
:  [EXTRA]                 the stuff from #+LATEX_HEADER(_EXTRA)
:  [NO-EXTRA]              do not include #+LATEX_HEADER(_EXTRA) stuff
: 
: So a header like
: 
:   \documentclass{article}
:   [NO-DEFAULT-PACKAGES]
:   [EXTRA]
:   \providecommand{\alert}[1]{\textbf{#1}}
:   [PACKAGES]
: 
: will omit the default packages, and will include the
: #+LATEX_HEADER and #+LATEX_HEADER_EXTRA lines, then have a call
: to \providecommand, and then place \usepackage commands based
: on the content of `org-latex-packages-alist'.
: 
: If your header, `org-latex-default-packages-alist' or
: `org-latex-packages-alist' inserts "\usepackage[AUTO]{inputenc}",
: AUTO will automatically be replaced with a coding system derived
: from `buffer-file-coding-system'.  See also the variable
: `org-latex-inputenc-alist' for a way to influence this mechanism.
: 
: Likewise, if your header contains "\usepackage[AUTO]{babel}"
: or "\usepackage[AUTO]{polyglossia}", AUTO will be replaced
: with the language related to the language code specified by
: `org-export-default-language'.  Note that constructions such as
: "\usepackage[french,AUTO,english]{babel}" are permitted.  For
: Polyglossia the language will be set via the macros
: "\setmainlanguage" and "\setotherlanguage".  See also
: `org-latex-guess-babel-language' and
: `org-latex-guess-polyglossia-language'.
: 
: The sectioning structure
: ------------------------
: 
: The sectioning structure of the class is given by the elements
: following the header string.  For each sectioning level, a number
: of strings is specified.  A %s formatter is mandatory in each
: section string and will be replaced by the title of the section.
: 
: Instead of a cons cell (numbered . unnumbered), you can also
: provide a list of 2 or 4 elements,
: 
:   (numbered-open numbered-close)
: 
: or
: 
:   (numbered-open numbered-close unnumbered-open unnumbered-close)
: 
: providing opening and closing strings for a LaTeX environment
: that should represent the document section.  The opening clause
: should have a %s to represent the section title.
: 
: Instead of a list of sectioning commands, you can also specify
: a function name.  That function will be called with two
: parameters, the (reduced) level of the headline, and a predicate
: non-nil when the headline should be numbered.  It must return
: a format string in which the section title will be added.

** org-startup-truncated =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-startup-truncated
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-startup-truncated&sr=1][Find modifications in git logs]]

: Non-nil means entering Org mode will set `truncate-lines'.
: This is useful since some lines containing links can be very long and
: uninteresting.  Also tables look terrible when wrapped.
: 
: The variable `org-startup-truncated' allows to configure
: truncation for Org mode different to the other modes that use the
: variable `truncate-lines' and as a shortcut instead of putting
: the variable `truncate-lines' into the `org-mode-hook'.  If one
: wants to configure truncation for Org mode not statically but
: dynamically e. g. in a hook like `ediff-prepare-buffer-hook' then
: the variable `truncate-lines' has to be used because in such a
: case it is too late to set the variable `org-startup-truncated'.

** org-complete-tags-always-offer-all-agenda-tags =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-complete-tags-always-offer-all-agenda-tags
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-complete-tags-always-offer-all-agenda-tags&sr=1][Find modifications in git logs]]

: If non-nil, always offer completion for all tags of all agenda files.
: Instead of customizing this variable directly, you might want to
: set it locally for capture buffers, because there no list of
: tags in that file can be created dynamically (there are none).
: 
:   (add-hook \='org-capture-mode-hook
:             (lambda ()
:               (setq-local org-complete-tags-always-offer-all-agenda-tags t)))

** org-html-link-up =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-link-up
   :END:

- *Type:* (string :tag "File or URL")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-link-up&sr=1][Find modifications in git logs]]

: Where should the "UP" link of exported HTML pages lead?

** org-feed-drawer =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-drawer
   :END:

- *Type:* (string :tag "Drawer Name")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-drawer&sr=1][Find modifications in git logs]]

: The name of the drawer for feed status information.
: Each feed may also specify its own drawer name using the `:drawer'
: parameter in `org-feed-alist'.

** org-clock-resolve-expert =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-resolve-expert
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-resolve-expert&sr=1][Find modifications in git logs]]

: Non-nil means do not show the splash buffer with the clock resolver.

** org-publish-sitemap-sort-folders =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-sitemap-sort-folders
   :END:

- *Type:* (choice (const :tag "Folders b...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-sitemap-sort-folders&sr=1][Find modifications in git logs]]

: A symbol, denoting if folders are sorted first in site-maps.
: 
: Possible values are `first', `last', `ignore' and nil.
: If `first', folders will be sorted before files.
: If `last', folders are sorted to the end after the files.
: If `ignore', folders do not appear in the site-map.
: Any other value will mix files and folders.
: 
: You can overwrite this default per project in your
: `org-publish-project-alist', using `:sitemap-sort-folders'.
: 
: This variable is ignored when site-map style is `tree'.

** org-ascii-format-drawer-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-format-drawer-function
   :END:

- *Type:* function
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-format-drawer-function&sr=1][Find modifications in git logs]]

: Function called to format a drawer in ASCII.
: 
: The function must accept three parameters:
:   NAME      the drawer name, like "LOGBOOK"
:   CONTENTS  the contents of the drawer.
:   WIDTH     the text width within the drawer.
: 
: The function should return either the string to be exported or
: nil to ignore the drawer.
: 
: The default value simply returns the value of CONTENTS.

** org-log-reschedule =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-reschedule
   :END:

- *Type:* (choice (const :tag "No loggin...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-reschedule&sr=1][Find modifications in git logs]]

: Information to record when the scheduling date of a tasks is modified.
: 
: Possible values are:
: 
: nil     Don't add anything, just change the date
: time    Add a time stamp to the task
: note    Prompt for a note and add it with template `org-log-note-headings'
: 
: This option can also be set with on a per-file-basis with
: 
:    #+STARTUP: nologreschedule
:    #+STARTUP: logreschedule
:    #+STARTUP: lognotereschedule

** org-odt-fontify-srcblocks =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-fontify-srcblocks
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-fontify-srcblocks&sr=1][Find modifications in git logs]]

: Specify whether or not source blocks need to be fontified.
: Turn this option on if you want to colorize the source code
: blocks in the exported file.  For colorization to work, you need
: to make available an enhanced version of `htmlfontify' library.

** org-feed-save-after-adding =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-save-after-adding
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-save-after-adding&sr=1][Find modifications in git logs]]

: Non-nil means save buffer after adding new feed items.

** org-agenda-window-setup =(quote reorganize-frame)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-window-setup
   :END:

- *Type:* (choice (const current-window)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-window-setup&sr=1][Find modifications in git logs]]

: How the agenda buffer should be displayed.
: Possible values for this option are:
: 
: current-window    Show agenda in the current window, keeping all other windows.
: other-window      Use `switch-to-buffer-other-window' to display agenda.
: only-window       Show agenda, deleting all other windows.
: reorganize-frame  Show only two windows on the current frame, the current
:                   window and the agenda.
: other-frame       Use `switch-to-buffer-other-frame' to display agenda.
:                   Also, when exiting the agenda, kill that frame.
: See also the variable `org-agenda-restore-windows-after-quit'.

** org-html-tag-class-prefix =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-tag-class-prefix
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-tag-class-prefix&sr=1][Find modifications in git logs]]

: Prefix to class names for TODO keywords.
: Each tag gets a class given by the tag itself, with this prefix.
: The default prefix is empty because it is nice to just use the keyword
: as a class name.  But if you get into conflicts with other, existing
: CSS classes, then this prefix can be very useful.

** org-hide-macro-markers =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-hide-macro-markers
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hide-macro-markers&sr=1][Find modifications in git logs]]

: Non-nil mean font-lock should hide the brackets marking macro calls.

** org-table-number-fraction =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-number-fraction
   :END:

- *Type:* number
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-number-fraction&sr=1][Find modifications in git logs]]

: Fraction of numbers in a column required to make the column align right.
: In a column all non-white fields are considered.  If at least
: this fraction of fields is matched by `org-table-number-regexp',
: alignment to the right border applies.

** org-agenda-include-deadlines =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-include-deadlines
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-include-deadlines&sr=1][Find modifications in git logs]]

: If non-nil, include entries within their deadline warning period.
: Custom commands can set this variable in the options section.

** org-html-indent =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-indent
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-indent&sr=1][Find modifications in git logs]]

: Non-nil means to indent the generated HTML.
: Warning: non-nil may break indentation of source code blocks.

** org-archive-default-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-default-command
   :END:

- *Type:* (choice (const org-archive-sub...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-default-command&sr=1][Find modifications in git logs]]

: The default archiving command.

** org-todo-keywords =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-keywords
   :END:

- *Type:* (choice (repeat :tag "Old synt...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-keywords&sr=1][Find modifications in git logs]]

: List of TODO entry keyword sequences and their interpretation.
: \<org-mode-map>This is a list of sequences.
: 
: Each sequence starts with a symbol, either `sequence' or `type',
: indicating if the keywords should be interpreted as a sequence of
: action steps, or as different types of TODO items.  The first
: keywords are states requiring action - these states will select a headline
: for inclusion into the global TODO list Org produces.  If one of the
: "keywords" is the vertical bar, "|", the remaining keywords
: signify that no further action is necessary.  If "|" is not found,
: the last keyword is treated as the only DONE state of the sequence.
: 
: The command `\[org-todo]' cycles an entry through these states, and one
: additional state where no keyword is present.  For details about this
: cycling, see the manual.
: 
: TODO keywords and interpretation can also be set on a per-file basis with
: the special #+SEQ_TODO and #+TYP_TODO lines.
: 
: Each keyword can optionally specify a character for fast state selection
: (in combination with the variable `org-use-fast-todo-selection')
: and specifiers for state change logging, using the same syntax that
: is used in the "#+TODO:" lines.  For example, "WAIT(w)" says that
: the WAIT state can be selected with the "w" key.  "WAIT(w!)"
: indicates to record a time stamp each time this state is selected.
: 
: Each keyword may also specify if a timestamp or a note should be
: recorded when entering or leaving the state, by adding additional
: characters in the parenthesis after the keyword.  This looks like this:
: "WAIT(w@/!)".  "@" means to add a note (with time), "!" means to
: record only the time of the state change.  With X and Y being either
: "@" or "!", "X/Y" means use X when entering the state, and use
: Y when leaving the state if and only if the *target* state does not
: define X.  You may omit any of the fast-selection key or X or /Y,
: so WAIT(w@), WAIT(w/@) and WAIT(@/@) are all valid.
: 
: For backward compatibility, this variable may also be just a list
: of keywords.  In this case the interpretation (sequence or type) will be
: taken from the (otherwise obsolete) variable `org-todo-interpretation'.

** org-src-window-setup =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-src-window-setup
   :END:

- *Type:* (choice (const current-window)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-src-window-setup&sr=1][Find modifications in git logs]]

: How the source code edit buffer should be displayed.
: Possible values for this option are:
: 
: current-window    Show edit buffer in the current window, keeping all other
:                   windows.
: other-window      Use `switch-to-buffer-other-window' to display edit buffer.
: reorganize-frame  Show only two windows on the current frame, the current
:                   window and the edit buffer.  When exiting the edit buffer,
:                   return to one window.
: other-frame       Use `switch-to-buffer-other-frame' to display edit buffer.
:                   Also, when exiting the edit buffer, kill that frame.

** org-goto-auto-isearch =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-goto-auto-isearch
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-auto-isearch&sr=1][Find modifications in git logs]]

: Non-nil means typing characters in `org-goto' starts incremental search.
: When nil, you can use these keybindings to navigate the buffer:
: 
:   q    Quit the org-goto interface
:   n    Go to the next visible heading
:   p    Go to the previous visible heading
:   f    Go one heading forward on same level
:   b    Go one heading backward on same level
:   u    Go one heading up

** org-n-level-faces =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-n-level-faces
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-n-level-faces&sr=1][Find modifications in git logs]]

: The number of different faces to be used for headlines.
: Org mode defines 8 different headline faces, so this can be at most 8.
: If it is less than 8, the level-1 face gets re-used for level N+1 etc.

** org-capture-bookmark =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-capture-bookmark
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-capture.el;hb=HEAD][org-capture.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-capture-bookmark&sr=1][Find modifications in git logs]]

: When non-nil, add a bookmark pointing at the last stored
: position when capturing.

** org-html-link-home =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-link-home
   :END:

- *Type:* (string :tag "File or URL")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-link-home&sr=1][Find modifications in git logs]]

: Where should the "HOME" link of exported HTML pages lead?

** org-agenda-columns-show-summaries =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-columns-show-summaries
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-columns-show-summaries&sr=1][Find modifications in git logs]]

: Non-nil means show summaries for columns displayed in the agenda view.

** org-export-with-broken-links =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-broken-links
   :END:

- *Type:* (choice (const :tag "Ignore br...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-broken-links&sr=1][Find modifications in git logs]]

: Non-nil means do not raise an error on broken links.
: 
: When this variable is non-nil, broken links are ignored, without
: stopping the export process.  If it is set to `mark', broken
: links are marked as such in the output, with a string like
: 
:   [BROKEN LINK: path]
: 
: where PATH is the un-resolvable reference.
: 
: This option can also be set with the OPTIONS keyword, e.g.,
: "broken-links:mark".

** org-ctags-new-topic-template =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ctags-new-topic-template
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-ctags.el;hb=HEAD][org-ctags.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ctags-new-topic-template&sr=1][Find modifications in git logs]]

: Text to insert when creating a new org file via opening a hyperlink.
: The following patterns are replaced in the string:
:     `%t' - replaced with the capitalized title of the hyperlink

** org-calendar-follow-timestamp-change =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-calendar-follow-timestamp-change
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-calendar-follow-timestamp-change&sr=1][Find modifications in git logs]]

: Non-nil means make the calendar window follow timestamp changes.
: When a timestamp is modified and the calendar window is visible, it will be
: moved to the new date.

** org-html-todo-kwd-class-prefix =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-todo-kwd-class-prefix
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-todo-kwd-class-prefix&sr=1][Find modifications in git logs]]

: Prefix to class names for TODO keywords.
: Each TODO keyword gets a class given by the keyword itself, with this prefix.
: The default prefix is empty because it is nice to just use the keyword
: as a class name.  But if you get into conflicts with other, existing
: CSS classes, then this prefix can be very useful.

** org-babel-lua-None-to =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lua-None-to
   :END:

- *Type:* symbol
- *Since:* Emacs version 24.5
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lua.el;hb=HEAD][ob-lua.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lua-None-to&sr=1][Find modifications in git logs]]

: Replace 'None' in lua tables with this before returning.

** org-protocol-protocol-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-protocol-protocol-alist
   :END:

- *Type:* (alist)
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-protocol.el;hb=HEAD][org-protocol.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-protocol-protocol-alist&sr=1][Find modifications in git logs]]

: Register custom handlers for org-protocol.
: 
: Each element of this list must be of the form:
: 
:   (module-name :protocol protocol :function func :kill-client nil)
: 
: protocol - protocol to detect in a filename without trailing
:            colon and slashes.  See rfc1738 section 2.1 for more
:            on this.  If you define a protocol "my-protocol",
:            `org-protocol-check-filename-for-protocol' will search
:            filenames for "org-protocol:/my-protocol" and
:            trigger your action for every match.  `org-protocol'
:            is defined in `org-protocol-the-protocol'.  Double and
:            triple slashes are compressed to one by emacsclient.
: 
: function - function that handles requests with protocol and takes
:            one argument.  If a new-style link (key=val&key2=val2)
:            is given, the argument will be a property list with
:            the values from the link.  If an old-style link is
:            given (val1/val2), the argument will be the filename
:            with all protocols stripped.
: 
:            If the function returns nil, emacsclient and -server
:            do nothing.  Any non-nil return value is considered a
:            valid filename and thus passed to the server.
: 
:            `org-protocol.el' provides some support for handling
:            old-style filenames, if you follow the conventions
:            used for the standard handlers in
:            `org-protocol-protocol-alist-default'.  See
:            `org-protocol-parse-parameters'.
: 
: kill-client - If t, kill the client immediately, once the sub-protocol is
:            detected.  This is necessary for actions that can be interrupted by
:            `C-g' to avoid dangling emacsclients.  Note that all other command
:            line arguments but the this one will be discarded.  Greedy handlers
:            still receive the whole list of arguments though.
: 
: Here is an example:
: 
:   (setq org-protocol-protocol-alist
:       \='(("my-protocol"
:          :protocol "my-protocol"
:          :function my-protocol-handler-function)
:         ("your-protocol"
:          :protocol "your-protocol"
:          :function your-protocol-handler-function)))

** org-agenda-skip-function-global =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-function-global
   :END:

- *Type:* sexp
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-function-global&sr=1][Find modifications in git logs]]

: Function to be called at each match during agenda construction.
: If this function returns nil, the current match should not be skipped.
: If the function decided to skip an agenda match, is must return the
: buffer position from which the search should be continued.
: This may also be a Lisp form, which will be evaluated.
: 
: This variable will be applied to every agenda match, including
: tags/property searches and TODO lists.  So try to make the test function
: do its checking as efficiently as possible.  To implement a skipping
: condition just for specific agenda commands, use the variable
: `org-agenda-skip-function' which can be set in the options section
: of custom agenda commands.

** org-emphasis-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-emphasis-alist
   :END:

- *Type:* (repeat (list (string :tag "Ma...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-emphasis-alist&sr=1][Find modifications in git logs]]

: Alist of characters and faces to emphasize text.
: Text starting and ending with a special character will be emphasized,
: for example *bold*, _underlined_ and /italic/.  This variable sets the
: marker characters and the face to be used by font-lock for highlighting
: in Org buffers.
: 
: You need to reload Org or to restart Emacs after customizing this.

** org-ellipsis =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-ellipsis
   :END:

- *Type:* (choice (const :tag "Default" ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ellipsis&sr=1][Find modifications in git logs]]

: The ellipsis to use in the Org mode outline.
: 
: When nil, just use the standard three dots.  When a non-empty string,
: use that string instead.
: 
: The change affects only Org mode (which will then use its own display table).
: Changing this requires executing `\[org-mode]' in a buffer to become
: effective.

** org-html-klipse-js =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-klipse-js
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-klipse-js&sr=1][Find modifications in git logs]]

: Location of the klipse javascript file.

** orgtbl-optimized =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: orgtbl-optimized
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgtbl-optimized&sr=1][Find modifications in git logs]]

: Non-nil means use the optimized table editor version for `orgtbl-mode'.
: In the optimized version, the table editor takes over all simple keys that
: normally just insert a character.  In tables, the characters are inserted
: in a way to minimize disturbing the table structure (i.e. in overwrite mode
: for empty fields).  Outside tables, the correct binding of the keys is
: restored.
: 
: The default for this option is t if the optimized version is also used in
: Org mode.  See the variable `org-enable-table-editor' for details.  Changing
: this variable requires a restart of Emacs to become effective.

** org-ditaa-eps-jar-path =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ditaa-eps-jar-path
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-ditaa.el;hb=HEAD][ob-ditaa.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ditaa-eps-jar-path&sr=1][Find modifications in git logs]]

: Path to the DitaaEps.jar executable.

** org-agenda-default-appointment-duration =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-default-appointment-duration
   :END:

- *Type:* (choice (integer :tag "Minutes...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-default-appointment-duration&sr=1][Find modifications in git logs]]

: Default duration for appointments that only have a starting time.
: When nil, no duration is specified in such cases.
: When non-nil, this must be the number of minutes, e.g. 60 for one hour.

** org-habit-show-all-today =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-show-all-today
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-show-all-today&sr=1][Find modifications in git logs]]

: If non-nil, will show the consistency graph of all habits on
: today's agenda, even if they are not scheduled.

** org-open-non-existing-files =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-open-non-existing-files
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-non-existing-files&sr=1][Find modifications in git logs]]

: Non-nil means `org-open-file' will open non-existing files.
: When nil, an error will be generated.
: This variable applies only to external applications because they
: might choke on non-existing files.  If the link is to a file that
: will be opened in Emacs, the variable is ignored.

** org-priority-faces =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-priority-faces
   :END:

- *Type:* (repeat (cons (character :tag ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-priority-faces&sr=1][Find modifications in git logs]]

: Faces for specific Priorities.
: This is a list of cons cells, with priority character in the car
: and faces in the cdr.  The face can be a symbol, a color as
: as a string, or a property list of attributes, like
:     (:foreground "blue" :weight bold :underline t).
: If it is a color string, the variable `org-faces-easy-properties'
: determines if it is a foreground or a background color.

** org-beamer-frame-default-options =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-frame-default-options
   :END:

- *Type:* (string :tag "[options]")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-frame-default-options&sr=1][Find modifications in git logs]]

: Default options string to use for frames.
: For example, it could be set to "allowframebreaks".

** org-man-tables-centered =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-tables-centered
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-tables-centered&sr=1][Find modifications in git logs]]

: When non-nil, tables are exported in a center environment.

** org-clock-goto-may-find-recent-task =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-goto-may-find-recent-task
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-goto-may-find-recent-task&sr=1][Find modifications in git logs]]

: Non-nil means `org-clock-goto' can go to recent task if no active clock.

** org-html-checkbox-type =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-checkbox-type
   :END:

- *Type:* (choice (const :tag "ASCII cha...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-checkbox-type&sr=1][Find modifications in git logs]]

: The type of checkboxes to use for HTML export.
: See `org-html-checkbox-types' for for the values used for each
: option.

** org-koma-letter-use-backaddress =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-use-backaddress
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-use-backaddress&sr=1][Find modifications in git logs]]

: Non-nil prints return address in line above to address.
: This option can also be set with the OPTIONS keyword, e.g.:
: "backaddress:t".

** org-latex-active-timestamp-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-active-timestamp-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-active-timestamp-format&sr=1][Find modifications in git logs]]

: A printf format string to be applied to active timestamps.

** org-texinfo-format-headline-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-format-headline-function
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-format-headline-function&sr=1][Find modifications in git logs]]

: Function to format headline text.
: 
: This function will be called with 5 arguments:
: TODO      the todo keyword (string or nil).
: TODO-TYPE the type of todo (symbol: `todo', `done', nil)
: PRIORITY  the priority of the headline (integer or nil)
: TEXT      the main headline text (string).
: TAGS      the tags as a list of strings (list of strings or nil).
: 
: The function result will be used in the section format string.

** org-html-klipse-selection-script =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-klipse-selection-script
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-klipse-selection-script&sr=1][Find modifications in git logs]]

: Javascript snippet to activate klipse.

** org-todo-repeat-to-state =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-repeat-to-state
   :END:

- *Type:* (choice (const :tag "Head of s...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-repeat-to-state&sr=1][Find modifications in git logs]]

: The TODO state to which a repeater should return the repeating task.
: By default this is the first task in a TODO sequence, or the previous state
: in a TODO_TYP set.  But you can specify another task here.
: alternatively, set the :REPEAT_TO_STATE: property of the entry.

** org-ascii-bullets =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-bullets
   :END:

- *Type:* (list (cons :tag "Bullet chara...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-bullets&sr=1][Find modifications in git logs]]

: Bullet characters for headlines converted to lists in ASCII export.
: 
: Alist whose key is a symbol among `ascii', `latin1' and `utf-8'
: and whose value is a list of characters.
: 
: The first character is used for the first level considered as low
: level, and so on.  If there are more levels than characters given
: here, the list will be repeated.
: 
: Note that this variable doesn't affect plain lists
: representation.

** org-clock-persist-file =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-persist-file
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-persist-file&sr=1][Find modifications in git logs]]

: File to save clock data to.

** org-id-include-domain =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-include-domain
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-include-domain&sr=1][Find modifications in git logs]]

: Non-nil means add the domain name to new IDs.
: This ensures global uniqueness of IDs, and is also suggested by
: RFC 2445 in combination with RFC 822.  This is only relevant if
: `org-id-method' is `org'.  When uuidgen is used, the domain will never
: be added.
: The default is to not use this because we have no really good way to get
: the true domain, and Org entries will normally not be shared with enough
: people to make this necessary.

** org-columns-skip-archived-trees =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-columns-skip-archived-trees
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-columns-skip-archived-trees&sr=1][Find modifications in git logs]]

: Non-nil means ignore archived trees when creating column view.

** org-table-exit-follow-field-mode-when-leaving-table =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-exit-follow-field-mode-when-leaving-table
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-exit-follow-field-mode-when-leaving-table&sr=1][Find modifications in git logs]]

: Non-nil means automatically exit the follow mode.
: When nil, the follow mode will stay on and be active in any table
: the cursor enters.  Since the table follow filed mode messes with the
: window configuration, it is not recommended to set this variable to nil,
: except maybe locally in a special file that has mostly tables with long
: fields.

** org-checkbox-hierarchical-statistics =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-checkbox-hierarchical-statistics
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-checkbox-hierarchical-statistics&sr=1][Find modifications in git logs]]

: Non-nil means checkbox statistics counts only the state of direct children.
: When nil, all boxes below the cookie are counted.
: This can be set to nil on a per-node basis using a COOKIE_DATA property
: with the word "recursive" in the value.

** org-agenda-diary-sexp-prefix =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-diary-sexp-prefix
   :END:

- *Type:* (choice (const :tag "None" nil...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-diary-sexp-prefix&sr=1][Find modifications in git logs]]

: A regexp that matches part of a diary sexp entry
: which should be treated as scheduling/deadline information in
: `org-agenda'.
: 
: For example, you can use this to extract the `diary-remind-message' from
: `diary-remind' entries.

** org-edit-fixed-width-region-mode =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-fixed-width-region-mode
   :END:

- *Type:* (choice (const artist-mode) (c...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-fixed-width-region-mode&sr=1][Find modifications in git logs]]

: The mode that should be used to edit fixed-width regions.
: These are the regions where each line starts with a colon.

** org-agenda-day-face-function =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-day-face-function
   :END:

- *Type:* (choice (const nil) (function)...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-day-face-function&sr=1][Find modifications in git logs]]

: Function called to determine what face should be used to display a day.
: The only argument passed to that function is the day.  It should
: returns a face, or nil if does not want to specify a face and let
: the normal rules apply.

** org-sparse-tree-default-date-type =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-sparse-tree-default-date-type
   :END:

- *Type:* (choice (const :tag "Scheduled...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sparse-tree-default-date-type&sr=1][Find modifications in git logs]]

: The default date type when building a sparse tree.
: When this is nil, a date is a scheduled or a deadline timestamp.
: Otherwise, these types are allowed:
: 
:         all: all timestamps
:      active: only active timestamps (<...>)
:    inactive: only inactive timestamps ([...])
:   scheduled: only scheduled timestamps
:    deadline: only deadline timestamps

** org-export-with-clocks =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-clocks
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-clocks&sr=1][Find modifications in git logs]]

: Non-nil means export CLOCK keywords.
: This option can also be set with the OPTIONS keyword,
: e.g. "c:t".

** org-clock-idle-time =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-idle-time
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-idle-time&sr=1][Find modifications in git logs]]

: When non-nil, resolve open clocks if the user is idle more than X minutes.

** org-html-table-caption-above =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-caption-above
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-caption-above&sr=1][Find modifications in git logs]]

: When non-nil, place caption string at the beginning of the table.
: Otherwise, place it near the end.

** org-clock-persist-query-resume =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-persist-query-resume
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-persist-query-resume&sr=1][Find modifications in git logs]]

: When non-nil, ask before resuming any stored clock during load.

** org-mobile-files-exclude-regexp =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-files-exclude-regexp
   :END:

- *Type:* regexp
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-files-exclude-regexp&sr=1][Find modifications in git logs]]

: A regexp to exclude files from `org-mobile-files'.

** org-clone-delete-id =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-clone-delete-id
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clone-delete-id&sr=1][Find modifications in git logs]]

: Remove ID property of clones of a subtree.
: When non-nil, clones of a subtree don't inherit the ID property.
: Otherwise they inherit the ID property with a new unique
: identifier.

** org-agenda-restriction-lock-highlight-subtree =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-restriction-lock-highlight-subtree
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-restriction-lock-highlight-subtree&sr=1][Find modifications in git logs]]

: Non-nil means highlight the whole subtree when restriction is active.
: Otherwise only highlight the headline.  Highlighting the whole subtree is
: useful to ensure no edits happen beyond the restricted region.

** org-export-with-creator =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-creator
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-creator&sr=1][Find modifications in git logs]]

: Non-nil means the postamble should contain a creator sentence.
: 
: The sentence can be set in `org-export-creator-string', which
: see.
: 
: This option can also be set with the OPTIONS keyword, e.g.,
: "creator:t".

** org-latex-bib-compiler =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-bib-compiler
   :END:

- *Type:* (choice (const :tag "BibTeX" "...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-bib-compiler&sr=1][Find modifications in git logs]]

: Command to process a LaTeX file's bibliography.
: 
: The shorthand %bib in `org-latex-pdf-process' is replaced with
: this value.
: 
: A better approach is to use a compiler suit such as `latexmk'.

** org-cycle-global-at-bob =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-global-at-bob
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-global-at-bob&sr=1][Find modifications in git logs]]

: Cycle globally if cursor is at beginning of buffer and not at a headline.
: 
: This makes it possible to do global cycling without having to use `S-TAB'
: or `\[universal-argument] TAB'.  For this special case to work, the first line of the buffer
: must not be a headline -- it may be empty or some other text.
: 
: When used in this way, `org-cycle-hook' is disabled temporarily to make
: sure the cursor stays at the beginning of the buffer.
: 
: When this option is nil, don't do anything special at the beginning of
: the buffer.

** org-babel-clojure-sync-nrepl-timeout =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-clojure-sync-nrepl-timeout
   :END:

- *Type:* integer
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-clojure.el;hb=HEAD][ob-clojure.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-clojure-sync-nrepl-timeout&sr=1][Find modifications in git logs]]

: Timeout value, in seconds, of a Clojure sync call.
: If the value is nil, timeout is disabled.

** orgstruct-heading-prefix-regexp =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: orgstruct-heading-prefix-regexp
   :END:

- *Type:* regexp
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=orgstruct-heading-prefix-regexp&sr=1][Find modifications in git logs]]

: Regexp that matches the custom prefix of Org headlines in
: orgstruct(++)-mode.

** org-html-footnote-separator =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-footnote-separator
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-footnote-separator&sr=1][Find modifications in git logs]]

: Text used to separate footnotes.

** org-confirm-babel-evaluate =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-confirm-babel-evaluate
   :END:

- *Type:* (choice boolean function)
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-core.el;hb=HEAD][ob-core.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-confirm-babel-evaluate&sr=1][Find modifications in git logs]]

: Confirm before evaluation.
: \<org-mode-map>Require confirmation before interactively evaluating code
: blocks in Org buffers.  The default value of this variable is t,
: meaning confirmation is required for any code block evaluation.
: This variable can be set to nil to inhibit any future
: confirmation requests.  This variable can also be set to a
: function which takes two arguments the language of the code block
: and the body of the code block.  Such a function should then
: return a non-nil value if the user should be prompted for
: execution or nil if no prompt is required.
: 
: Warning: Disabling confirmation may result in accidental
: evaluation of potentially harmful code.  It may be advisable
: remove code block execution from `\[org-ctrl-c-ctrl-c]' as further protection
: against accidental code block evaluation.  The
: `org-babel-no-eval-on-ctrl-c-ctrl-c' variable can be used to
: remove code block execution from the `\[org-ctrl-c-ctrl-c]' keybinding.

** org-latex-listings-langs =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-listings-langs
   :END:

- *Type:* (repeat (list (symbol :tag "Ma...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-listings-langs&sr=1][Find modifications in git logs]]

: Alist mapping languages to their listing language counterpart.
: The key is a symbol, the major mode symbol without the "-mode".
: The value is the string that should be inserted as the language
: parameter for the listings package.  If the mode name and the
: listings name are the same, the language does not need an entry
: in this list - but it does not hurt if it is present.

** org-html-infojs-options =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-infojs-options
   :END:

- *Type:* (set :greedy t :inline t (cons...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-infojs-options&sr=1][Find modifications in git logs]]

: Options settings for the INFOJS JavaScript.
: Each of the options must have an entry in `org-html-infojs-opts-table'.
: The value can either be a string that will be passed to the script, or
: a property.  This property is then assumed to be a property that is defined
: by the Export/Publishing setup of Org.
: The `sdepth' and `tdepth' parameters can also be set to "max", which
: means to use the maximum value consistent with other options.

** org-agenda-text-search-extra-files =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-text-search-extra-files
   :END:

- *Type:* (set :greedy t (const :tag "Ag...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-text-search-extra-files&sr=1][Find modifications in git logs]]

: List of extra files to be searched by text search commands.
: These files will be searched in addition to the agenda files by the
: commands `org-search-view' (`\[org-agenda] s') and `org-occur-in-agenda-files'.
: Note that these files will only be searched for text search commands,
: not for the other agenda views like todo lists, tag searches or the weekly
: agenda.  This variable is intended to list notes and possibly archive files
: that should also be searched by these two commands.
: In fact, if the first element in the list is the symbol `agenda-archives',
: then all archive files of all agenda files will be added to the search
: scope.

** org-special-ctrl-a/e =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-special-ctrl-a/e
   :END:

- *Type:* (choice (const :tag "off" nil)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-special-ctrl-a/e&sr=1][Find modifications in git logs]]

: Non-nil means `C-a' and `C-e' behave specially in headlines and items.
: 
: When t, `C-a' will bring back the cursor to the beginning of the
: headline text, i.e. after the stars and after a possible TODO
: keyword.  In an item, this will be the position after bullet and
: check-box, if any.  When the cursor is already at that position,
: another `C-a' will bring it to the beginning of the line.
: 
: `C-e' will jump to the end of the headline, ignoring the presence
: of tags in the headline.  A second `C-e' will then jump to the
: true end of the line, after any tags.  This also means that, when
: this variable is non-nil, `C-e' also will never jump beyond the
: end of the heading of a folded section, i.e. not after the
: ellipses.
: 
: When set to the symbol `reversed', the first `C-a' or `C-e' works
: normally, going to the true line boundary first.  Only a directly
: following, identical keypress will bring the cursor to the
: special positions.
: 
: This may also be a cons cell where the behavior for `C-a' and
: `C-e' is set separately.

** org-list-two-spaces-after-bullet-regexp =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-list-two-spaces-after-bullet-regexp
   :END:

- *Type:* (choice (const :tag "never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-list-two-spaces-after-bullet-regexp&sr=1][Find modifications in git logs]]

: A regular expression matching bullets that should have 2 spaces after them.
: When nil, no bullet will have two spaces after them.  When
: a string, it will be used as a regular expression.  When the
: bullet type of a list is changed, the new bullet type will be
: matched against this regexp.  If it matches, there will be two
: spaces instead of one after the bullet in each item of the list.

** org-koma-letter-class-option-file ="NF"=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-class-option-file
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-class-option-file&sr=1][Find modifications in git logs]]

: Letter Class Option File.
: This option can also be set with the LCO keyword.

** org-latex-image-default-height =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-image-default-height
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-image-default-height&sr=1][Find modifications in git logs]]

: Default height for images.
: This value will not be used if a width is provided, or if the
: image is wrapped within a "figure" or "wrapfigure"
: environment.

** org-cycle-include-plain-lists =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-include-plain-lists
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-list.el;hb=HEAD][org-list.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-include-plain-lists&sr=1][Find modifications in git logs]]

: When t, make TAB cycle visibility on plain list items.
: Cycling plain lists works only when the cursor is on a plain list
: item.  When the cursor is on an outline heading, plain lists are
: treated as text.  This is the most stable way of handling this,
: which is why it is the default.
: 
: When this is the symbol `integrate', then integrate plain list
: items when cycling, as if they were children of outline headings.
: 
: This setting can lead to strange effects when switching visibility
: to `children', because the first "child" in a subtree decides
: what children should be listed.  If that first "child" is a
: plain list item with an implied large level number, all true
: children and grand children of the outline heading will be
: exposed in a children' view.

** org-latex-link-with-unknown-path-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-link-with-unknown-path-format
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-link-with-unknown-path-format&sr=1][Find modifications in git logs]]

: Format string for links with unknown path type.

** org-feed-retrieve-method =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-retrieve-method
   :END:

- *Type:* (choice (const :tag "Internall...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-retrieve-method&sr=1][Find modifications in git logs]]

: The method to be used to retrieve a feed URL.
: This can be `curl' or `wget' to call these external programs, or it can be
: an Emacs Lisp function that will return a buffer containing the content
: of the file pointed to by the URL.

** org-group-tags =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-group-tags
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-group-tags&sr=1][Find modifications in git logs]]

: When non-nil (the default), use group tags.
: This can be turned on/off through `org-toggle-tags-groups'.

** org-ascii-quote-margin =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-quote-margin
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-quote-margin&sr=1][Find modifications in git logs]]

: Width of margin used for quoting text, in characters.
: This margin is applied on both sides of the text.

** org-odt-display-outline-level =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-display-outline-level
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-display-outline-level&sr=1][Find modifications in git logs]]

: Outline levels considered for enumerating captioned entities.

** org-use-last-clock-out-time-as-effective-time =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-last-clock-out-time-as-effective-time
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-last-clock-out-time-as-effective-time&sr=1][Find modifications in git logs]]

: When non-nil, use the last clock out time for `org-todo'.
: Note that this option has precedence over the combined use of
: `org-use-effective-time' and `org-extend-today-until'.

** org-effort-durations =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-effort-durations
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-effort-durations&sr=1][Find modifications in git logs]]

: Conversion factor to minutes for an effort modifier.
: 
: Each entry has the form (MODIFIER . MINUTES).
: 
: In an effort string, a number followed by MODIFIER is multiplied
: by the specified number of MINUTES to obtain an effort in
: minutes.
: 
: For example, if the value of this variable is (("hours" . 60)), then an
: effort string "2hours" is equivalent to 120 minutes.

** org-babel-exp-code-template =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-exp-code-template
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-exp.el;hb=HEAD][ob-exp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-exp-code-template&sr=1][Find modifications in git logs]]

: Template used to export the body of code blocks.
: This template may be customized to include additional information
: such as the code block name, or the values of particular header
: arguments.  The template is filled out using `org-fill-template',
: and the following %keys may be used.
: 
:  lang ------ the language of the code block
:  name ------ the name of the code block
:  body ------ the body of the code block
:  switches -- the switches associated to the code block
:  flags ----- the flags passed to the code block
: 
: In addition to the keys mentioned above, every header argument
: defined for the code block may be used as a key and will be
: replaced with its value.

** org-log-done =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-done
   :END:

- *Type:* (choice (const :tag "No loggin...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-done&sr=1][Find modifications in git logs]]

: Information to record when a task moves to the DONE state.
: 
: Possible values are:
: 
: nil     Don't add anything, just change the keyword
: time    Add a time stamp to the task
: note    Prompt for a note and add it with template `org-log-note-headings'
: 
: This option can also be set with on a per-file-basis with
: 
:    #+STARTUP: nologdone
:    #+STARTUP: logdone
:    #+STARTUP: lognotedone
: 
: You can have local logging settings for a subtree by setting the LOGGING
: property to one or more of these keywords.

** org-agenda-todo-list-sublevels =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-list-sublevels
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-list-sublevels&sr=1][Find modifications in git logs]]

: Non-nil means check also the sublevels of a TODO entry for TODO entries.
: When nil, the sublevels of a TODO entry are not checked, resulting in
: potentially much shorter TODO lists.

** org-man-source-highlight-langs =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-source-highlight-langs
   :END:

- *Type:* (repeat (list (symbol :tag "Ma...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-source-highlight-langs&sr=1][Find modifications in git logs]]

: Alist mapping languages to their listing language counterpart.
: The key is a symbol, the major mode symbol without the "-mode".
: The value is the string that should be inserted as the language
: parameter for the listings package.  If the mode name and the
: listings name are the same, the language does not need an entry
: in this list - but it does not hurt if it is present.

** org-archive-save-context-info =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-archive-save-context-info
   :END:

- *Type:* (set :greedy t (const :tag "Ti...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-archive.el;hb=HEAD][org-archive.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-archive-save-context-info&sr=1][Find modifications in git logs]]

: Parts of context info that should be stored as properties when archiving.
: When a subtree is moved to an archive file, it loses information given by
: context, like inherited tags, the category, and possibly also the TODO
: state (depending on the variable `org-archive-mark-done').
: This variable can be a list of any of the following symbols:
: 
: time       The time of archiving.
: file       The file where the entry originates.
: ltags      The local tags, in the headline of the subtree.
: itags      The tags the subtree inherits from further up the hierarchy.
: todo       The pre-archive TODO state.
: category   The category, taken from file name or #+CATEGORY lines.
: olpath     The outline path to the item.  These are all headlines above
:            the current item, separated by /, like a file path.
: 
: For each symbol present in the list, a property will be created in
: the archived entry, with a prefix "ARCHIVE_", to remember this
: information.

** org-babel-tangle-uncomment-comments =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-tangle-uncomment-comments
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-tangle.el;hb=HEAD][ob-tangle.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-tangle-uncomment-comments&sr=1][Find modifications in git logs]]

: Inhibits automatic commenting and addition of trailing newline
: of tangle comments.  Use `org-babel-tangle-comment-format-beg'
: and `org-babel-tangle-comment-format-end' to customize the format
: of tangled comments.

** org-babel-groovy-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-groovy-command
   :END:

- *Type:* string
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-groovy.el;hb=HEAD][ob-groovy.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-groovy-command&sr=1][Find modifications in git logs]]

: Name of the command to use for executing Groovy code.
: May be either a command in the path, like groovy
: or an absolute path name, like /usr/local/bin/groovy
: parameters may be used, like groovy -v

** org-attach-method =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-method
   :END:

- *Type:* (choice (const :tag "Copy" cp)...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-method&sr=1][Find modifications in git logs]]

: The preferred method to attach a file.
: Allowed values are:
: 
: mv    rename the file to move it into the attachment directory
: cp    copy the file
: ln    create a hard link.  Note that this is not supported
:       on all systems, and then the result is not defined.
: lns   create a symbol link.  Note that this is not supported
:       on all systems, and then the result is not defined.

** org-html-table-default-attributes =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-default-attributes
   :END:

- *Type:* (plist :key-type (symbol :tag ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-default-attributes&sr=1][Find modifications in git logs]]

: Default attributes and values which will be used in table tags.
: This is a plist where attributes are symbols, starting with
: colons, and values are strings.
: 
: When exporting to HTML5, these values will be disregarded.

** org-attach-directory =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-directory
   :END:

- *Type:* directory
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-directory&sr=1][Find modifications in git logs]]

: The directory where attachments are stored.
: If this is a relative path, it will be interpreted relative to the directory
: where the Org file lives.

** org-descriptive-links =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-descriptive-links
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-descriptive-links&sr=1][Find modifications in git logs]]

: Non-nil means Org will display descriptive links.
: E.g. [[https://orgmode.org][Org website]] will be displayed as
: "Org Website", hiding the link itself and just displaying its
: description.  When set to nil, Org will display the full links
: literally.
: 
: You can interactively set the value of this variable by calling
: `org-toggle-link-display' or from the menu Org>Hyperlinks menu.

** org-plantuml-jar-path =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-plantuml-jar-path
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-plantuml.el;hb=HEAD][ob-plantuml.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-plantuml-jar-path&sr=1][Find modifications in git logs]]

: Path to the plantuml.jar file.

** org-indent-boundary-char =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-boundary-char
   :END:

- *Type:* character
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-indent.el;hb=HEAD][org-indent.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-boundary-char&sr=1][Find modifications in git logs]]

: The end of the virtual indentation strings, a single-character string.
: The default is just a space, but if you wish, you can use "|" or so.
: This can be useful on a terminal window - under a windowing system,
: it may be prettier to customize the `org-indent' face.

** org-modules =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-modules
   :END:

- *Type:* (set :greedy t (const :tag "  ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-modules&sr=1][Find modifications in git logs]]

: Modules that should always be loaded together with org.el.
: 
: If a description starts with <C>, the file is not part of Emacs
: and loading it will require that you have downloaded and properly
: installed the Org mode distribution.
: 
: You can also use this system to load external packages (i.e. neither Org
: core modules, nor modules from the CONTRIB directory).  Just add symbols
: to the end of the list.  If the package is called org-xyz.el, then you need
: to add the symbol `xyz', and the package must have a call to:
: 
:    (provide \='org-xyz)
: 
: For export specific modules, see also `org-export-backends'.

** org-default-priority =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-default-priority
   :END:

- *Type:* character
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-default-priority&sr=1][Find modifications in git logs]]

: The default priority of TODO items.
: This is the priority an item gets if no explicit priority is given.
: When starting to cycle on an empty priority the first step in the cycle
: depends on `org-priority-start-cycle-with-default'.  The resulting first
: step priority must not exceed the range from `org-highest-priority' to
: `org-lowest-priority' which means that `org-default-priority' has to be
: in this range exclusive or inclusive the range boundaries.  Else the
: first step refuses to set the default and the second will fall back
: to (depending on the command used) the highest or lowest priority.

** org-icalendar-date-time-format =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-date-time-format
   :END:

- *Type:* (choice (const :tag "Local tim...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-date-time-format&sr=1][Find modifications in git logs]]

: Format-string for exporting icalendar DATE-TIME.
: 
: See `format-time-string' for a full documentation.  The only
: difference is that `org-icalendar-timezone' is used for %Z.
: 
: Interesting value are:
:  - ":%Y%m%dT%H%M%S" for local time
:  - ";TZID=%Z:%Y%m%dT%H%M%S" for local time with explicit timezone
:  - ":%Y%m%dT%H%M%SZ" for time expressed in Universal Time

** org-beamer-outline-frame-options =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-outline-frame-options
   :END:

- *Type:* (string :tag "Outline frame op...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-outline-frame-options&sr=1][Find modifications in git logs]]

: Outline frame options appended after \begin{frame}.
: You might want to put e.g. "allowframebreaks=0.9" here.

** org-html-link-use-abs-url =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-link-use-abs-url
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-link-use-abs-url&sr=1][Find modifications in git logs]]

: Should we prepend relative links with HTML_LINK_HOME?

** org-catch-invisible-edits =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-catch-invisible-edits
   :END:

- *Type:* (choice (const :tag "Do not ch...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-catch-invisible-edits&sr=1][Find modifications in git logs]]

: Check if in invisible region before inserting or deleting a character.
: Valid values are:
: 
: nil              Do not check, so just do invisible edits.
: error            Throw an error and do nothing.
: show             Make point visible, and do the requested edit.
: show-and-error   Make point visible, then throw an error and abort the edit.
: smart            Make point visible, and do insertion/deletion if it is
:                  adjacent to visible text and the change feels predictable.
:                  Never delete a previously invisible character or add in the
:                  middle or right after an invisible region.  Basically, this
:                  allows insertion and backward-delete right before ellipses.
:                  FIXME: maybe in this case we should not even show?

** org-agenda-view-columns-initially =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-view-columns-initially
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-view-columns-initially&sr=1][Find modifications in git logs]]

: When non-nil, switch to columns view right after creating the agenda.

** org-fontify-emphasized-text =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-fontify-emphasized-text
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-fontify-emphasized-text&sr=1][Find modifications in git logs]]

: Non-nil means fontify *bold*, /italic/ and _underlined_ text.
: Changing this variable requires a restart of Emacs to take effect.

** org-confirm-shell-link-not-regexp =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-confirm-shell-link-not-regexp
   :END:

- *Type:* regexp
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-confirm-shell-link-not-regexp&sr=1][Find modifications in git logs]]

: A regexp to skip confirmation for shell links.

** org-id-extra-files =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-extra-files
   :END:

- *Type:* (choice (symbol :tag "Variable...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-extra-files&sr=1][Find modifications in git logs]]

: Files to be searched for IDs, besides the agenda files.
: When Org reparses files to remake the list of files and IDs it is tracking,
: it will normally scan the agenda files, the archives related to agenda files,
: any files that are listed as ID containing in the current register, and
: any Org file currently visited by Emacs.
: You can list additional files here.
: This variable is only relevant when `org-id-track-globally' is set.

** org-export-initial-scope =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-initial-scope
   :END:

- *Type:* (choice (const :tag "Export cu...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-initial-scope&sr=1][Find modifications in git logs]]

: The initial scope when exporting with `org-export-dispatch'.
: This variable can be either set to `buffer' or `subtree'.

** org-use-speed-commands =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-use-speed-commands
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-use-speed-commands&sr=1][Find modifications in git logs]]

: Non-nil means activate single letter commands at beginning of a headline.
: This may also be a function to test for appropriate locations where speed
: commands should be active.
: 
: For example, to activate speed commands when the point is on any
: star at the beginning of the headline, you can do this:
: 
:   (setq org-use-speed-commands
:       (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))

** org-agenda-skip-comment-trees =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-skip-comment-trees
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-skip-comment-trees&sr=1][Find modifications in git logs]]

: Non-nil means skip trees that start with the COMMENT keyword.
: When nil, these trees are also scanned by agenda commands.

** org-latex-default-packages-alist =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-default-packages-alist
   :END:

- *Type:* (repeat (choice (list :tag "op...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-default-packages-alist&sr=1][Find modifications in git logs]]

: Alist of default packages to be inserted in the header.
: 
: Change this only if one of the packages here causes an
: incompatibility with another package you are using.
: 
: The packages in this list are needed by one part or another of
: Org mode to function properly:
: 
: - inputenc, fontenc:  for basic font and character selection
: - graphicx: for including images
: - grffile: allow periods and spaces in graphics file names
: - longtable: For multipage tables
: - wrapfig: for figure placement
: - rotating: for sideways figures and tables
: - ulem: for underline and strike-through
: - amsmath: for subscript and superscript and math environments
: - textcomp, amssymb: for various symbols used
:   for interpreting the entities in `org-entities'.  You can skip
:   some of these packages if you don't use any of their symbols.
: - capt-of: for captions outside of floats
: - hyperref: for cross references
: 
: Therefore you should not modify this variable unless you know
: what you are doing.  The one reason to change it anyway is that
: you might be loading some other package that conflicts with one
: of the default packages.  Each element is either a cell or
: a string.
: 
: A cell is of the format
: 
:   ("options" "package" SNIPPET-FLAG COMPILERS)
: 
: If SNIPPET-FLAG is non-nil, the package also needs to be included
: when compiling LaTeX snippets into images for inclusion into
: non-LaTeX output.  COMPILERS is a list of compilers that should
: include the package, see `org-latex-compiler'.  If the document
: compiler is not in the list, and the list is non-nil, the package
: will not be inserted in the final document.
: 
: A string will be inserted as-is in the header of the document.

** org-export-with-email =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-email
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-email&sr=1][Find modifications in git logs]]

: Non-nil means insert author email into the exported file.
: This option can also be set with the OPTIONS keyword,
: e.g. "email:t".

** org-rss-extension ="xml"=
   :PROPERTIES:
   :CUSTOM_ID: org-rss-extension
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-rss.el;hb=HEAD][ox-rss.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-rss-extension&sr=1][Find modifications in git logs]]

: File extension for the RSS 2.0 feed.

** org-bibtex-export-arbitrary-fields =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-bibtex-export-arbitrary-fields
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-bibtex.el;hb=HEAD][org-bibtex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-bibtex-export-arbitrary-fields&sr=1][Find modifications in git logs]]

: When converting to bibtex allow fields not defined in `org-bibtex-fields'.
: This only has effect if `org-bibtex-prefix' is defined, so as to
: ensure that other org-properties, such as CATEGORY or LOGGING are
: not placed in the exported bibtex entry.

** org-agenda-persistent-marks =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-persistent-marks
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-persistent-marks&sr=1][Find modifications in git logs]]

: Non-nil means marked items will stay marked after a bulk action.
: You can toggle this interactively by typing `p' when prompted for a
: bulk action.

** org-latex-inputenc-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-inputenc-alist
   :END:

- *Type:* (repeat (cons (string :tag "De...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-inputenc-alist&sr=1][Find modifications in git logs]]

: Alist of inputenc coding system names, and what should really be used.
: For example, adding an entry
: 
:       ("utf8" . "utf8x")
: 
: will cause \usepackage[utf8x]{inputenc} to be used for buffers that
: are written as utf8 files.

** org-scheduled-past-days =10000=
   :PROPERTIES:
   :CUSTOM_ID: org-scheduled-past-days
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-scheduled-past-days&sr=1][Find modifications in git logs]]

: Number of days to continue listing scheduled items not marked DONE.
: When an item is scheduled on a date, it shows up in the agenda on
: this day and will be listed until it is marked done or for the
: number of days given here.

** org-attach-annex-auto-get =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-annex-auto-get
   :END:

- *Type:* (choice (const :tag "confirm w...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-annex-auto-get&sr=1][Find modifications in git logs]]

: Confirmation preference for automatically getting annex files.
: If \='ask, prompt using `y-or-n-p'.  If t, always get.  If nil, never get.

** org-format-latex-options =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-format-latex-options
   :END:

- *Type:* plist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-format-latex-options&sr=1][Find modifications in git logs]]

: Options for creating images from LaTeX fragments.
: This is a property list with the following properties:
: :foreground  the foreground color for images embedded in Emacs, e.g. "Black".
:              `default' means use the foreground of the default face.
:              `auto' means use the foreground from the text face.
: :background  the background color, or "Transparent".
:              `default' means use the background of the default face.
:              `auto' means use the background from the text face.
: :scale       a scaling factor for the size of the images, to get more pixels
: :html-foreground, :html-background, :html-scale
:              the same numbers for HTML export.
: :matchers    a list indicating which matchers should be used to
:              find LaTeX fragments.  Valid members of this list are:
:              "begin" find environments
:              "$1"    find single characters surrounded by $.$
:              "$"     find math expressions surrounded by $...$
:              "$$"    find math expressions surrounded by $$....$$
:              "\("    find math expressions surrounded by \(...\)
:              "\=\["    find math expressions surrounded by \=\[...\]

** org-babel-lisp-eval-fn =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lisp-eval-fn
   :END:

- *Type:* function
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lisp.el;hb=HEAD][ob-lisp.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lisp-eval-fn&sr=1][Find modifications in git logs]]

: The function to be called to evaluate code on the Lisp side.
: Valid values include `slime-eval' and `sly-eval'.

** org-latex-compiler-file-string =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-compiler-file-string
   :END:

- *Type:* (choice (const :tag "Comment" ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-compiler-file-string&sr=1][Find modifications in git logs]]

: LaTeX compiler format-string.
: See also `org-latex-compiler'.

** org-texinfo-logfiles-extensions =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-logfiles-extensions
   :END:

- *Type:* (repeat (string :tag "Extensio...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-logfiles-extensions&sr=1][Find modifications in git logs]]

: The list of file extensions to consider as Texinfo logfiles.
: The logfiles will be remove if `org-texinfo-remove-logfiles' is
: non-nil.

** org-export-global-macros =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-global-macros
   :END:

- *Type:* (repeat (cons (string :tag "Na...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-global-macros&sr=1][Find modifications in git logs]]

: Alist between macro names and expansion templates.
: 
: This variable defines macro expansion templates available
: globally.  Associations follow the pattern
: 
:   (NAME . TEMPLATE)
: 
: where NAME is a string beginning with a letter and consisting of
: alphanumeric characters only.
: 
: TEMPLATE is the string to which the macro is going to be
: expanded.  Inside, "$1", "$2"... are place-holders for
: macro's arguments.  Moreover, if the template starts with
: "(eval", it will be parsed as an Elisp expression and evaluated
: accordingly.

** org-ascii-table-widen-columns =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-table-widen-columns
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-table-widen-columns&sr=1][Find modifications in git logs]]

: Non-nil means widen narrowed columns for export.
: When nil, narrowed columns will look in ASCII export just like in
: Org mode, i.e. with "=>" as ellipsis.

** org-agenda-confirm-kill =1=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-confirm-kill
   :END:

- *Type:* (choice (const :tag "Never" ni...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-confirm-kill&sr=1][Find modifications in git logs]]

: When set, remote killing from the agenda buffer needs confirmation.
: When t, a confirmation is always needed.  When a number N, confirmation is
: only needed when the text to be killed contains more than N non-white lines.

** org-habit-today-glyph =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-today-glyph
   :END:

- *Type:* character
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-today-glyph&sr=1][Find modifications in git logs]]

: Glyph character used to identify today.

** org-mobile-files =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-mobile-files
   :END:

- *Type:* (list :greedy t (option (const...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-mobile.el;hb=HEAD][org-mobile.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mobile-files&sr=1][Find modifications in git logs]]

: Files to be staged for MobileOrg.
: This is basically a list of files and directories.  Files will be staged
: directly.  Directories will be search for files with the extension `.org'.
: In addition to this, the list may also contain the following symbols:
: 
: org-agenda-files
:      This means include the complete, unrestricted list of files given in
:      the variable `org-agenda-files'.
: org-agenda-text-search-extra-files
:      Include the files given in the variable
:      `org-agenda-text-search-extra-files'

** org-babel-java-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-java-command
   :END:

- *Type:* string
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-java.el;hb=HEAD][ob-java.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-java-command&sr=1][Find modifications in git logs]]

: Name of the java command.
: May be either a command in the path, like java
: or an absolute path name, like /usr/local/bin/java
: parameters may be used, like java -verbose

** org-tab-follows-link =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-tab-follows-link
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tab-follows-link&sr=1][Find modifications in git logs]]

: Non-nil means on links TAB will follow the link.
: Needs to be set before org.el is loaded.
: This really should not be used, it does not make sense, and the
: implementation is bad.

** org-enable-priority-commands =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-enable-priority-commands
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-enable-priority-commands&sr=1][Find modifications in git logs]]

: Non-nil means priority commands are active.
: When nil, these commands will be disabled, so that you never accidentally
: set a priority.

** org-babel-java-compiler =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-java-compiler
   :END:

- *Type:* string
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-java.el;hb=HEAD][ob-java.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-java-compiler&sr=1][Find modifications in git logs]]

: Name of the java compiler.
: May be either a command in the path, like javac
: or an absolute path name, like /usr/local/bin/javac
: parameters may be used, like javac -verbose

** org-indent-indentation-per-level =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-indent-indentation-per-level
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-indent.el;hb=HEAD][org-indent.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-indent-indentation-per-level&sr=1][Find modifications in git logs]]

: Indentation per level in number of characters.

** org-odt-with-latex =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-with-latex
   :END:

- *Type:* (choice (const :tag "Do not pr...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-with-latex&sr=1][Find modifications in git logs]]

: Non-nil means process LaTeX math snippets.
: 
: When set, the exporter will process LaTeX environments and
: fragments.
: 
: This option can also be set with the +OPTIONS line,
: e.g. "tex:mathjax".  Allowed values are:
: 
: nil            Ignore math snippets.
: `verbatim'     Keep everything in verbatim
: `dvipng'       Process the LaTeX fragments to images.  This will also
:                include processing of non-math environments.
: `imagemagick'  Convert the LaTeX fragments to pdf files and use
:                imagemagick to convert pdf files to png files.
: `mathjax'      Do MathJax preprocessing and arrange for MathJax.js to
:                be loaded.
: t              Synonym for `mathjax'.

** org-habit-show-habits =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-show-habits
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-show-habits&sr=1][Find modifications in git logs]]

: If non-nil, show habits in agenda buffers.

** org-agenda-weekend-days =(quote (6 0))=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-weekend-days
   :END:

- *Type:* (set :greedy t (const :tag "Mo...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-weekend-days&sr=1][Find modifications in git logs]]

: Which days are weekend?
: These days get the special face `org-agenda-date-weekend' in the agenda
: and timeline buffers.

** org-habit-preceding-days =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-habit-preceding-days
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-habit.el;hb=HEAD][org-habit.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-habit-preceding-days&sr=1][Find modifications in git logs]]

: Number of days before today to appear in consistency graphs.

** org-texinfo-coding-system =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-coding-system
   :END:

- *Type:* coding-system
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-coding-system&sr=1][Find modifications in git logs]]

: Default document encoding for Texinfo output.
: 
: If nil it will default to `buffer-file-coding-system'.

** org-yank-adjusted-subtrees =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-yank-adjusted-subtrees
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-yank-adjusted-subtrees&sr=1][Find modifications in git logs]]

: Non-nil means when yanking subtrees, adjust the level.
: With this setting, `org-paste-subtree' is used to insert the subtree, see
: this function for details.

** org-id-locations-file =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-locations-file
   :END:

- *Type:* file
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-locations-file&sr=1][Find modifications in git logs]]

: The file for remembering in which file an ID was defined.
: This variable is only relevant when `org-id-track-globally' is set.

** org-agenda-deadline-leaders =(quote ("Deadline:  " "In %3d ...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-deadline-leaders
   :END:

- *Type:* (list (string :tag "Deadline t...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-deadline-leaders&sr=1][Find modifications in git logs]]

: Text preceding deadline items in the agenda view.
: This is a list with three strings.  The first applies when the item has its
: deadline on the current day.  The second applies when the deadline is in the
: future, the third one when it is in the past.  The strings may contain %d
: to capture the number of days.

** org-clock-goto-before-context =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-goto-before-context
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-goto-before-context&sr=1][Find modifications in git logs]]

: Number of lines of context to display before currently clocked-in entry.
: This applies when using `org-clock-goto'.

** org-html-head-extra =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-head-extra
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-head-extra&sr=1][Find modifications in git logs]]

: More head information to add in the HTML output.
: 
: You can set this on a per-file basis using #+HTML_HEAD_EXTRA:,
: or for publication projects using the :html-head-extra property.

** org-babel-latex-htlatex =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-latex-htlatex
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-latex.el;hb=HEAD][ob-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-latex-htlatex&sr=1][Find modifications in git logs]]

: The htlatex command to enable conversion of latex to SVG or HTML.

** org-latex-table-scientific-notation =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-table-scientific-notation
   :END:

- *Type:* (choice (string :tag "Format s...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-table-scientific-notation&sr=1][Find modifications in git logs]]

: Format string to display numbers in scientific notation.
: The format should have "%s" twice, for mantissa and exponent
: (i.e., "%s\\times10^{%s}").
: 
: When nil, no transformation is made.

** org-texinfo-format-inlinetask-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-format-inlinetask-function
   :END:

- *Type:* function
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-format-inlinetask-function&sr=1][Find modifications in git logs]]

: Function called to format an inlinetask in Texinfo code.
: 
: The function must accept six parameters:
:   TODO      the todo keyword, as a string
:   TODO-TYPE the todo type, a symbol among `todo', `done' and nil.
:   PRIORITY  the inlinetask priority, as a string
:   NAME      the inlinetask name, as a string.
:   TAGS      the inlinetask tags, as a list of strings.
:   CONTENTS  the contents of the inlinetask, as a string.
: 
: The function should return the string to be exported.

** org-koma-letter-place =""=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-place
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-place&sr=1][Find modifications in git logs]]

: Place from which the letter is sent, as a string.
: This option can also be set with the PLACE keyword.

** org-sparse-tree-open-archived-trees =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-sparse-tree-open-archived-trees
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-sparse-tree-open-archived-trees&sr=1][Find modifications in git logs]]

: Non-nil means sparse tree construction shows matches in archived trees.
: When nil, matches in these trees are highlighted, but the trees are kept in
: collapsed state.

** org-attach-commit =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-commit
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-commit&sr=1][Find modifications in git logs]]

: If non-nil commit attachments with git.
: This is only done if the Org file is in a git repository.

** org-todo-keyword-faces =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-todo-keyword-faces
   :END:

- *Type:* (repeat (cons (string :tag "Ke...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-todo-keyword-faces&sr=1][Find modifications in git logs]]

: Faces for specific TODO keywords.
: This is a list of cons cells, with TODO keywords in the car
: and faces in the cdr.  The face can be a symbol, a color
: as a string (in which case the rest is inherited from the `org-todo' face),
: or a property list of attributes, like
:    (:foreground "blue" :weight bold :underline t).
: If it is a color string, the variable `org-faces-easy-properties'
: determines if it is a foreground or a background color.

** org-agenda-search-view-force-full-words =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-search-view-force-full-words
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-search-view-force-full-words&sr=1][Find modifications in git logs]]

: Non-nil means, search words must be matches as complete words.
: When nil, they may also match part of a word.

** org-icalendar-timezone =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-icalendar-timezone
   :END:

- *Type:* (choice (const :tag "Unspecifi...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-icalendar.el;hb=HEAD][ox-icalendar.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-icalendar-timezone&sr=1][Find modifications in git logs]]

: The time zone string for iCalendar export.
: When nil or the empty string, use output
: from (current-time-zone).

** org-open-directory-means-index-dot-org =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-open-directory-means-index-dot-org
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-open-directory-means-index-dot-org&sr=1][Find modifications in git logs]]

: Non-nil means a link to a directory really means to index.org.
: When nil, following a directory link will run dired or open a finder/explorer
: window on that directory.

** org-footnote-fill-after-inline-note-extraction =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-fill-after-inline-note-extraction
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-fill-after-inline-note-extraction&sr=1][Find modifications in git logs]]

: Non-nil means fill paragraphs after extracting footnotes.
: When extracting inline footnotes, the lengths of lines can change a lot.
: When this option is set, paragraphs from which an inline footnote has been
: extracted will be filled again.

** org-calendar-insert-diary-entry-key =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-calendar-insert-diary-entry-key
   :END:

- *Type:* sexp
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-calendar-insert-diary-entry-key&sr=1][Find modifications in git logs]]

: The key to be installed in `calendar-mode-map' for adding diary entries.
: This option is irrelevant until `org-agenda-diary-file' has been configured
: to point to an Org file.  When that is the case, the command
: `org-agenda-diary-entry' will be bound to the key given here, by default
: `i'.  In the calendar, `i' normally adds entries to `diary-file'.  So
: if you want to continue doing this, you need to change this to a different
: key.

** org-beamer-frame-level =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-frame-level
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-frame-level&sr=1][Find modifications in git logs]]

: The level at which headlines become frames.
: 
: Headlines at a lower level will be translated into a sectioning
: structure.  At a higher level, they will be translated into
: blocks.
: 
: If a headline with a "BEAMER_env" property set to "frame" is
: found within a tree, its level locally overrides this number.
: 
: This variable has no effect on headlines with the "BEAMER_env"
: property set to either "ignoreheading", "appendix", or
: "note", which will respectively, be invisible, become an
: appendix or a note.
: 
: This integer is relative to the minimal level of a headline
: within the parse tree, defined as 1.

** org-latex-prefer-user-labels =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-prefer-user-labels
   :END:

- *Type:* boolean
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-prefer-user-labels&sr=1][Find modifications in git logs]]

: Use user-provided labels instead of internal ones when non-nil.
: 
: When this variable is non-nil, Org will use the value of
: CUSTOM_ID property, NAME keyword or Org target as the key for the
: \label commands generated.
: 
: By default, Org generates its own internal labels during LaTeX
: export.  This process ensures that the \label keys are unique
: and valid, but it means the keys are not available in advance of
: the export process.
: 
: Setting this variable gives you control over how Org generates
: labels during LaTeX export, so that you may know their keys in
: advance.  One reason to do this is that it allows you to refer to
: various elements using a single label both in Org's link syntax
: and in embedded LaTeX code.
: 
: For example, when this variable is non-nil, a headline like this:
: 
:   ** Some section
:      :PROPERTIES:
:      :CUSTOM_ID: sec:foo
:      :END:
:   This is section [[#sec:foo]].
:   #+BEGIN_EXPORT latex
:   And this is still section \ref{sec:foo}.
:   #+END_EXPORT
: 
: will be exported to LaTeX as:
: 
:   \subsection{Some section}
:   \label{sec:foo}
:   This is section \ref{sec:foo}.
:   And this is still section \ref{sec:foo}.
: 
: Note, however, that setting this variable introduces a limitation
: on the possible values for CUSTOM_ID and NAME.  When this
: variable is non-nil, Org passes their value to \label unchanged.
: You are responsible for ensuring that the value is a valid LaTeX
: \label key, and that no other \label commands with the same key
: appear elsewhere in your document.  (Keys may contain letters,
: numbers, and the following punctuation: '_' '.'  '-' ':'.)  There
: are no such limitations on CUSTOM_ID and NAME when this variable
: is nil.
: 
: For headlines that do not define the CUSTOM_ID property or
: elements without a NAME, Org will continue to use its default
: labeling scheme to generate labels and resolve links into proper
: references.

** org-html-klipse-css =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-klipse-css
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-klipse-css&sr=1][Find modifications in git logs]]

: Location of the codemirror CSS file for use with klipse.

** org-export-with-tasks =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-tasks
   :END:

- *Type:* (choice (const :tag "All tasks...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-tasks&sr=1][Find modifications in git logs]]

: Non-nil means include TODO items for export.
: 
: This may have the following values:
: t                    include tasks independent of state.
: `todo'               include only tasks that are not yet done.
: `done'               include only tasks that are already done.
: nil                  ignore all tasks.
: list of keywords     include tasks with these keywords.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "tasks:nil".

** org-mouse-1-follows-link =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-mouse-1-follows-link
   :END:

- *Type:* (choice (const :tag "A double ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-mouse-1-follows-link&sr=1][Find modifications in git logs]]

: Non-nil means mouse-1 on a link will follow the link.
: A longer mouse click will still set point.  Needs to be set
: before org.el is loaded.

** org-file-apps =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-file-apps
   :END:

- *Type:* (repeat (cons (choice :value "...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-file-apps&sr=1][Find modifications in git logs]]

: External applications for opening `file:path' items in a document.
: \<org-mode-map>
: Org mode uses system defaults for different file types, but
: you can use this variable to set the application for a given file
: extension.  The entries in this list are cons cells where the car identifies
: files and the cdr the corresponding command.
: 
: Possible values for the file identifier are:
: 
:  "string"    A string as a file identifier can be interpreted in different
:                ways, depending on its contents:
: 
:                - Alphanumeric characters only:
:                  Match links with this file extension.
:                  Example: ("pdf" . "evince %s")
:                           to open PDFs with evince.
: 
:                - Regular expression: Match links where the
:                  filename matches the regexp.  If you want to
:                  use groups here, use shy groups.
: 
:                  Example: ("\\.x?html\\\='" . "firefox %s")
:                           ("\\(?:xhtml\\|html\\)\\\='" . "firefox %s")
:                           to open *.html and *.xhtml with firefox.
: 
:                - Regular expression which contains (non-shy) groups:
:                  Match links where the whole link, including "::", and
:                  anything after that, matches the regexp.
:                  In a custom command string, %1, %2, etc. are replaced with
:                  the parts of the link that were matched by the groups.
:                  For backwards compatibility, if a command string is given
:                  that does not use any of the group matches, this case is
:                  handled identically to the second one (i.e. match against
:                  file name only).
:                  In a custom function, you can access the group matches with
:                  (match-string n link).
: 
:                  Example: ("\\.pdf::\\(\\d+\\)\\\='" . "evince -p %1 %s")
:                      to open [[file:document.pdf::5]] with evince at page 5.
: 
:  `directory'   Matches a directory
:  `remote'      Matches a remote file, accessible through tramp or efs.
:                Remote files most likely should be visited through Emacs
:                because external applications cannot handle such paths.
: `auto-mode'    Matches files that are matched by any entry in `auto-mode-alist',
:                so all files Emacs knows how to handle.  Using this with
:                command `emacs' will open most files in Emacs.  Beware that this
:                will also open html files inside Emacs, unless you add
:                ("html" . default) to the list as well.
:  `system'      The system command to open files, like `open' on Windows
:                and macOS, and mailcap under GNU/Linux.  This is the command
:                that will be selected if you call `org-open-at-point' with a
:                double prefix argument (`\[universal-argument] \[universal-argument] \[org-open-at-point]').
:  t             Default for files not matched by any of the other options.
: 
: Possible values for the command are:
: 
:  `emacs'       The file will be visited by the current Emacs process.
:  `default'     Use the default application for this file type, which is the
:                association for t in the list, most likely in the system-specific
:                part.  This can be used to overrule an unwanted setting in the
:                system-specific variable.
:  `system'      Use the system command for opening files, like "open".
:                This command is specified by the entry whose car is `system'.
:                Most likely, the system-specific version of this variable
:                does define this command, but you can overrule/replace it
:                here.
: `mailcap'      Use command specified in the mailcaps.
:  string        A command to be executed by a shell; %s will be replaced
:                by the path to the file.
:  function      A Lisp function, which will be called with two arguments:
:                the file path and the original link string, without the
:                "file:" prefix.
: 
: For more examples, see the system specific constants
: `org-file-apps-defaults-macosx'
: `org-file-apps-defaults-windowsnt'
: `org-file-apps-defaults-gnu'.

** org-level-color-stars-only =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-level-color-stars-only
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-level-color-stars-only&sr=1][Find modifications in git logs]]

: Non-nil means fontify only the stars in each headline.
: When nil, the entire headline is fontified.
: Changing it requires restart of `font-lock-mode' to become effective
: also in regions already fontified.

** org-agenda-use-tag-inheritance =(quote (todo search timeline a...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-use-tag-inheritance
   :END:

- *Type:* (choice (const :tag "Use tag i...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-use-tag-inheritance&sr=1][Find modifications in git logs]]

: List of agenda view types where to use tag inheritance.
: 
: In tags/tags-todo/tags-tree agenda views, tag inheritance is
: controlled by `org-use-tag-inheritance'.  In other agenda types,
: `org-use-tag-inheritance' is not used for the selection of the
: agenda entries.  Still, you may want the agenda to be aware of
: the inherited tags anyway, e.g. for later tag filtering.
: 
: Allowed value are `todo', `search', `timeline' and `agenda'.
: 
: This variable has no effect if `org-agenda-show-inherited-tags'
: is set to `always'.  In that case, the agenda is aware of those
: tags.
: 
: The default value sets tags in every agenda type.  Setting this
: option to nil will speed up non-tags agenda view a lot.

** org-extend-today-until =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-extend-today-until
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-extend-today-until&sr=1][Find modifications in git logs]]

: The hour when your day really ends.  Must be an integer.
: This has influence for the following applications:
: - When switching the agenda to "today".  It it is still earlier than
:   the time given here, the day recognized as TODAY is actually yesterday.
: - When a date is read from the user and it is still before the time given
:   here, the current date and time will be assumed to be yesterday, 23:59.
:   Also, timestamps inserted in capture templates follow this rule.
: 
: IMPORTANT:  This is a feature whose implementation is and likely will
: remain incomplete.  Really, it is only here because past midnight seems to
: be the favorite working time of John Wiegley :-)

** org-outline-path-complete-in-steps =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-outline-path-complete-in-steps
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-outline-path-complete-in-steps&sr=1][Find modifications in git logs]]

: Non-nil means complete the outline path in hierarchical steps.
: When Org uses the refile interface to select an outline path (see
: `org-refile-use-outline-path'), the completion of the path can be
: done in a single go, or it can be done in steps down the headline
: hierarchy.  Going in steps is probably the best if you do not use
: a special completion package like `ido' or `icicles'.  However,
: when using these packages, going in one step can be very fast,
: while still showing the whole path to the entry.

** org-odt-content-template-file =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-content-template-file
   :END:

- *Type:* (choice (const nil) (file))
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-content-template-file&sr=1][Find modifications in git logs]]

: Template file for "content.xml".
: The exporter embeds the exported content just before
: "</office:text>" element.
: 
: If unspecified, the file named "OrgOdtContentTemplate.xml"
: under `org-odt-styles-dir' is used.

** org-log-repeat =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-log-repeat
   :END:

- *Type:* (choice (const :tag "Don't for...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-log-repeat&sr=1][Find modifications in git logs]]

: Non-nil means record moving through the DONE state when triggering repeat.
: An auto-repeating task is immediately switched back to TODO when
: marked DONE.  If you are not logging state changes (by adding "@"
: or "!" to the TODO keyword definition), or set `org-log-done' to
: record a closing note, there will be no record of the task moving
: through DONE.  This variable forces taking a note anyway.
: 
: nil     Don't force a record
: time    Record a time stamp
: note    Prompt for a note and add it with template `org-log-note-headings'
: 
: This option can also be set with on a per-file-basis with
: 
:    #+STARTUP: nologrepeat
:    #+STARTUP: logrepeat
:    #+STARTUP: lognoterepeat
: 
: You can have local logging settings for a subtree by setting the LOGGING
: property to one or more of these keywords.

** org-html-table-row-close-tag =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-table-row-close-tag
   :END:

- *Type:* (choice :tag "Closing tag" (st...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-table-row-close-tag&sr=1][Find modifications in git logs]]

: The closing tag for table rows.
: This is customizable so that alignment options can be specified.
: Instead of strings, this can be a Lisp function that will be
: evaluated for each row in order to construct the table row tags.
: 
: See documentation of `org-html-table-row-open-tag'.

** org-latex-image-default-option =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-image-default-option
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-image-default-option&sr=1][Find modifications in git logs]]

: Default option for images.

** org-latex-format-drawer-function =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-format-drawer-function
   :END:

- *Type:* function
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-format-drawer-function&sr=1][Find modifications in git logs]]

: Function called to format a drawer in LaTeX code.
: 
: The function must accept two parameters:
:   NAME      the drawer name, like "LOGBOOK"
:   CONTENTS  the contents of the drawer.
: 
: The function should return the string to be exported.
: 
: The default function simply returns the value of CONTENTS.

** org-agenda-with-colors =t=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-with-colors
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-with-colors&sr=1][Find modifications in git logs]]

: Non-nil means use colors in agenda views.

** org-agenda-start-with-clockreport-mode =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-start-with-clockreport-mode
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-start-with-clockreport-mode&sr=1][Find modifications in git logs]]

: The initial value of clockreport-mode in a newly created agenda window.

** org-self-insert-cluster-for-undo =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-self-insert-cluster-for-undo
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-self-insert-cluster-for-undo&sr=1][Find modifications in git logs]]

: Non-nil means cluster self-insert commands for undo when possible.
: If this is set, then, like in the Emacs command loop, 20 consecutive
: characters will be undone together.
: This is configurable, because there is some impact on typing performance.

** org-edit-src-persistent-message =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-edit-src-persistent-message
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-src.el;hb=HEAD][org-src.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-edit-src-persistent-message&sr=1][Find modifications in git logs]]

: Non-nil means show persistent exit help message while editing src examples.
: The message is shown in the header-line, which will be created in the
: first line of the window showing the editing buffer.

** org-protocol-data-separator =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-protocol-data-separator
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-protocol.el;hb=HEAD][org-protocol.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-protocol-data-separator&sr=1][Find modifications in git logs]]

: The default data separator to use.
: This should be a single regexp string.

** org-agenda-add-entry-text-maxlines =0=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-add-entry-text-maxlines
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-add-entry-text-maxlines&sr=1][Find modifications in git logs]]

: Maximum number of entry text lines to be added to agenda.
: This is only relevant when `org-agenda-add-entry-text' is part of
: `org-agenda-before-write-hook', which is the default.
: When this is 0, nothing will happen.  When it is greater than 0, it
: specifies the maximum number of lines that will be added for each entry
: that is listed in the agenda view.
: 
: Note that this variable is not used during display, only when exporting
: the agenda.  For agenda display, see the variables `org-agenda-entry-text-mode'
: and `org-agenda-entry-text-maxlines'.

** org-texinfo-default-class =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-default-class
   :END:

- *Type:* (string :tag "Texinfo class")
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-default-class&sr=1][Find modifications in git logs]]

: The default Texinfo class.

** org-agenda-custom-commands-contexts =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-custom-commands-contexts
   :END:

- *Type:* (repeat (list :tag "Rule" (str...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-custom-commands-contexts&sr=1][Find modifications in git logs]]

: Alist of custom agenda keys and contextual rules.
: 
: For example, if you have a custom agenda command "p" and you
: want this command to be accessible only from plain text files,
: use this:
: 
:    \='(("p" ((in-file . "\\.txt\\'"))))
: 
: Here are the available contexts definitions:
: 
:       in-file: command displayed only in matching files
:       in-mode: command displayed only in matching modes
:   not-in-file: command not displayed in matching files
:   not-in-mode: command not displayed in matching modes
:     in-buffer: command displayed only in matching buffers
: not-in-buffer: command not displayed in matching buffers
:    [function]: a custom function taking no argument
: 
: If you define several checks, the agenda command will be
: accessible if there is at least one valid check.
: 
: You can also bind a key to another agenda custom command
: depending on contextual rules.
: 
:     \='(("p" "q" ((in-file . "\\.txt\\'"))))
: 
: Here it means: in .txt files, use "p" as the key for the
: agenda command otherwise associated with "q".  (The command
: originally associated with "q" is not displayed to avoid
: duplicates.)

** org-id-link-to-org-use-id =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-id-link-to-org-use-id
   :END:

- *Type:* (choice (const :tag "Create ID...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-id.el;hb=HEAD][org-id.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-id-link-to-org-use-id&sr=1][Find modifications in git logs]]

: Non-nil means storing a link to an Org file will use entry IDs.
: \<org-mode-map>
: The variable can have the following values:
: 
: t     Create an ID if needed to make a link to the current entry.
: 
: create-if-interactive
:       If `org-store-link' is called directly (interactively, as a user
:       command), do create an ID to support the link.  But when doing the
:       job for capture, only use the ID if it already exists.  The
:       purpose of this setting is to avoid proliferation of unwanted
:       IDs, just because you happen to be in an Org file when you
:       call `org-capture' that automatically and preemptively creates a
:       link.  If you do want to get an ID link in a capture template to
:       an entry not having an ID, create it first by explicitly creating
:       a link to it, using `\[org-store-link]' first.
: 
: create-if-interactive-and-no-custom-id
:       Like create-if-interactive, but do not create an ID if there is
:       a CUSTOM_ID property defined in the entry.
: 
: use-existing
:       Use existing ID, do not create one.
: 
: nil   Never use an ID to make a link, instead link using a text search for
:       the headline text.

** org-tags-match-list-sublevels =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-tags-match-list-sublevels
   :END:

- *Type:* (choice (const :tag "No, don't...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tags-match-list-sublevels&sr=1][Find modifications in git logs]]

: Non-nil means list also sublevels of headlines matching a search.
: This variable applies to tags/property searches, and also to stuck
: projects because this search is based on a tags match as well.
: 
: When set to the symbol `indented', sublevels are indented with
: leading dots.
: 
: Because of tag inheritance (see variable `org-use-tag-inheritance'),
: the sublevels of a headline matching a tag search often also match
: the same search.  Listing all of them can create very long lists.
: Setting this variable to nil causes subtrees of a match to be skipped.
: 
: This variable is semi-obsolete and probably should always be true.  It
: is better to limit inheritance to certain tags using the variables
: `org-use-tag-inheritance' and `org-tags-exclude-from-inheritance'.

** org-footnote-section =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-footnote-section
   :END:

- *Type:* (choice (string :tag "Collect ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-footnote.el;hb=HEAD][org-footnote.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-footnote-section&sr=1][Find modifications in git logs]]

: Outline heading containing footnote definitions.
: 
: This can be nil, to place footnotes locally at the end of the
: current outline node.  If can also be the name of a special
: outline heading under which footnotes should be put.
: 
: This variable defines the place where Org puts the definition
: automatically, i.e. when creating the footnote, and when sorting
: the notes.  However, by hand you may place definitions
: *anywhere*.
: 
: If this is a string, during export, all subtrees starting with
: this heading will be ignored.
: 
: If you don't use the customize interface to change this variable,
: you will need to run the following command after the change:
: 
:   `\[universal-argument] \[org-element-cache-reset]'

** org-feed-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-feed-alist
   :END:

- *Type:* (repeat (list :value ("" "http...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-feed.el;hb=HEAD][org-feed.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-feed-alist&sr=1][Find modifications in git logs]]

: Alist specifying RSS feeds that should create inputs for Org.
: Each entry in this list specified an RSS feed tat should be queried
: to create inbox items in Org.  Each entry is a list with the following items:
: 
: name         a custom name for this feed
: URL          the Feed URL
: file         the target Org file where entries should be listed, when
:              nil the target becomes the current buffer (may be an
:              indirect buffer) each time the feed update is invoked
: headline     the headline under which entries should be listed
: 
: Additional arguments can be given using keyword-value pairs.  Many of these
: specify functions that receive one or a list of "entries" as their single
: argument.  An entry is a property list that describes a feed item.  The
: property list has properties for each field in the item, for example `:title'
: for the `<title>' field and `:pubDate' for the publication date.  In addition,
: it contains the following properties:
: 
: `:item-full-text'   the full text in the <item> tag
: `:guid-permalink'   t when the guid property is a permalink
: 
: Here are the keyword-value pair allows in `org-feed-alist'.
: 
: :drawer drawer-name
:      The name of the drawer for storing feed information.  The default is
:      "FEEDSTATUS".  Using different drawers for different feeds allows
:      several feeds to target the same inbox heading.
: 
: :filter filter-function
:      A function to select interesting entries in the feed.  It gets a single
:      entry as parameter.  It should return the entry if it is relevant, or
:      nil if it is not.
: 
: :template template-string
:      The default action on new items in the feed is to add them as children
:      under the headline for the feed.  The template describes how the entry
:      should be formatted.  If not given, it defaults to
:      `org-feed-default-template'.
: 
: :formatter formatter-function
:      Instead of relying on a template, you may specify a function to format
:      the outline node to be inserted as a child.  This function gets passed
:      a property list describing a single feed item, and it should return a
:      string that is a properly formatted Org outline node of level 1.
: 
: :new-handler function
:      If adding new items as children to the outline is not what you want
:      to do with new items, define a handler function that is called with
:      a list of all new items in the feed, each one represented as a property
:      list.  The handler should do what needs to be done, and org-feed will
:      mark all items given to this handler as "handled", i.e. they will not
:      be passed to this handler again in future readings of the feed.
:      When the handler is called, point will be at the feed headline.
: 
: :changed-handler function
:      This function gets passed a list of all entries that have been
:      handled before, but are now still in the feed and have *changed*
:      since last handled (as evidenced by a different sha1 hash).
:      When the handler is called, point will be at the feed headline.
: 
: :parse-feed function
:      This function gets passed a buffer, and should return a list
:      of entries, each being a property list containing the
:      `:guid' and `:item-full-text' keys.  The default is
:      `org-feed-parse-rss-feed'; `org-feed-parse-atom-feed' is an
:      alternative.
: 
: :parse-entry function
:      This function gets passed an entry as returned by the parse-feed
:      function, and should return the entry with interesting properties added.
:      The default is `org-feed-parse-rss-entry'; `org-feed-parse-atom-entry'
:      is an alternative.

** org-ascii-inner-margin =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-inner-margin
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-inner-margin&sr=1][Find modifications in git logs]]

: Width of the inner margin, in number of characters.
: Inner margin is applied between each headline.

** org-odt-convert-capabilities =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-convert-capabilities
   :END:

- *Type:* (choice (const :tag "None" nil...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-convert-capabilities&sr=1][Find modifications in git logs]]

: Specify input and output formats of `org-odt-convert-process'.
: More correctly, specify the set of input and output formats that
: the user is actually interested in.
: 
: This variable is an alist where each element is of the
: form (DOCUMENT-CLASS INPUT-FMT-LIST OUTPUT-FMT-ALIST).
: INPUT-FMT-LIST is a list of INPUT-FMTs.  OUTPUT-FMT-ALIST is an
: alist where each element is of the form (OUTPUT-FMT
: OUTPUT-FILE-EXTENSION EXTRA-OPTIONS).
: 
: The variable is interpreted as follows:
: `org-odt-convert-process' can take any document that is in
: INPUT-FMT-LIST and produce any document that is in the
: OUTPUT-FMT-LIST.  A document converted to OUTPUT-FMT will have
: OUTPUT-FILE-EXTENSION as the file name extension.  OUTPUT-FMT
: serves dual purposes:
: - It is used for populating completion candidates during
:   `org-odt-convert' commands.
: - It is used as the value of "%f" specifier in
:   `org-odt-convert-process'.
: 
: EXTRA-OPTIONS is used as the value of "%x" specifier in
: `org-odt-convert-process'.
: 
: DOCUMENT-CLASS is used to group a set of file formats in
: INPUT-FMT-LIST in to a single class.
: 
: Note that this variable inherently captures how LibreOffice based
: converters work.  LibreOffice maps documents of various formats
: to classes like Text, Web, Spreadsheet, Presentation etc and
: allow document of a given class (irrespective of its source
: format) to be converted to any of the export formats associated
: with that class.
: 
: See default setting of this variable for an typical
: configuration.

** org-koma-letter-phone-number =""=
   :PROPERTIES:
   :CUSTOM_ID: org-koma-letter-phone-number
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-koma-letter.el;hb=HEAD][ox-koma-letter.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-koma-letter-phone-number&sr=1][Find modifications in git logs]]

: Sender's phone number, as a string.
: This option can also be set with the PHONE_NUMBER keyword.

** org-link-search-must-match-exact-headline =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-link-search-must-match-exact-headline
   :END:

- *Type:* (choice (const :tag "Use fuzzy...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-link-search-must-match-exact-headline&sr=1][Find modifications in git logs]]

: Non-nil means internal fuzzy links can only match headlines.
: 
: When nil, the a fuzzy link may point to a target or a named
: construct in the document.  When set to the special value
: `query-to-create', offer to create a new headline when none
: matched.
: 
: Spaces and statistics cookies are ignored during heading searches.

** org-html-preamble-format =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-preamble-format
   :END:

- *Type:* (repeat (list (string :tag "La...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-preamble-format&sr=1][Find modifications in git logs]]

: Alist of languages and format strings for the HTML preamble.
: 
: The first element of each list is the language code, as used for
: the LANGUAGE keyword.  See `org-export-default-language'.
: 
: The second element of each list is a format string to format the
: preamble itself.  This format string can contain these elements:
: 
:   %t stands for the title.
:   %s stands for the subtitle.
:   %a stands for the author's name.
:   %e stands for the author's email.
:   %d stands for the date.
:   %c will be replaced by `org-html-creator-string'.
:   %v will be replaced by `org-html-validation-link'.
:   %T will be replaced by the export time.
:   %C will be replaced by the last modification time.
: 
: If you need to use a "%" character, you need to escape it
: like that: "%%".
: 
: See the default value of `org-html-postamble-format' for an
: example.

** org-insert-mode-line-in-empty-file =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-insert-mode-line-in-empty-file
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-insert-mode-line-in-empty-file&sr=1][Find modifications in git logs]]

: Non-nil means insert the first line setting Org mode in empty files.
: When the function `org-mode' is called interactively in an empty file, this
: normally means that the file name does not automatically trigger Org mode.
: To ensure that the file will always be in Org mode in the future, a
: line enforcing Org mode will be inserted into the buffer, if this option
: has been set.

** org-table-formula-constants =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-table-formula-constants
   :END:

- *Type:* (repeat (cons (string :tag "na...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-table.el;hb=HEAD][org-table.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-table-formula-constants&sr=1][Find modifications in git logs]]

: Alist with constant names and values, for use in table formulas.
: The car of each element is a name of a constant, without the `$' before it.
: The cdr is the value as a string.  For example, if you'd like to use the
: speed of light in a formula, you would configure
: 
:   (setq org-table-formula-constants \='(("c" . "299792458.")))
: 
: and then use it in an equation like `$1*$c'.
: 
: Constants can also be defined on a per-file basis using a line like
: 
: #+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6

** org-texinfo-table-scientific-notation =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-texinfo-table-scientific-notation
   :END:

- *Type:* (choice (string :tag "Format s...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-texinfo.el;hb=HEAD][ox-texinfo.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-texinfo-table-scientific-notation&sr=1][Find modifications in git logs]]

: Format string to display numbers in scientific notation.
: 
: The format should have "%s" twice, for mantissa and exponent
: (i.e. "%s\\times10^{%s}").
: 
: When nil, no transformation is made.

** org-reverse-note-order =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-reverse-note-order
   :END:

- *Type:* (choice (const :tag "Reverse a...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-reverse-note-order&sr=1][Find modifications in git logs]]

: Non-nil means store new notes at the beginning of a file or entry.
: When nil, new notes will be filed to the end of a file or entry.
: This can also be a list with cons cells of regular expressions that
: are matched against file names, and values.

** org-cycle-open-archived-trees =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-cycle-open-archived-trees
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-cycle-open-archived-trees&sr=1][Find modifications in git logs]]

: Non-nil means `org-cycle' will open archived trees.
: An archived tree is a tree marked with the tag ARCHIVE.
: When nil, archived trees will stay folded.  You can still open them with
: normal outline commands like `show-all', but not with the cycling commands.

** org-goto-max-level =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-goto-max-level
   :END:

- *Type:* integer
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-goto-max-level&sr=1][Find modifications in git logs]]

: Maximum target level when running `org-goto' with refile interface.

** org-agenda-diary-file =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-diary-file
   :END:

- *Type:* (choice (const :tag "The stand...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-diary-file&sr=1][Find modifications in git logs]]

: File to which to add new entries with the `i' key in agenda and calendar.
: When this is the symbol `diary-file', the functionality in the Emacs
: calendar will be used to add entries to the `diary-file'.  But when this
: points to a file, `org-agenda-diary-entry' will be used instead.

** org-babel-js-cmd =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-js-cmd
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-js.el;hb=HEAD][ob-js.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-js-cmd&sr=1][Find modifications in git logs]]

: Name of command used to evaluate js blocks.

** org-agenda-cmp-user-defined =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-cmp-user-defined
   :END:

- *Type:* symbol
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-cmp-user-defined&sr=1][Find modifications in git logs]]

: A function to define the comparison `user-defined'.
: This function must receive two arguments, agenda entry a and b.
: If a>b, return +1.  If a<b, return -1.  If they are equal as seen by
: the user comparison, return nil.
: When this is defined, you can make `user-defined-up' and `user-defined-down'
: part of an agenda sorting strategy.

** org-ascii-links-to-notes =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-links-to-notes
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-links-to-notes&sr=1][Find modifications in git logs]]

: Non-nil means convert links to notes before the next headline.
: When nil, the link will be exported in place.  If the line
: becomes long in this way, it will be wrapped.

** org-html-extension =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-extension
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-extension&sr=1][Find modifications in git logs]]

: The extension for exported HTML files.

** org-latex-default-figure-position =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-default-figure-position
   :END:

- *Type:* string
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-default-figure-position&sr=1][Find modifications in git logs]]

: Default position for LaTeX figures.

** org-latex-inline-image-rules =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-latex-inline-image-rules
   :END:

- *Type:* (alist :key-type (string :tag ...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-latex.el;hb=HEAD][ox-latex.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-latex-inline-image-rules&sr=1][Find modifications in git logs]]

: Rules characterizing image files that can be inlined into LaTeX.
: 
: A rule consists in an association whose key is the type of link
: to consider, and value is a regexp that will be matched against
: link's path.
: 
: Note that, by default, the image extension *actually* allowed
: depend on the way the LaTeX file is processed.  When used with
: pdflatex, pdf, jpg and png images are OK.  When processing
: through dvi to Postscript, only ps and eps are allowed.  The
: default we use here encompasses both.

** org-agenda-insert-diary-strategy =(quote date-tree)=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-insert-diary-strategy
   :END:

- *Type:* (choice (const :tag "first in ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-insert-diary-strategy&sr=1][Find modifications in git logs]]

: Where in `org-agenda-diary-file' should new entries be added?
: Valid values:
: 
: date-tree         in the date tree, as first child of the date
: date-tree-last    in the date tree, as last child of the date
: top-level         as top-level entries at the end of the file.

** org-publish-list-skipped-files =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-list-skipped-files
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-list-skipped-files&sr=1][Find modifications in git logs]]

: Non-nil means show message about files *not* published.

** org-link-parameters =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-link-parameters
   :END:

- *Type:* (alist :tag "Link display para...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-link-parameters&sr=1][Find modifications in git logs]]

: An alist of properties that defines all the links in Org mode.
: The key in each association is a string of the link type.
: Subsequent optional elements make up a p-list of link properties.
: 
: :follow - A function that takes the link path as an argument.
: 
: :export - A function that takes the link path, description and
: export-backend as arguments.
: 
: :store - A function responsible for storing the link.  See the
: function `org-store-link-functions'.
: 
: :complete - A function that inserts a link with completion.  The
: function takes one optional prefix arg.
: 
: :face - A face for the link, or a function that returns a face.
: The function takes one argument which is the link path.  The
: default face is `org-link'.
: 
: :mouse-face - The mouse-face. The default is `highlight'.
: 
: :display - `full' will not fold the link in descriptive
: display.  Default is `org-link'.
: 
: :help-echo - A string or function that takes (window object position)
: as arguments and returns a string.
: 
: :keymap - A keymap that is active on the link.  The default is
: `org-mouse-map'.
: 
: :htmlize-link - A function for the htmlize-link.  Defaults
: to (list :uri "type:path")
: 
: :activate-func - A function to run at the end of font-lock
: activation.  The function must accept (link-start link-end path bracketp)
: as arguments.

** org-read-date-force-compatible-dates =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-read-date-force-compatible-dates
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-read-date-force-compatible-dates&sr=1][Find modifications in git logs]]

: Should date/time prompt force dates that are guaranteed to work in Emacs?
: 
: Depending on the system Emacs is running on, certain dates cannot
: be represented with the type used internally to represent time.
: Dates between 1970-1-1 and 2038-1-1 can always be represented
: correctly.  Some systems allow for earlier dates, some for later,
: some for both.  One way to find out it to insert any date into an
: Org buffer, putting the cursor on the year and hitting S-up and
: S-down to test the range.
: 
: When this variable is set to t, the date/time prompt will not let
: you specify dates outside the 1970-2037 range, so it is certain that
: these dates will work in whatever version of Emacs you are
: running, and also that you can move a file from one Emacs implementation
: to another.  WHenever Org is forcing the year for you, it will display
: a message and beep.
: 
: When this variable is nil, Org will check if the date is
: representable in the specific Emacs implementation you are using.
: If not, it will force a year, usually the current year, and beep
: to remind you.  Currently this setting is not recommended because
: the likelihood that you will open your Org files in an Emacs that
: has limited date range is not negligible.
: 
: A workaround for this problem is to use diary sexp dates for time
: stamps outside of this range.

** org-agenda-jump-prefer-future =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-jump-prefer-future
   :END:

- *Type:* (choice (const :tag "Use org-r...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-jump-prefer-future&sr=1][Find modifications in git logs]]

: Should the agenda jump command prefer the future for incomplete dates?
: The default is to do the same as configured in `org-read-date-prefer-future'.
: But you can also set a deviating value here.
: This may t or nil, or the symbol `org-read-date-prefer-future'.

** org-ascii-table-keep-all-vertical-lines =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-table-keep-all-vertical-lines
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-table-keep-all-vertical-lines&sr=1][Find modifications in git logs]]

: Non-nil means keep all vertical lines in ASCII tables.
: When nil, vertical lines will be removed except for those needed
: for column grouping.

** org-publish-sitemap-sort-files =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-sitemap-sort-files
   :END:

- *Type:* symbol
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-sitemap-sort-files&sr=1][Find modifications in git logs]]

: Method to sort files in site-maps.
: Possible values are `alphabetically', `chronologically',
: `anti-chronologically' and nil.
: 
: If `alphabetically', files will be sorted alphabetically.  If
: `chronologically', files will be sorted with older modification
: time first.  If `anti-chronologically', files will be sorted with
: newer modification time first.  nil won't sort files.
: 
: You can overwrite this default per project in your
: `org-publish-project-alist', using `:sitemap-sort-files'.

** org-agenda-start-with-log-mode =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-start-with-log-mode
   :END:

- *Type:* (choice (const :tag "Don't sho...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-start-with-log-mode&sr=1][Find modifications in git logs]]

: The initial value of log-mode in a newly created agenda window.
: See `org-agenda-log-mode' and `org-agenda-log-mode-items' for further
: explanations on the possible values.

** org-startup-with-latex-preview =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-startup-with-latex-preview
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-startup-with-latex-preview&sr=1][Find modifications in git logs]]

: Non-nil means preview LaTeX fragments when loading a new Org file.
: 
: This can also be configured on a per-file basis by adding one of
: the following lines anywhere in the buffer:
:    #+STARTUP: latexpreview
:    #+STARTUP: nolatexpreview

** org-agenda-query-register =111=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-query-register
   :END:

- *Type:* character
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-query-register&sr=1][Find modifications in git logs]]

: The register holding the current query string.
: The purpose of this is that if you construct a query string interactively,
: you can then use it to define a custom command.

** org-ascii-global-margin =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-global-margin
   :END:

- *Type:* integer
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-global-margin&sr=1][Find modifications in git logs]]

: Width of the left margin, in number of characters.

** org-agenda-columns-add-appointments-to-effort-sum =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-columns-add-appointments-to-effort-sum
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-columns-add-appointments-to-effort-sum&sr=1][Find modifications in git logs]]

: Non-nil means the duration of an appointment will add to day effort.
: The property to which appointment durations will be added is the one given
: in the option `org-effort-property'.  If an appointment does not have
: an end time, `org-agenda-default-appointment-duration' will be used.  If that
: is not set, an appointment without end time will not contribute to the time
: estimate.

** org-image-actual-width =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-image-actual-width
   :END:

- *Type:* (choice (const :tag "Use the i...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-image-actual-width&sr=1][Find modifications in git logs]]

: Should we use the actual width of images when inlining them?
: 
: When set to t, always use the image width.
: 
: When set to a number, use imagemagick (when available) to set
: the image's width to this value.
: 
: When set to a number in a list, try to get the width from any
: #+ATTR.* keyword if it matches a width specification like
: 
:   #+ATTR_HTML: :width 300px
: 
: and fall back on that number if none is found.
: 
: When set to nil, try to get the width from an #+ATTR.* keyword
: and fall back on the original width if none is found.
: 
: This requires Emacs >= 24.1, build with imagemagick support.

** org-odt-convert-processes =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-odt-convert-processes
   :END:

- *Type:* (choice (const :tag "None" nil...
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-odt.el;hb=HEAD][ox-odt.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-odt-convert-processes&sr=1][Find modifications in git logs]]

: Specify a list of document converters and their usage.
: The converters in this list are offered as choices while
: customizing `org-odt-convert-process'.
: 
: This variable is a list where each element is of the
: form (CONVERTER-NAME CONVERTER-CMD).  CONVERTER-NAME is the name
: of the converter.  CONVERTER-CMD is the shell command for the
: converter and can contain format specifiers.  These format
: specifiers are interpreted as below:
: 
: %i input file name in full
: %I input file name as a URL
: %f format of the output file
: %o output file name in full
: %O output file name as a URL
: %d output dir in full
: %D output dir as a URL.
: %x extra options as set in `org-odt-convert-capabilities'.

** org-tags-exclude-from-inheritance =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-tags-exclude-from-inheritance
   :END:

- *Type:* (repeat (string :tag "Tag"))
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-tags-exclude-from-inheritance&sr=1][Find modifications in git logs]]

: List of tags that should never be inherited.
: This is a way to exclude a few tags from inheritance.  For way to do
: the opposite, to actively allow inheritance for selected tags,
: see the variable `org-use-tag-inheritance'.

** org-agenda-todo-ignore-time-comparison-use-seconds =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-todo-ignore-time-comparison-use-seconds
   :END:

- *Type:* (choice (const :tag "Compare t...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-todo-ignore-time-comparison-use-seconds&sr=1][Find modifications in git logs]]

: Time unit to use when possibly ignoring an agenda item.
: 
: See the docstring of various `org-agenda-todo-ignore-*' options.
: The default is to compare time stamps using days.  An item is thus
: considered to be in the future if it is at least one day after today.
: Non-nil means to compare time stamps using seconds.  An item is then
: considered future if it has a time value later than current time.

** org-export-with-date =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-date
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-date&sr=1][Find modifications in git logs]]

: Non-nil means insert date in the exported document.
: This option can also be set with the OPTIONS keyword,
: e.g. "date:nil".

** org-export-backends =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-backends
   :END:

- *Type:* (set :greedy t (const :tag "  ...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-backends&sr=1][Find modifications in git logs]]

: List of export back-ends that should be always available.
: 
: If a description starts with <C>, the file is not part of Emacs
: and loading it will require that you have downloaded and properly
: installed the Org mode distribution.
: 
: Unlike to `org-modules', libraries in this list will not be
: loaded along with Org, but only once the export framework is
: needed.
: 
: This variable needs to be set before org.el is loaded.  If you
: need to make a change while Emacs is running, use the customize
: interface or run the following code, where VAL stands for the new
: value of the variable, after updating it:
: 
:   (progn
:     (setq org-export-registered-backends
:           (cl-remove-if-not
:            (lambda (backend)
:              (let ((name (org-export-backend-name backend)))
:                (or (memq name val)
:                    (catch \='parentp
:                      (dolist (b val)
:                        (and (org-export-derived-backend-p b name)
:                             (throw \='parentp t)))))))
:            org-export-registered-backends))
:     (let ((new-list (mapcar #\='org-export-backend-name
:                             org-export-registered-backends)))
:       (dolist (backend val)
:         (cond
:          ((not (load (format "ox-%s" backend) t t))
:           (message "Problems while trying to load export back-end \=`%s\='"
:                    backend))
:          ((not (memq backend new-list)) (push backend new-list))))
:       (set-default \='org-export-backends new-list)))
: 
: Adding a back-end to this list will also pull the back-end it
: depends on, if any.

** org-publish-project-alist =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-publish-project-alist
   :END:

- *Type:* alist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-publish.el;hb=HEAD][ox-publish.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-publish-project-alist&sr=1][Find modifications in git logs]]

: Association list to control publishing behavior.
: \<org-mode-map>
: Each element of the alist is a publishing project.  The car of
: each element is a string, uniquely identifying the project.  The
: cdr of each element is in one of the following forms:
: 
: 1. A well-formed property list with an even number of elements,
:    alternating keys and values, specifying parameters for the
:    publishing process.
: 
:      (:property value :property value ... )
: 
: 2. A meta-project definition, specifying of a list of
:    sub-projects:
: 
:      (:components ("project-1" "project-2" ...))
: 
: When the CDR of an element of org-publish-project-alist is in
: this second form, the elements of the list after `:components'
: are taken to be components of the project, which group together
: files requiring different publishing options.  When you publish
: such a project with `\[org-publish]', the components all publish.
: 
: When a property is given a value in `org-publish-project-alist',
: its setting overrides the value of the corresponding user
: variable (if any) during publishing.  However, options set within
: a file override everything.
: 
: Most properties are optional, but some should always be set:
: 
:   `:base-directory'
: 
:     Directory containing publishing source files.
: 
:   `:base-extension'
: 
:     Extension (without the dot!) of source files.  This can be
:     a regular expression.  If not given, "org" will be used as
:     default extension.  If it is `any', include all the files,
:     even without extension.
: 
:   `:publishing-directory'
: 
:     Directory (possibly remote) where output files will be
:     published.
: 
: If `:recursive' is non-nil files in sub-directories of
: `:base-directory' are considered.
: 
: The `:exclude' property may be used to prevent certain files from
: being published.  Its value may be a string or regexp matching
: file names you don't want to be published.
: 
: The `:include' property may be used to include extra files.  Its
: value may be a list of filenames to include.  The filenames are
: considered relative to the base directory.
: 
: When both `:include' and `:exclude' properties are given values,
: the exclusion step happens first.
: 
: One special property controls which back-end function to use for
: publishing files in the project.  This can be used to extend the
: set of file types publishable by `org-publish', as well as the
: set of output formats.
: 
:   `:publishing-function'
: 
:     Function to publish file.  Each back-end may define its
:     own (i.e. `org-latex-publish-to-pdf',
:     `org-html-publish-to-html').  May be a list of functions, in
:     which case each function in the list is invoked in turn.
: 
: Another property allows you to insert code that prepares
: a project for publishing.  For example, you could call GNU Make
: on a certain makefile, to ensure published files are built up to
: date.
: 
:   `:preparation-function'
: 
:     Function to be called before publishing this project.  This
:     may also be a list of functions.  Preparation functions are
:     called with the project properties list as their sole
:     argument.
: 
:   `:completion-function'
: 
:     Function to be called after publishing this project.  This
:     may also be a list of functions.  Completion functions are
:     called with the project properties list as their sole
:     argument.
: 
: Some properties control details of the Org publishing process,
: and are equivalent to the corresponding user variables listed in
: the right column.  Back-end specific properties may also be
: included.  See the back-end documentation for more information.
: 
:   :author                   `user-full-name'
:   :creator                  `org-export-creator-string'
:   :email                    `user-mail-address'
:   :exclude-tags             `org-export-exclude-tags'
:   :headline-levels          `org-export-headline-levels'
:   :language                 `org-export-default-language'
:   :preserve-breaks          `org-export-preserve-breaks'
:   :section-numbers          `org-export-with-section-numbers'
:   :select-tags              `org-export-select-tags'
:   :time-stamp-file          `org-export-time-stamp-file'
:   :with-archived-trees      `org-export-with-archived-trees'
:   :with-author              `org-export-with-author'
:   :with-creator             `org-export-with-creator'
:   :with-date                `org-export-with-date'
:   :with-drawers             `org-export-with-drawers'
:   :with-email               `org-export-with-email'
:   :with-emphasize           `org-export-with-emphasize'
:   :with-entities            `org-export-with-entities'
:   :with-fixed-width         `org-export-with-fixed-width'
:   :with-footnotes           `org-export-with-footnotes'
:   :with-inlinetasks         `org-export-with-inlinetasks'
:   :with-latex               `org-export-with-latex'
:   :with-planning            `org-export-with-planning'
:   :with-priority            `org-export-with-priority'
:   :with-properties          `org-export-with-properties'
:   :with-smart-quotes        `org-export-with-smart-quotes'
:   :with-special-strings     `org-export-with-special-strings'
:   :with-statistics-cookies' `org-export-with-statistics-cookies'
:   :with-sub-superscript     `org-export-with-sub-superscripts'
:   :with-toc                 `org-export-with-toc'
:   :with-tables              `org-export-with-tables'
:   :with-tags                `org-export-with-tags'
:   :with-tasks               `org-export-with-tasks'
:   :with-timestamps          `org-export-with-timestamps'
:   :with-title               `org-export-with-title'
:   :with-todo-keywords       `org-export-with-todo-keywords'
: 
: The following properties may be used to control publishing of
: a site-map of files or summary page for a given project.
: 
:   `:auto-sitemap'
: 
:     Whether to publish a site-map during
:     `org-publish-current-project' or `org-publish-all'.
: 
:   `:sitemap-filename'
: 
:     Filename for output of site-map.  Defaults to "sitemap.org".
: 
:   `:sitemap-title'
: 
:     Title of site-map page.  Defaults to name of file.
: 
:   `:sitemap-style'
: 
:     Can be `list' (site-map is just an itemized list of the
:     titles of the files involved) or `tree' (the directory
:     structure of the source files is reflected in the site-map).
:     Defaults to `tree'.
: 
:   `:sitemap-format-entry'
: 
:     Plugin function used to format entries in the site-map.  It
:     is called with three arguments: the file or directory name
:     relative to base directory, the site map style and the
:     current project.  It has to return a string.
: 
:     Defaults to `org-publish-sitemap-default-entry', which turns
:     file names into links and use document titles as
:     descriptions.  For specific formatting needs, one can use
:     `org-publish-find-date', `org-publish-find-title' and
:     `org-publish-find-property', to retrieve additional
:     information about published documents.
: 
:   `:sitemap-function'
: 
:     Plugin function to use for generation of site-map.  It is
:     called with two arguments: the title of the site-map, as
:     a string, and a representation of the files involved in the
:     project, as returned by `org-list-to-lisp'.  The latter can
:     further be transformed using `org-list-to-generic',
:     `org-list-to-subtree' and alike.  It has to return a string.
: 
:     Defaults to `org-publish-sitemap-default', which generates
:     a plain list of links to all files in the project.
: 
: If you create a site-map file, adjust the sorting like this:
: 
:   `:sitemap-sort-folders'
: 
:     Where folders should appear in the site-map.  Set this to
:     `first' or `last' to display folders first or last,
:     respectively.  When set to `ignore' (default), folders are
:     ignored altogether.  Any other value will mix files and
:     folders.  This variable has no effect when site-map style is
:     `tree'.
: 
:   `:sitemap-sort-files'
: 
:     The site map is normally sorted alphabetically.  You can
:     change this behavior setting this to `anti-chronologically',
:     `chronologically', or nil.
: 
:   `:sitemap-ignore-case'
: 
:     Should sorting be case-sensitive?  Default nil.
: 
: The following property control the creation of a concept index.
: 
:   `:makeindex'
: 
:     Create a concept index.  The file containing the index has to
:     be called "theindex.org".  If it doesn't exist in the
:     project, it will be generated.  Contents of the index are
:     stored in the file "theindex.inc", which can be included in
:     "theindex.org".
: 
: Other properties affecting publication.
: 
:   `:body-only'
: 
:     Set this to t to publish only the body of the documents.

** org-ascii-charset =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-ascii-charset
   :END:

- *Type:* (choice (const :tag "ASCII" as...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-ascii.el;hb=HEAD][ox-ascii.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-ascii-charset&sr=1][Find modifications in git logs]]

: The charset allowed to represent various elements and objects.
: Possible values are:
: `ascii'    Only use plain ASCII characters
: `latin1'   Include Latin-1 characters
: `utf-8'    Use all UTF-8 characters

** org-agenda-inactive-leader ="["=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-inactive-leader
   :END:

- *Type:* string
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-inactive-leader&sr=1][Find modifications in git logs]]

: Text preceding item pulled into the agenda by inactive time stamps.
: These entries are added to the agenda when pressing "[".

** org-html-head =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-head
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-head&sr=1][Find modifications in git logs]]

: Org-wide head definitions for exported HTML files.
: 
: This variable can contain the full HTML structure to provide a
: style, including the surrounding HTML tags.  You can consider
: including definitions for the following classes: title, todo,
: done, timestamp, timestamp-kwd, tag, target.
: 
: For example, a valid value would be:
: 
:    <style type="text/css">
:     <![CDATA[
:        p { font-weight: normal; color: gray; }
:        h1 { color: black; }
:       .title { text-align: center; }
:       .todo, .timestamp-kwd { color: red; }
:       .done { color: green; }
:     ]]>
:    </style>
: 
: If you want to refer to an external style, use something like
: 
:    <link rel="stylesheet" type="text/css" href="mystyles.css" />
: 
: As the value of this option simply gets inserted into the HTML
: <head> header, you can use it to add any arbitrary text to the
: header.
: 
: You can set this on a per-file basis using #+HTML_HEAD:,
: or for publication projects using the :html-head property.

** org-agenda-custom-commands =(quote (("n" "Agenda and all T...=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-custom-commands
   :END:

- *Type:* (repeat (choice :value ("x" "D...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-custom-commands&sr=1][Find modifications in git logs]]

: Custom commands for the agenda.
: \<org-mode-map>
: These commands will be offered on the splash screen displayed by the
: agenda dispatcher `\[org-agenda]'.  Each entry is a list like this:
: 
:    (key desc type match settings files)
: 
: key      The key (one or more characters as a string) to be associated
:          with the command.
: desc     A description of the command, when omitted or nil, a default
:          description is built using MATCH.
: type     The command type, any of the following symbols:
:           agenda      The daily/weekly agenda.
:           todo        Entries with a specific TODO keyword, in all agenda files.
:           search      Entries containing search words entry or headline.
:           tags        Tags/Property/TODO match in all agenda files.
:           tags-todo   Tags/P/T match in all agenda files, TODO entries only.
:           todo-tree   Sparse tree of specific TODO keyword in *current* file.
:           tags-tree   Sparse tree with all tags matches in *current* file.
:           occur-tree  Occur sparse tree for *current* file.
:           ...         A user-defined function.
: match    What to search for:
:           - a single keyword for TODO keyword searches
:           - a tags match expression for tags searches
:           - a word search expression for text searches.
:           - a regular expression for occur searches
:           For all other commands, this should be the empty string.
: settings  A list of option settings, similar to that in a let form, so like
:           this: ((opt1 val1) (opt2 val2) ...).   The values will be
:           evaluated at the moment of execution, so quote them when needed.
: files     A list of files to write the produced agenda buffer to with
:           the command `org-store-agenda-views'.
:           If a file name ends in ".html", an HTML version of the buffer
:           is written out.  If it ends in ".ps", a postscript version is
:           produced.  Otherwise, only the plain text is written to the file.
: 
: You can also define a set of commands, to create a composite agenda buffer.
: In this case, an entry looks like this:
: 
:   (key desc (cmd1 cmd2 ...) general-settings-for-whole-set files)
: 
: where
: 
: desc   A description string to be displayed in the dispatcher menu.
: cmd    An agenda command, similar to the above.  However, tree commands
:        are not allowed, but instead you can get agenda and global todo list.
:        So valid commands for a set are:
:        (agenda "" settings)
:        (alltodo "" settings)
:        (stuck "" settings)
:        (todo "match" settings files)
:        (search "match" settings files)
:        (tags "match" settings files)
:        (tags-todo "match" settings files)
: 
: Each command can carry a list of options, and another set of options can be
: given for the whole set of commands.  Individual command options take
: precedence over the general options.
: 
: When using several characters as key to a command, the first characters
: are prefix commands.  For the dispatcher to display useful information, you
: should provide a description for the prefix, like
: 
:  (setq org-agenda-custom-commands
:    \='(("h" . "HOME + Name tag searches") ; describe prefix "h"
:      ("hl" tags "+HOME+Lisa")
:      ("hp" tags "+HOME+Peter")
:      ("hk" tags "+HOME+Kim")))

** org-fast-tag-selection-single-key =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-fast-tag-selection-single-key
   :END:

- *Type:* (choice (const :tag "No" nil) ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-fast-tag-selection-single-key&sr=1][Find modifications in git logs]]

: Non-nil means fast tag selection exits after first change.
: When nil, you have to press RET to exit it.
: During fast tag selection, you can toggle this flag with `C-c'.
: This variable can also have the value `expert'.  In this case, the window
: displaying the tags menu is not even shown, until you press C-c again.

** org-html-divs =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-divs
   :END:

- *Type:* (list :greedy t (list :tag "Pr...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-divs&sr=1][Find modifications in git logs]]

: Alist of the three section elements for HTML export.
: The car of each entry is one of `preamble', `content' or `postamble'.
: The cdrs of each entry are the ELEMENT_TYPE and ID for each
: section of the exported document.
: 
: Note that changing the default will prevent you from using
: org-info.js for your website.

** org-speed-commands-user =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-speed-commands-user
   :END:

- *Type:* (repeat :value ("k" . ignore) ...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-speed-commands-user&sr=1][Find modifications in git logs]]

: Alist of additional speed commands.
: This list will be checked before `org-speed-commands-default'
: when the variable `org-use-speed-commands' is non-nil
: and when the cursor is at the beginning of a headline.
: The car if each entry is a string with a single letter, which must
: be assigned to `self-insert-command' in the global map.
: The cdr is either a command to be called interactively, a function
: to be called, or a form to be evaluated.
: An entry that is just a list with a single string will be interpreted
: as a descriptive headline that will be added when listing the speed
: commands in the Help buffer using the `?' speed command.

** org-agenda-search-view-always-boolean =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-search-view-always-boolean
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-search-view-always-boolean&sr=1][Find modifications in git logs]]

: Non-nil means the search string is interpreted as individual parts.
: 
: The search string for search view can either be interpreted as a phrase,
: or as a list of snippets that define a boolean search for a number of
: strings.
: 
: When this is non-nil, the string will be split on whitespace, and each
: snippet will be searched individually, and all must match in order to
: select an entry.  A snippet is then a single string of non-white
: characters, or a string in double quotes, or a regexp in {} braces.
: If a snippet is preceded by "-", the snippet must *not* match.
: "+" is syntactic sugar for positive selection.  Each snippet may
: be found as a full word or a partial word, but see the variable
: `org-agenda-search-view-force-full-words'.
: 
: When this is nil, search will look for the entire search phrase as one,
: with each space character matching any amount of whitespace, including
: line breaks.
: 
: Even when this is nil, you can still switch to Boolean search dynamically
: by preceding the first snippet with "+" or "-".  If the first snippet
: is a regexp marked with braces like "{abc}", this will also switch to
: boolean search.

** org-refile-use-cache =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-refile-use-cache
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-refile-use-cache&sr=1][Find modifications in git logs]]

: Non-nil means cache refile targets to speed up the process.
: \<org-mode-map>The cache for a particular file will be updated automatically when
: the buffer has been killed, or when any of the marker used for flagging
: refile targets no longer points at a live buffer.
: If you have added new entries to a buffer that might themselves be targets,
: you need to clear the cache manually by pressing `C-0 \[org-refile]' or,
: if you find that easier, `\[universal-argument] \[universal-argument] \[universal-argument] \[org-refile]'.

** org-hierarchical-todo-statistics =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-hierarchical-todo-statistics
   :END:

- *Type:* boolean
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-hierarchical-todo-statistics&sr=1][Find modifications in git logs]]

: Non-nil means TODO statistics covers just direct children.
: When nil, all entries in the subtree are considered.
: This has only an effect if `org-provide-todo-statistics' is set.
: To set this to nil for only a single subtree, use a COOKIE_DATA
: property and include the word "recursive" into the value.

** org-beamer-environments-extra =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-beamer-environments-extra
   :END:

- *Type:* (repeat (list (string :tag "En...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-beamer.el;hb=HEAD][ox-beamer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-beamer-environments-extra&sr=1][Find modifications in git logs]]

: Environments triggered by tags in Beamer export.
: Each entry has 4 elements:
: 
: name    Name of the environment
: key     Selection key for `org-beamer-select-environment'
: open    The opening template for the environment, with the following escapes
:         %a   the action/overlay specification
:         %A   the default action/overlay specification
:         %R   the raw BEAMER_act value
:         %o   the options argument, with square brackets
:         %O   the raw BEAMER_opt value
:         %h   the headline text
:         %r   the raw headline text (i.e. without any processing)
:         %H   if there is headline text, that raw text in {} braces
:         %U   if there is headline text, that raw text in [] brackets
: close   The closing string of the environment.

** org-confirm-elisp-link-function =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-confirm-elisp-link-function
   :END:

- *Type:* (choice (const :tag "with yes-...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-confirm-elisp-link-function&sr=1][Find modifications in git logs]]

: Non-nil means ask for confirmation before executing Emacs Lisp links.
: Elisp links can be dangerous: just think about a link
: 
:      [[elisp:(shell-command "rm -rf ~/*")][Google Search]]
: 
: This link would show up in your Org document as "Google Search",
: but really it would remove your entire home directory.
: Therefore we advise against setting this variable to nil.
: Just change it to `y-or-n-p' if you want to confirm with a
: single keystroke rather than having to type "yes".

** org-babel-lilypond-commands =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-lilypond-commands
   :END:

- *Type:* (list (string :tag "Lilypond  ...
- *Since:* Emacs version 24.3
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-lilypond.el;hb=HEAD][ob-lilypond.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-lilypond-commands&sr=1][Find modifications in git logs]]

: Commands to run lilypond and view or play the results.
: These should be executables that take a filename as an argument.
: On some system it is possible to specify the filename directly
: and the viewer or player will be determined from the file type;
: you can leave the string empty on this case.

** org-babel-ocaml-command =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-babel-ocaml-command
   :END:

- *Type:* string
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ob-ocaml.el;hb=HEAD][ob-ocaml.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-babel-ocaml-command&sr=1][Find modifications in git logs]]

: Name of the command for executing Ocaml code.

** org-show-context-detail =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-show-context-detail
   :END:

- *Type:* (choice (const :tag "Canonical...
- *Since:* Emacs version 26.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-show-context-detail&sr=1][Find modifications in git logs]]

: Alist between context and visibility span when revealing a location.
: 
: \<org-mode-map>Some actions may move point into invisible
: locations.  As a consequence, Org always expose a neighborhood
: around point.  How much is shown depends on the initial action,
: or context.  Valid contexts are
: 
:   agenda         when exposing an entry from the agenda
:   org-goto       when using the command `org-goto' (`\[org-goto]')
:   occur-tree     when using the command `org-occur' (`\[org-sparse-tree] /')
:   tags-tree      when constructing a sparse tree based on tags matches
:   link-search    when exposing search matches associated with a link
:   mark-goto      when exposing the jump goal of a mark
:   bookmark-jump  when exposing a bookmark location
:   isearch        when exiting from an incremental search
:   default        default for all contexts not set explicitly
: 
: Allowed visibility spans are
: 
:   minimal        show current headline; if point is not on headline,
:                  also show entry
: 
:   local          show current headline, entry and next headline
: 
:   ancestors      show current headline and its direct ancestors; if
:                  point is not on headline, also show entry
: 
:   lineage        show current headline, its direct ancestors and all
:                  their children; if point is not on headline, also show
:                  entry and first child
: 
:   tree           show current headline, its direct ancestors and all
:                  their children; if point is not on headline, also show
:                  entry and all children
: 
:   canonical      show current headline, its direct ancestors along with
:                  their entries and children; if point is not located on
:                  the headline, also show current entry and all children
: 
: As special cases, a nil or t value means show all contexts in
: `minimal' or `canonical' view, respectively.
: 
: Some views can make displayed information very compact, but also
: make it harder to edit the location of the match.  In such
: a case, use the command `org-reveal' (`\[org-reveal]') to show
: more context.

** org-from-is-user-regexp =(funcall (function (closure (f...=
   :PROPERTIES:
   :CUSTOM_ID: org-from-is-user-regexp
   :END:

- *Type:* regexp
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org.el;hb=HEAD][org.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-from-is-user-regexp&sr=1][Find modifications in git logs]]

: Regexp matched against the "From:" header of an email or usenet message.
: It should match if the message is from the user him/herself.

** org-timer-display =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-timer-display
   :END:

- *Type:* (choice (const :tag "Mode line...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-timer.el;hb=HEAD][org-timer.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-timer-display&sr=1][Find modifications in git logs]]

: Define where running timer is displayed, if at all.
: When a timer is running, Org can display it in the mode line
: and/or frame title.  Allowed values are:
: 
: both         displays in both mode line and frame title
: mode-line    displays only in mode line (default)
: frame-title  displays only in frame title
: nil          current timer is not displayed

** org-clock-display-default-range =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-clock-display-default-range
   :END:

- *Type:* (choice (const today) (const y...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-clock.el;hb=HEAD][org-clock.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-clock-display-default-range&sr=1][Find modifications in git logs]]

: Default range when displaying clocks with `org-clock-display'.

** org-attach-auto-tag =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-attach-auto-tag
   :END:

- *Type:* (choice (const :tag "None" nil...
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-attach.el;hb=HEAD][org-attach.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-attach-auto-tag&sr=1][Find modifications in git logs]]

: Tag that will be triggered automatically when an entry has an attachment.

** org-agenda-clockreport-parameter-plist =(quote (:link t :maxlevel 2))=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-clockreport-parameter-plist
   :END:

- *Type:* plist
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-clockreport-parameter-plist&sr=1][Find modifications in git logs]]

: Property list with parameters for the clocktable in clockreport mode.
: This is the display mode that shows a clock table in the daily/weekly
: agenda, the properties for this dynamic block can be set here.
: The usual clocktable parameters are allowed here, but you cannot set
: the properties :name, :tstart, :tend, :block, and :scope - these will
: be overwritten to make sure the content accurately reflects the
: current display in the agenda.

** org-man-pdf-process =(funcall (function (closure (o...=
   :PROPERTIES:
   :CUSTOM_ID: org-man-pdf-process
   :END:

- *Type:* (choice (repeat :tag "Shell co...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-man.el;hb=HEAD][ox-man.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-man-pdf-process&sr=1][Find modifications in git logs]]

: Commands to process a Man file to a PDF file.
: 
: This is a list of strings, each of them will be given to the
: shell as a command.  %f in the command will be replaced by the
: relative file name, %F by the absolute file name, %b by the file
: base name (i.e. without directory and extension parts), %o by the
: base directory of the file and %O by the absolute file name of
: the output file.
: 
: By default, Org uses 3 runs of to do the processing.
: 
: Alternatively, this may be a Lisp function that does the
: processing.  This function should accept the file name as
: its single argument.

** org-export-with-planning =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-export-with-planning
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox.el;hb=HEAD][ox.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-export-with-planning&sr=1][Find modifications in git logs]]

: Non-nil means include planning info in export.
: 
: Planning info is the line containing either SCHEDULED:,
: DEADLINE:, CLOSED: time-stamps, or a combination of them.
: 
: This option can also be set with the OPTIONS keyword,
: e.g. "p:t".

** org-fontify-quote-and-verse-blocks =(funcall (function (closure (t...=
   :PROPERTIES:
   :CUSTOM_ID: org-fontify-quote-and-verse-blocks
   :END:

- *Type:* boolean
- *Since:* Emacs version 24.1
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-faces.el;hb=HEAD][org-faces.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-fontify-quote-and-verse-blocks&sr=1][Find modifications in git logs]]

: Non-nil means, add a special face to #+begin_quote and #+begin_verse block.
: When nil, format these as normal Org.  This is the default, because the
: content of these blocks will still be treated as Org syntax.

** org-html-footnotes-section =(funcall (function (closure (h...=
   :PROPERTIES:
   :CUSTOM_ID: org-html-footnotes-section
   :END:

- *Type:* string
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/ox-html.el;hb=HEAD][ox-html.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-html-footnotes-section&sr=1][Find modifications in git logs]]

: Format for the footnotes section.
: Should contain a two instances of %s.  The first will be replaced with the
: language-specific word for "Footnotes", the second one will be replaced
: by the footnotes themselves.

** org-agenda-max-effort =nil=
   :PROPERTIES:
   :CUSTOM_ID: org-agenda-max-effort
   :END:

- *Type:* (choice (symbol :tag "No limit...
- *Since:* Emacs version 24.4
- *In file:* [[https://code.orgmode.org/bzg/org-mode/raw/master/lisp/org-agenda.el;hb=HEAD][org-agenda.el]]
- [[https://orgmode.org/w/?p=org-mode.git&a=search&h=HEAD&st=commit&s=org-agenda-max-effort&sr=1][Find modifications in git logs]]

: Maximum cumulated effort duration for the agenda.
: This can be nil (no limit) or a number of minutes (as an integer)
: or an alist of agenda types with an associated number of minutes
: to limit entries to in this type.
