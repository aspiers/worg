* Settings                                                         :noexport:
#+TITLE:   LaTeX Export
#+AUTHOR:    Tom Dye
#+EMAIL:     tsd@tsdye2.com
#+DATE:      2010-04-24 Sat
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

* Start up
Org-mode LaTeX export is easy.  Place the following code in your
.emacs and you're ready to go.

#+begin_src emacs-lisp
  (require 'org-latex)
  (unless (boundp 'org-export-latex-classes)
    (setq org-export-latex-classes nil))
  (add-to-list 'org-export-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")))  
#+end_src

This tells the Org-mode LaTeX exporter to use the standard LaTeX
=article= document class by default and to map Org-mode headlines and
lists to LaTeX sectioning and list commands, as follows:

#+begin_src org
  ,* section
  ,** itemize
  ,*** itemize, etc.
  ,    - itemize
#+end_src

Now you can pick a LaTeX export command from the export menu, =C-c
C-e=, and expect to find a well-formed LaTeX document with the same
base name as your org-mode buffer.

It could hardly be easier!

* Why LaTeX Export?

As the manual says, "Org is a mode for keeping notes, maintaining TODO
lists, and doing project planning with a fast and effective plain-text
system."  LaTeX is a convenient interface to TeX, a typesetting system
that its author "intended for the creation of beautiful books â€” and
especially for books that contain a lot of mathematics."  Where do
these two activities--keeping notes and making beautiful books--overlap?

Org-mode is well supplied with a variety of other exporters.  The Org
ASCII exporter produces a readable and simple version of an Org file
for printing and sharing of notes.  The HTML exporter does such a good
job of preparing notes for the web that many people use it to create
entire web sites.  The XOXO exporter makes notes accessible to other
software applications and the DocBook exporter starts the journey to
many other formats, including LaTeX, using DocBook tools.

The niche for the LaTeX exporter is producing a version of an Org file
for printing and sharing notes that looks better than an ASCII
printout but that can be produced without the overhead required to
support DocBook.  All that is needed is a working LaTeX installation.
LaTeX distributions for all major platforms are today well-developed
and easy to use and maintain.

* More Highly-Structured Documents

You can prepare more highly structured LaTeX documents by adding a few
lines to =org-export-latex-classes= in the .emacs.

#+begin_src emacs-lisp
  (add-to-list 'org-export-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

This setup produces the following document structure:

#+begin_src org
  ,* section
  ,** subsection
  ,*** subsubsection
  ,**** paragraph
  ,***** subparagraph
  ,****** itemize, etc.
  ,       - itemize
#+end_src

* Exporting Other LaTeX Document Classes

The LaTeX exporter can be configured to produce LaTeX output for
books, reports, letters or any other document class, including custom
classes.  These can be useful if notes need to be formatted to a
certain specification, such as a company technical manual, or if the
notes are quite long, as might be the case when Org-mode is used as a
laboratory or project notebook.

Here is a standard setup for export to a LaTeX book class:

#+begin_src emacs-lisp
  (add-to-list 'org-export-latex-classes
               `("book"
                 "\\documentclass[11pt,letter]{book}"
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
               )
#+end_src

Then, in the Org file with a book-full of notes, add this line:

#+begin_src org
  #+LaTeX_CLASS: book 
#+end_src

* Passing Options to Document Classes
The standard LaTeX document classes, =article=, =report=, =book=,
=slides=, and =letter= take options that, where applicable, select the
type size, paper size, orientation, whether to print one- or
two-sided, and a variety of formatting specifications.  Custom LaTeX
document classes can define their own options, as needed.

You can pass options to the LaTeX =\documentclass= macro by putting a
line like this in your Org-mode file:

#+begin_src org
  #+LaTeX_CLASS_OPTIONS: [a4paper,twoside,twocolumn] 
#+end_src

* Specifying LaTeX Packages
According to its author, the LaTeX macro package "represents a balance
between functionality and ease of use."  The LaTeX user who adds
functionality through the addition of packages necessarily makes the
software more difficult to use.  Like LaTeX itself, the Org-mode LaTeX
exporter has struck its own balance between functionality and ease of
use with the addition of several LaTeX packages.  These are written
out in the LaTeX header as LaTeX \usepackage{} commands.

The names of the LaTeX packages are kept in a data structure designed
for ease of maintenance as additional features are added to the LaTeX
exporter.  Packages in the default packages list,
=org-export-latex-default-packages-alist=, are required to support all
features of the LaTeX exporter.  This list is typically specified in
the Org-mode source code and its documentation contains a warning not
to modify it.  Packages not included on the default packages list that
the user needs consistently can be added to
=org-export-latex-packages-alist=.  Packages needed for a particular
file can be specified by inserting a line like this in the Org-mode
buffer:
#+begin_src org
  ,#+LATEX_HEADER: \usepackage{xyz}
#+end_src
* Using Custom Classes
If the user has custom LaTeX document classes that conflict with the
default packages or that only require a few of the default packages to
support all features of the LaTeX exporter, then this can be handled
in the .emacs using [DEFAULT-PACKAGES], [NO-DEFAULT-PACKAGES],
[PACKAGES], [NO-PACKAGES], [EXTRA], [NO-EXTRA].    

Here is a simple example that uses a [[http://orgmode.org/worg/org-contrib/babel/examples/article-class.php][LaTeX class]] that supports the
Org-mode requirements and leaves open the possibility of adding file
specific packages:
  
#+begin_src emacs-lisp
  (add-to-list 'org-export-latex-classes
        '("org-article"
           "\\documentclass{org-article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
* Creating PDF Output
The LaTeX exporter by default produces code ready for processing by
pdflatex.  pdflatex calls the pdfTeX program, a modern extension of
TeX that produces PDF output directly, using the standard LaTeX
macros.  pdfTeX is tightly integrated with PDF features such as
hypertext links and tables of contents, using LaTeX packages such as
hyperref, which is included in the default packages list.

Org-mode offers a command to produce a PDF file from the LaTeX export.
This is bound to =C-c C-e p=.  The command =C-c C-e d= does all this
*and* opens the PDF file in the default reader.

If you use a different TeX typesetting engine or would like to
customize how Org-mode produces the pdf file, then you will want to
modify the variable =org-latex-to-pdf-process=.  This is a list of
strings, each of which contains a call to one of the TeX typesetting
engines or to an auxiliary program, such as BibTeX, makeindex, etc.

For example, the shell script =texi2dvi= will run =pdflatex= as many
times as needed to build a pdf file successfully.  The following code
in =.emacs= will instruct Org-mode to use =texi2dvi= when making a pdf
file.  Note that you should check that =texi2dvi= is installed on your
system and that it works correctly before adding this code to your
=.emacs=. 
 
#+source: texi2dvi
#+begin_src emacs-lisp :exports code
(setq org-latex-to-pdf-process
   '("texi2dvi -p -b -c -V %f"))
#+end_src

* Exporting Parts of an Org-mode Buffer
Tags can be used to select which parts of an Org-mode buffer are sent
to the LaTeX exporter.  In the typical case, the
Org-mode buffer contains material for a single export file along with
material that shouldn't appear in the export; tags distinguish the
export parts from the non-export parts.  This is the single
export case.  It is also possible to use tags to specify multiple
export targets in a single Org-mode buffer.  In the multiple export
case, tags are resolved by a [[http://orgmode.org/org.html#Publishing][publishing management system]].  

** The Single Export Case
The tags used for the single export case are held in
two variables: =org-export-select-tags= is a list of tags, initially set
to =export=, that select a tree or sub-tree for export;
=org-export-exclude-tags= is a list of tags, initially set to
=noexport=, that exclude a tree or subtree for export.  The effect
they have on export is logical, but the logic isn't necessarily what
one might expect.  In particular, if both select tags and exclude tags
are to be used in the same buffer, then their use must follow certain
rules.  Also, the handling of unmarked trees and subtrees changes
depending on which tags are used and how they are used.

If neither select tags nor exclude tags are used, then all of the trees
and their subtrees are sent to the LaTeX exporter.  If, however, a
select tag is added to a tree as in the example below, then unmarked
trees will *not* be sent to the exporter.  Thus, the effect of a
select tag is not restricted to its tree; its effect extends to the
entire buffer.

#+begin_src org
  ,* Tree 1                                                             :export:
  ,   This is exported
  ,** Subtree 1
  ,   This is also exported
  ,* Tree 2
  ,  This is not exported
  ,** Subtree 2
  ,  This is not exported, either
#+end_src

Once the scope of the tag's effect is grasped, the primary rule of using
select and exclude tags is obvious: only one type of tag may be used
for the trees of a buffer.  If both types of tags are used for trees,
how can Org-mode decide what to do with the unmarked trees?  

A corollary of this rule is that the other type of tag can only be
used in a subtree of the tagged tree in order to reverse the effect of
the tree-level tag, as in the following example.

#+begin_src org
  ,* Tree 1                                                             :export:
  ,   This is exported
  ,** Subtree 1                                                       :noexport:
  ,   This is not exported
  ,* Tree 2
  ,  This is not exported
  ,** Subtree 2
  ,  This is not exported, either
#+end_src


** The Multiple Export Case
In the multiple export case, tags used to select a tree or subtree for
export are defined in =.emacs= as part of the configuration needed to
specify the many properties of a publication project.  A tutorial
illustrates [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.php][the flexibility of the publishing mechanism]] using an HTML
example.  The intricacies of the publishing mechanism are beyond the
scope of of this LaTeX export tutorial.  Here, a working example[fn:1]
is described.

In the example, the file =index.org= holds material for two export
targets, one related to work items and the other related to home.  The
variable =org-publish-project-alist= has two entries, one for a
project named =work= and the other for a project named =home=.  Both
projects are based on the file =index.org= located in =~/notes/org=.

Both projects will create output files named =index.tex=, based on the
name of the Org-mode file used for import.  The two =index.tex= files
are kept separate by writing them to different directories, as
indicated by the keyword argument =:publishing-directory=.
#+begin_src emacs-lisp
  (setq org-publish-project-alist
        '(
          ("work"
           :base-directory "~/notes/org/"
           :base-extension "org"
           :publishing-directory "~/notes/export/work/"
           :publishing-function org-publish-org-to-latex
           :select-tags     ("@WORK")
           :title "Work Notes"
           :include ("index.org")
           :exclude "\\.org$"
           )
          ("home"
           :base-directory "~/notes/org/"
           :base-extension "org"
           :publishing-directory "~/notes/export/home/"
           :publishing-function org-publish-org-to-latex
           :select-tags     ("@HOME")
           :title "Home Phone"
           :include ("index.org")
           :exclude "\\.org$"
           )
          ))
#+end_src

The parts of =index.org= tagged =@WORK= can now be exported to
=~/notes/export/work/index.tex= with =C-c C-e X= and selecting the
=work= project.

Similarly, the parts of =index.org= tagged =@HOME= can now be exported to
=~/notes/export/home/index.tex= with =C-c C-e X= and selecting the
=home= project.

* Exporting Pseudo-Code
  The LaTeX exporter will fontify exported code blocks written in any
  language that has an associated Emacs mode for editing.  If you want
  to export pseudo-code, for which there is no corresponding Emacs
  mode, then one approach is to use =#+begin_latex ... #+end_latex=
  and write the pseudo-code directly in LaTeX.  This depends on the
  LaTeX [[http://www.ctan.org/tex-archive/macros/latex/contrib/listings/][listings package]], which is one of the default packages used by
  Org-mode. 

  Dan Davison provided this example on the Org-mode list:

: #+begin_latex
: \begin{algorithm}
:  \caption{An algorithm}
:  \label{alg:myalg}
:  \begin{lstlisting}[mathescape,escapeinside='']
:    '\foreach individual $i$'
:        '\foreach group $k$'
:            $\gamma_{ik} \getsp Q_{k}\prod_{l}\prod_{a=1}^{2}P_{lkX_{ila}}$
:  \end{lstlisting}
: \end{algorithm}
: #+end_latex

* Changing the title(page) layout
The default title created by the LaTeX exporter is often just fine,
but in cases where you would like to include specific information in
the title, or create a custom title page, then perhaps the best way to
do this was posted to the Org-mode list by Nick Dokos:

#+begin_example
#+LATEX_HEADER: \input{mytitle}
 
 * Foo
 foo
 
 * Bar
 bar
#+end_example

where the file mytitle.tex looks like this:

#+begin_example
\renewcommand\maketitle{\begin{titlepage}%
FOO
\end{titlepage}%
}
#+end_example

And FOO is replaced by your custom title(page).

* Arbitrary Semantic Markup
Org-mode provides wiki-like markup for various display
characteristics.  This is often handy and it translates directly into
LaTeX, but the design philosophy of LaTeX is centered around semantic
markup, "what you say is what you mean" rather than "what you see is
what you get" (lampooned by zealous LaTeX users as "what you see is
all you get").  In practice common semantic elements are defined in a
LaTeX class or style file and these are marked up in text with
commands often peculiar to the class or style file.  Clearly, there is
no way that Org-mode can anticipate commands peculiar to arbitrary
class or style files.  Fortunately, there turns out to be two effective
ways to introduce arbitrary semantic markup for export using the
existing Org-mode link syntax.  

For simple /block-level/ arbitrary markup, you can use the contributed
package [[file:../org-contrib/org-special-blocks.org][org-special-blocks]], which turns ~#+begin_foo~ into
~\begin{foo}~ upon Latex export. You can use ordinary Org markup
inside the block. For example, you can wrap an abstract in

: #+BEGIN_ABSTRACT
: [Text of the abstract here.]
: #+END_ABSTRACT

For more complex cases, where you need to pass parameters or process
block contents, but don't want to use literal Latex, you may want to
explore the possibilities of the contributed  [[file:../contrib/org-exp-blocks][org-exp-blocks]].

/Inline/ arbitrary semantic markup can be implemented by defining a new link type
in =.emacs=.   The following code block defines a new link type,
=latex=, whose =path= argument can hold the name of any LaTeX
command.  This one defines export markup for HTML and LaTeX.  A link
such as =[latex:proglang][Org-mode]= will export
=\proglang{Org-mode}= to the LaTeX file.  In this way, it is possible
to make the Org-mode LaTeX exporter conform to the semantic markup
defined in arbitrary style files.  Org-mode will even complete your
new link type!

#+source: semantic-markup
#+begin_src emacs-lisp :exports code
  (org-add-link-type
   "latex" nil
   (lambda (path desc format)
     (cond
      ((eq format 'html)
       (format "<span class=\"%s\">%s</span>" path desc))
      ((eq format 'latex)
       (format "\\%s{%s}" path desc)))))
#+end_src

This non-obvious use of the Org-mode link syntax appeared on the
Org-mode mailing list under the heading =text color + highlight= (!).
There was a lively discussion there, to which the ideas of
Samuel Wales, Christian Moe and Eric Schulte contributed directly to
this implementation.    
* Footnotes

[fn:1] Based on posts to the mailing list by Karl Marino and Carsten
Dominik.  Thanks to Bernt Hansen and Nick Dokos for help debugging a
problem implementing the publishing project.
