#+OPTIONS:    H:3 num:nil toc:2 \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+TITLE:      Org-mode outside Org-mode
#+AUTHOR:     Thorsten Jolitz
#+EMAIL:      tjolitz at gmail dot com
#+DATE        <2013-03-12 Di>
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg

[[file:index.org][{Back to Worg's index}]]

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

  Once one gets used to Org-mode, it's hard to live without it. Even its most
  basic feature, the hierarchical tree-like structuring of files, can be
  missed badly when editing files in other GNU Emacs major-modes, not to
  mention the convenient navigation, structure-editing and visibility-cycling
  functionality Org-mode offers for these tree-like structures.

  One especially important case where Org-mode users might miss Org-mode
  functionality is their =.emacs= configuration file. These Emacs Lisp files
  might become huge, for example [[http://www.mygooglest.com/fni/dot-emacs.html][Fabrice Niessen's .emacs]] has some 9720 lines,
  and structuring them only using Emacs Lisp comments (=;=) easily becomes a
  creative nightmare (many approaches for structuring a .emacs file can be
  found on [[http://www.dotemacs.de/index.html][the very unofficial dotemacs home]] page). 

  Another typical case where Org-mode's editing facilities are missing is
  writing the comment-header sections of Emacs Lisp source code files. These
  sections often contain extensive explanations of the development-history,
  installation-process and usage of the library, but are just that - Emacs
  Lisp comment-sections. Sometimes even the comment-strings of important and
  complex Emacs Lisp functions contain long and complicated text parts that
  are not easy to edit as comments. 

  Last not least, anybody who has used =C-c C-j (org-goto)= for looking up a
  different location in the current org-file, keeping current visibility,
  might have wondered if a kind of 'remote-buffer-control' via a temporary
  indirect buffer might not be a generally useful idea.

* Org-mode everywhere
  :PROPERTIES:
  :CUSTOM_ID: org-mode-everywhere
  :END:
** File Structuring
   :PROPERTIES:
   :CUSTOM_ID: file-structuring
   :END:
*** Orgstruct 
    :PROPERTIES:
    :CUSTOM_ID: orgstruct-minor-mode
    :END:

   One possibility to enjoy Org-mode's structure-editing and list-formatting
   facilities outside Org-mode buffers is /Orgstruct minor mode/. Let's cite
   from the [[http://orgmode.org/manual/Orgstruct-mode.html][Org-mode manual]]:

#+begin_example
    If you like the intuitive way the Org mode structure editing and list
    formatting works, you might want to use these commands in other modes like
    Text mode or Mail mode as well. The minor mode orgstruct-mode makes this
    possible. [...]

    When this mode is active and the cursor is on a line that looks to Org like a
    headline or the first line of a list item, most structure editing commands
    will work, even if the same keys normally have different functionality in
    the major mode you are using. If the cursor is not in one of those special
    lines, Orgstruct mode lurks silently in the shadows. When you use
    orgstruct++-mode, Org will also export indentation and autofill settings
    into that mode, and detect item context after the first line of an item.
#+end_example

Orgstruct currently doesn't work with /outorg/ and /navi-mode/ (see below for
a description of these libraries). To make both libraries work with buffers
with Orgstruct minor-mode just like with outline-minor-mode buffers (with
outshine extensions), it would be necessary to:

 1. Structure the file with outshine-style headings (e.g. =;; * Header=)
 2. Make Orgstruct calculate and set file-local variable =outline-regexp= the
    way /outshine/ does.
 3. Make Orgstruct calculate and set file-local variable =outline-level= the
    way /outshine/ does.
 4. Make Orgstruct calculate and set file-local variable
    =outline-promotion-headings= the way /outshine/ does. 

Then, maybe after a few minor tweaks in the libraries themselves, /outorg/ and
/navi-mode/ wouldn't care if they deal with an orgstruct-buffer or an
outshine-buffer.

*** Outline with Outshine 
    :PROPERTIES:
    :CUSTOM_ID: outline-with-outshine
    :END:
** Subtree and Comment Editing
   :PROPERTIES:
   :CUSTOM_ID: comment-editing
   :END:
*** Outorg
    :PROPERTIES:
    :CUSTOM_ID: outorg
    :END:
*** Poporg
    :PROPERTIES:
    :CUSTOM_ID: poporg
    :END:
** Remote Buffer Control
   :PROPERTIES:
   :CUSTOM_ID: remote-buffer-control
   :END:
*** Navi-mode
    :PROPERTIES:
    :CUSTOM_ID: navi-mode
    :END:
* Examples with Screenshots
  :PROPERTIES:
  :CUSTOM_ID: example-with-screenshots
  :END:
** Exploring 'outshine.el'
   :PROPERTIES:
   :CUSTOM_ID: exploring-outshine-with-navi
   :END:
** Editing and exporting subtrees
   :PROPERTIES:
   :CUSTOM_ID: editing-exporting-subtrees
   :END:
** Editing function comment-strings
   :PROPERTIES:
   :CUSTOM_ID: editing-function-comment-strings
   :END:




