#+TITLE:    Org-mode Build System
#+AUTHOR:   Achim Gratz
#+EMAIL:    Stromeko <at> NexGo.DE
#+STARTUP:    align fold nodlcheck hidestars oddeven intestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   worg
#+OPTIONS:    H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc

* Introduction

Org can be run directly from sources, however usually it is
byte-compiled and installed before use.  Also, the documentation needs
to be rebuilt from their respective sources, registered and put into a
place where it can be found.  Instead of you having to do all this by
hand, a build system based on GNU make will do it for you.  The Org
build system makes extensive use of GNU make features.

* Build System Structure

The build system consists of these files.

: <org-mode>/Makefile
: <org-mode>/default.mk
: <org-mode>/local.mk
: <org-mode>/targets.mk
: <org-mode>/doc/Makefile
: <org-mode>/etc/Makefile
: <org-mode>/lisp/Makefile
: <org-mode>/UTILITIES/org-fixup.el

** Top Level =Makefile=

This file provides only the help.  Short help can be requested by
=make help=, while =make helpall= will list all documented targets.
Undocumented targets may exist for internal purposes and can be
changed or removed at any time.

All other functionality of the build system is provided in separate
files, which will either be explicitly included from the top level or
implicitly read by GNU make.

** Defaults =default.mk=

*Never change anything in =default.mk=, always do your changes in
=local.mk=!*

The defaults will work on a typical GNU/Linux system.  For system-wide
installation as assumed by the build system the user must be able to
obtain administrative privileges via sudo.  Besides Emacs, the
following programs must be available in PATH:

- find
- install
- rm

The following programs are optional, when loss of functionality can be
tolerated:

- install-info
- makeinfo
- texi2pdf
- sudo
- git

** Local Customization =local.mk=

*Never push =local.mk= to any public branch!*

The build system is an integral part of Org.  To allow easy local
customization, that customization must never become part of the
official Git repository.  On the other hand the build system must work
even when no local customization has been applied.  Therefore when the
file =local.mk= does not exist, a local customization template will be
created that copies some settings that most commonly would need to be
changed from default.mk.  The template includes some comments that are
hopefully self-documenting.  As long as all necessary programs are
available, the customization should in most cases be limited to
setting $prefix correctly.

If you need to do more extensive changes, copy the relevant parts from
=default.mk= to =local.mk= (or maybe even the whole file if that seems
easier to you).  Please look at some of the [[Customization][Customization Examples]] to
get an idea of what is possible.

** Make Targets =targets.mk=

All targets that the Org build system can build are defined here.
Most of the actual work will be handed off to the second level of
=Makefile=s in their respective subdirectories.  It is possible to
override some parts of the build system by defining some variables.
This is largely untested and consequently unsupported, but may still
be useful in some situations.

- define =TEST_NO_AUTOCLEAN= to keep the test directory around for
  inspection
- define =ORGVERSION=, =GITVERSION= and =GITSTATUS= if git is
  not available

** Second Level =Makefile=

The =Makefile= in subdirectories can be invoked from the top level only
since they rely on the definitions that have been made there.
** Utilities =org-fixup.el=

This is a collection of some Emacs Lisp routines that implement basic
functionality of the build system.  This mainly eliminates the need for
some external programs and thus reduces the number of external
dependencies.

A few of these functions have been designed to be from the command line
or even from within Emacs itself.  This is an aid for manually building
a working Org installation when the external dependencies of the build
system cannot be met.  See [[Support%20for%20Manual%20Build][Support for Manual Build]].

* Customization

Changing the behaviour of the build system to conform to your local
system rules is done by editing the file =local.mk=.  The standard
template that is created when this file does not exist offers only the
most common customization variables, but you are free to customize
anything that =default.mk= offers (but you really have to know what
you are doing for some of this).  Remember to only change =local.mk=,
please.

** Simple Customization

*** Non-standard Emacs location

Customization for using a self-compiled Emacs 24 installed in
=/usr/local=.  Additional customization to enable htmlize installed
from ELPA in users' home directory and ESS (for R) in the system
=/usr/share/emacs/site-lisp/= and all Babel languages for testing.

#+BEGIN_SRC Makefile
EMACS   = /usr/local/bin/emacs-24.1
prefix  = /usr/local/share
lispdir = $(prefix)/emacs/site-lisp/org
datadir = $(prefix)/emacs/etc/org
infodir = $(prefix)/info

BTEST_EXTRA = ess-site 
BTEST_OB_LANGUAGES = awk C fortran maxima lilypond octave python sh R
BTEST_POST = -L ~/.emacs.d/elpa/htmlize-1.39 \
	     -L /usr/share/emacs/site-lisp/emacs-ess-12.04.4
#+END_SRC

*** XEmacs

Customization for using XEmacs 21.5, since there seems to be no ERT
for XEmacs testing will not work and has been disabled.

#+BEGIN_SRC Makefile
EMACS   = xemacs
prefix  = /usr/local/share
lispdir = $(prefix)/xemacs/site-lisp/org
datadir = $(prefix)/xemacs/etc/org
infodir = $(prefix)/info

BTEST = /bin/true
BATCH = $(EMACS) -batch -q -vanilla # XEmacs
# How to byte-compile the whole source directory
ELCDIR	= $(BATCH) \
		--eval '(add-to-list '"'"'load-path ".")' \
		--eval '(byte-recompile-directory "." 0)'
#+END_SRC

*** Emacs on Windows

Customization for using vanilla Emacs 24 on Windows, with GNU make and
other binaries provided by Cygwin.  Make sure the installation paths
contain no spaces!  Babel languages have been stripped down.

#+BEGIN_SRC Makefile
CYGWIN += nodosfilewarning
prefix  = SHELL=sh C:/Freeware/Emacs-24.1
EMACS   = $(prefix)/bin/emacs
lispdir = $(prefix)/site-lisp/org
datadir = $(prefix)/etc/org
infodir = $(prefix)/info

BTEST_OB_LANGUAGES = octave
SUDO =
#+END_SRC

** Advanced Customization

*** Multiple Emacsen

If you're a developer (or a system administrator that serves a diverse
set of users) you'll likely have to deal with the need to build and
test Org for different versions of Emacs.  Having to copy or link the
correct customization file to =local.mk= quickly loses the appeal and
is error prone.  Here's a (hopefully better) suggestion: put each
customization into a file named =local-<pattern>.mk= and create a
=local.mk= that looks like this:

#+BEGIN_SRC Makefile
ifdef LOCALMK
  include local-$(LOCALMK).mk
else
  include local-emac24.mk
endif
#+END_SRC

Now switching between your different customizations is as easy as
: make LOCALMK=emacs23
(which assumes that there is a customization file =local-emacs23.mk=
available).

* Support for Installers

The Org build system supports staged installs via =DESTDIR=.  If
=DESTDIR= is defined as a non-empty string (it really should be a
leading path and end with a path separator), the actual installation
paths are all prepended by the expansion of =DESTDIR=.  Except for
install and testing, the build does not write outside the build
directory and both of these can be customized to stay within the build
directory also.

* Support for Manual Build

Since GNU make or some programs used by the build system might not be
available on some systems, the core functionality has been implemented
or replicated in Emacs Lisp with no dependencies on external tools.  The
supported functions are: =org-make-autoloads=,
=org-make-autoloads-compile= and =org-make-autoloads-compile-force=.
All other interfaces should be considered private and are subject to
change without notice.  The commands assume that the current working
directory is at the toplevel of the Org build directory (i.e. where
you'll find =default.mk=).

To make the autoloads file:
: emacs -batch -Q -L lisp -l ../UTILITIES/org-fixup -f org-make-autoloads
To make the autoloads file and byte-compile Org:
: emacs -batch -Q -L lisp -l ../UTILITIES/org-fixup -f org-make-autoloads-compile
To make the autoloads file and byte-compile all of Org again:
: emacs -batch -Q -L lisp -l ../UTILITIES/org-fixup -f org-make-autoloads-compile-force

If =git= is also unavailable, fake version strings need to be provided.
: emacs -batch -Q -L lisp -l ../UTILITIES/org-fixup \
: --eval '(let ((org-fake-release "7.8.11")(org-fake-git-version "7.8.11-fake"))\
: (org-make-autoloads))'

The above assumes a POSIX shell for its quoting.  Windows =CMD.exe= has
quite different quoting rules and this won't work, so your other option
is to start Emacs like this
: emacs -Q -L lisp -l ../UTILITIES/org-fixup
then paste the following into the =*scratch*= buffer
#+BEGIN_SRC emacs-lisp
  (let ((org-fake-release     "7.8.11")
        (org-fake-git-version "7.8.11-fake"))
    (org-make-autoloads))
#+END_SRC
