#+OPTIONS:    H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+SEQ_TODO:   TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c) 
#+TITLE:      David Arroyo Menéndez's Worg Page
#+AUTHOR:     David Arroyo Menéndez
#+EMAIL:      
#+LANGUAGE:   es
#+PRIORITIES: A C B
#+CATEGORY:   worg

[[file:../worgers.org][{Volver a Worgers}]]

Mis contribuciones a org-mode han sido:

+ [[file:../org-tutorials/orgtutorial_dto-es.org][Traducción al español del Tutorial de David O'Toole]]
+ [[http://www.davidam.com/docu/orgguide.es.html][Traducción al español de la Guía Compacta de Org-Mode]]

Puedes encontrar más sobre mi en [[http://www.davidam.com][mi web personal]].

También comparto algunas funciones que me ayudan cotidianamente:

#+BEGIN_SRC lisp
(defun davidam-org-envolve-src(msg)
  "Envolve source between org tags"
  (interactive "sChoose your programming language: " msg)
  (if (equal nil msg) 
      (setq msg "lisp"))
  (goto-char (point))
  (insert "\n#+END_SRC")
  (goto-char (mark))
  (insert "#+BEGIN_SRC " msg))

(defun davidam-org-src(msg)
  "Insert org source tags"
  (interactive "sChoose your programming language: " msg)
  (if (equal nil msg) 
      (setq msg "lisp"))
  (insert "#+BEGIN_SRC " msg)
  (insert "\n#+END_SRC\n"))

(defun davidam-num-todo()
  "Print a message with the number of todo tasks in the current buffer"
  (interactive)
  (goto-char (point-min))
  (message "Number of TODO: %d" (count-matches "* TODO"))
  (goto-char (mark)))
									     
(defun davidam-num-done()
  "Print a message with the number of done tasks in the current buffer"
  (interactive)
  (goto-char (point-min))
  (message "Number of DONE: %d" (count-matches "* DONE"))
  (goto-char (mark)))

(defun davidam-num-canceled()
  "Print a message with the number of canceled tasks in the current buffer"
  (interactive)
  (goto-char (point-min))
  (message "Number of Canceled: %d" (count-matches "* CANCELED"))
  (goto-char (mark)))

(defun davidam-effectiveness()
  "Returns the effectiveness in the current org file"
  (interactive)
  (goto-char (point-min))
  (setq done (float (count-matches "* DONE")))
  (setq canc (float (count-matches "* CANCELED")))
  (setq effectiveness (* 100 (/ done (+ done canc))))
  (message "Effectiveness: %f" effectiveness)
  (goto-char (mark)))

(defun davidam-insert-output (command)
   (interactive "sCommand: ")
   (insert (shell-command-to-string command)))

(defun davidam-output-to-buffer (buffer command)
   (interactive "sBuffer name: \nsCommand: ")
   (get-buffer-create buffer)
   (call-process command nil buffer)
   (switch-to-buffer (get-buffer buffer)))

(defun davidam-rsync-rmail ()
  (interactive)
  (get-buffer-create "rsync")
  (call-process "/home/davidam/scripts/rsync-rmail.sh" nil "rsync")
  (switch-to-buffer (get-buffer "rsync")))

#+END_SRC
