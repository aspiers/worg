#+STARTUP:   overview
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t *:t TeX:t
#+EMAIL:     carsten.dominik@gmail.com
#+AUTHOR:    Worg people
#+LANGUAGE:  en
#+TITLE:     Org-mode Frequently Asked Questions
#+INFOJS_OPT: view:info toc:1 path:http://orgmode.org/worg/code/org-info-js/org-info.js tdepth:1 ftoc:t buttons:0 mouse:underline
#+OPTIONS:   H:3 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc

* General
** How do I keep current with Org mode development?
#<<keeping-current-with-Org-mode-development>>

   Org mode is developed in [[http://en.wikipedia.org/wiki/Git_(software)][Git]].  You can keep up-to-date with Org
   mode developement by cloning Org mode repository and refreshing
   your copy with latest changes whenever you wish.  You only need to
   use two Git commands (clone and pull.)  Here are the steps in
   brief (please customize locations to suit your setup):

   1. Select a location to house the Org mode repository (approx. 40
      MB; includes documentation, compiled elisp files and history
      going all the way back to v4.12a)

      : $ mkdir $HOME/elisp && cd $HOME/elisp

   2. Clone the Org mode Git repository.

      Recommended approach:

      : $ git clone git://repo.or.cz/org-mode.git

      Alternate approach if you are behind a firewall that allows only
      HTTP (can be quite slow):

      : $ git clone http://repo.or.cz/r/org-mode.git

   3. Compile and install Org mode and build documentation.

      : $ cd org-mode && make && make doc && make install

      Please note that you can choose to /not/ compile at all and run
      using source =.el= files only.  Compiled files speed things up.

   4. This is where you configure Org mode with Emacs.  Please refer
      to [[./org-tutorials/index.org][Org tutorials]].

   5. Keeping up-to-date.

      Cloning the repository is a one time activity.  From this point
      onwards you only need to /pull/ the latest changes.

      : $ cd $HOME/elisp/org-mode

      and then

      : $ git pull && make clean && make && make doc && make install

   6. You should restart org mode to have the changes take effect (if
      you are not rebooting Emacs.)  Also since the intention is to
      "keep up" with Org mode, you should visit ChangeLog and updated
      sections of documentation for latest updates (use =git log=.)

   7. As you use your repository over time it will accumulate loose objects.
      You can reduce the total size of your git repository with

      : $ git gc

      which will consolidate loose git objects into pack files.  This
      reduces the size of the repository and speeds up data access to
      the objects.

** What is the difference between Org and TaskPaper?
#<<Org-and-TaskPaper>>

  There is really no difference.  Org is as /simple/ as [[http://hogbaysoftware.com/products/taskpaper][TaskPaper]].  It
  is just that, when using Org within Emacs, it lets you do many things
  that you wouldn't be able to do with TaskPaper.  Yes, TaskPaper is
  fiddle-proof and people using Emacs tends to like fiddling (which is
  orthogonal to the idea of using todo-list efficiently), but this is
  just a matter of discipline and common sense, not one of Org's design.

  Read [[http://article.gmane.org/gmane.emacs.orgmode/6224][Carsten's enlightening statement]] on this.
  
** Can I use the editing features of org-mode in other modes?
#<<use-editing-features-in-other-modes>>

   Not really---but there are a few editing features you can use in
   other modes.

   - For tables there is =orgtbl-mode= which implements the table
     editor as a minor mode. (To enable, type =M-x orgtbl-mode=.)
   - For ordered lists there is =orgstuct-mode= which allows for easy
     list editing as a minor mode. (To enable, type =M-x orgstruct-mode=.)
   
   You can activate these modes automatically by using hooks:

   : (add-hook 'mail-mode-hook 'turn-on-orgtbl)
   : (add-hook 'mail-mode-hook 'turn-on-orgstruct)

   For other features you need to switch to Org-mode temporarily, or
   prepare text in a different buffer.

** Can I get the visibility-cycling features in outline-mode and outline-minor-mode?
#<<use-visibility-cycling-in-outline-mode>>

   Yes, these functions are written in a way that they are independent of
   the outline setup.  The following setup provides standard Org-mode
   functionality in outline-mode on =TAB= and =S-TAB=.  For
   outline-minor-mode, we use =C-TAB= instead of =TAB=,
   because =TAB= usually has mode-specific tasks.

#+BEGIN_SRC emacs-lisp
(add-hook 'outline-minor-mode-hook
  (lambda ()
    (define-key outline-minor-mode-map [(control tab)] 'org-cycle)
    (define-key outline-minor-mode-map [(shift tab)] 'org-global-cycle)))
(add-hook 'outline-mode-hook
  (lambda ()
    (define-key outline-mode-map [(tab)] 'org-cycle)
    (define-key outline-mode-map [(shift tab)] 'org-global-cycle)))
#+END_SRC

Or check out /outline-magic.el/, which does this nnd also provides
promotion and demotion functionality.  /outline-magic.el/ is
available at [[http://www.astro.uva.nl/~dominik/Tools/OutlineMagic][Outline Magic]].

** How can I keep track of changes in my Org files?
#<<track-of-changes-in-Org-files>>

  Use git to track the history of the files, use a cronjob to check in
  changes regularly.  Such a setup is described by Bernt Bernt Hansen
  in [[http://article.gmane.org/gmane.emacs.orgmode/6233][this message]] on [[http://dir.gmane.org/gmane.emacs.orgmode][emacs-orgmode]].

** Can I use the remember buffer to clock a customer phone call?
#<<use-remember-buffer-to-clock-phone-call>>

  Yes, you can.  Take a look at the [[http://thread.gmane.org/gmane.emacs.orgmode/5482][setup described by Bernt Hansen]]
  and check out (in the same thread) what Nick Docos had to fix to
  make Bernt's set-up work for him.

** Can I implement a GTD workflow with Org-mode?
#<<GTD-workflow-with-Org-mode>>

  Yes, you can.  Check for discussions and pointers [[http://orgmode.org/worg/org-gtd-etc.php][here]].
  
** How can I cycle through the TODO keyword of an entry?
#<<cycle-TODO-keywords>>

  =C-c C-t= or =S-<left/right>= is what you need.
  
** How can I quickly set the tag of an entry?
#<<quickly-set-tag-of-entry>>

   Use =C-c C-c= on the headline.
   
** Can I select the TODO keywords with a tag-like interface?
#<<select-TODO-keywords-with-tag-like-interface>>

  Yes.  Use =(setq org-use-fast-todo-selection t)=

** Isearch does not find string hidden in links.  What can I do?
#<<isearch-in-links>>

  M-x =visible-mode= will display the full link, making them searchable.

** C-k is killing whole subtrees!  I lost my work!
#<<C-k-is-killing-subtrees>>

  =(setq org-special-ctrl-k t)= before losing your work.

** How can I set up automatic reminders based on Org information?
#<<automatic-reminders>>

  See [[http://article.gmane.org/gmane.emacs.orgmode/5271][this post]] by N. Dokos on the list.

** I want to add my Org scheduled/deadlined entries in my diary!
#<<add-Org-scheduled/deadlined-entries-to-diary!>>

  Put this in your ~/.diary:

  :&%%(org-diary :scheduled :timestamp :deadline)

** How do I track state changes for tasks in Org?
#<<track-state-changes-for-tasks>>

  Take a look at the [[http://thread.gmane.org/gmane.emacs.orgmode/6082][post by Bernt Hansen]] for setting up TODO keyword
  states and logging timestamps for task state changes.

* Errors
** When I try to use Org-mode, I always get the error message =(wrong-type-argument keymapp nil)=
#<<wrong-type-argument-keymapp>>

   This is a conflict with an outdated version of the /allout.el/, see
   the [[http://orgmode.org/manual/Conflicts.html#Conflicts][Conflicts]] section in the manual

** Org-mode takes over the S-cursor keys.  I also want to use CUA-mode, is there a way to fix this conflict?
#<<CUA-mode>>

Yes, see the  [[http://orgmode.org/manual/Conflicts.html#Conflicts][Conflicts]] section of the manual.

** Org-mode takes over the S-cursor keys.  I also want to use windmove.el, is there a way to fix this conflict?
#<<windmove.el>>

Yes, see the [[http://orgmode.org/manual/Conflicts.html#Conflicts][Conflicts]] section of the manual.

** Is there a good way to create a description list?
#<<description-lists>>

  Yes, these are now built-in:

#+BEGIN_EXAMPLE
- item1 :: Description of this item 1
- item2 :: Description of this item 2
- item1 :: Description of this item 3
      also in multiple lines
#+END_EXAMPLE

* Setup and Structure
** Can I use Org-mode as the default mode for all README files?
#<<Org-mode-as-default-mode>>

Add the following to your .emacs file:

: (add-to-list 'auto-mode-alist '("README$" . org-mode))

You can even make it the default mode for any files with unspecified
mode using

: (setq default-major-mode 'org-mode)

** Emacs outlines are unreadable.  Can I get rid of all those stars?
#<<Emacs-outlines-are-unreadable>>

   See the section [[http://orgmode.org/manual/Clean-view.html#Clean-view][Clean outline view]] in the manual.

** Can I have two windows on the same Org-mode file, with different outline visibilities?
#<<indirect-buffers>>

   You may use /indirect buffers/ which do exactly this.  See the
   documentation on the command =make-indirect-buffer=.
   
   Org-mode has built-in commands that allow you create an indirect
   buffer from a subtree of an outline. To open a subtree in new
   window, type =C-c C-x b=. Any changes you make in the new window
   will be saved to the original file, but the visibility of both
   buffers will remain independent of one another.

   For multiple indirect buffers from the same file, you must use the
   prefix =C-u= when creating the second (or third) buffer. Otherwise
   the new indirect buffer will replace the old.

   You can also create an independent view of an outline subtree by
   typing =b= on an item in the agenda.

** How can I insert an empty line before each newly inserted headline, but not before each newly inserted plain-list item?
#<<empty-line-before-each-new-headline-but-not-item>>

: (setq org-blank-before-new-entry
:       '((heading . t) (plain-list-item . nil))

** Can I use ido.el for completing stuff in Org?
#<<ido-complete>>

   Yes, you can.  If you are an ido user and ido-mode is active, the
   following setting will make Org use =ido-completing-read= for most
   of its completing prompts.

: (setq org-completion-use-ido t)

** How can I reduce the amount of context shown in sparse trees?
#<<context-in-sparse-trees>>

   Take a look at the variables =org-show-hierarchy-above= and
   =org-show-following-headline=.

** How can I combine the results of two calls to =org-occur=?
#<<two-calls-to-org-occur>>

   You can construct a regular expression that matches all targets you
   want.  Alternatively, use a =C-u= prefix with the second and any
   further calls to =org-occur= to keep the current visibility and
   highlighting in addition to the new ones.

* Hyperlinks
** Why do I have to confirm the execution of each shell/elisp link?
#<<confirm-shell/elisp-link>>

   The confirmation is there to protect you from unwantingly execute
   potentially dangerous commands.  For example, imagine a link

   :[ [shell:rm -rf ~/*] [ Google Search] ]

   In an Org-mode buffer, this command would look like /Google Search/,
   but really it would remove your home directory.  If you wish, you can
   make it easier to respond to the query by setting

   : (setq org-confirm-shell-link-function 'y-or-n-p
   :       org-confirm-elisp-link-function 'y-or-n-p).

   Then a single keypress will be enough to confirm those links.  It is
   also possible to turn off this check entirely, but I strongly
   recommend against this.  Be warned.

** Can I use RET or TAB to follow a link?
#<<RET-or-TAB-to-follow-link>>

   Yes, this is how:

   : (setq org-return-follows-link t)
   : (setq org-tab-follows-link t)

** Can I keep mouse-1 clicks from following a link?
#<<mouse-1-following-link>>

   Activating links with =mouse-1= is a new feature in Emacs 22, to make
   link behavior similar to other applications like web browsers.  If
   you hold the mouse button down a bit longer, the cursor will be set
   without following the link.  If you cannot get used to this behavior,
   you can (as in Emacs 21) use =mouse-2= to follow links and turn off
   link activation for =mouse-1= with

   : (setq org-mouse-1-follows-link nil)

* Remember
** Can I automatically start the clock when opening a remember template?
#<<start-clock-when-opening-remember-template>>

   Yes, this is possible.  Use the following code and make sure that
   after executing it, `my-start-clock-if-needed' is in
   `remember-mode-hook' /after/ `org-remember-apply-template'.

   : (add-hook 'remember-mode-hook 'my-start-clock-if-needed 'append)
   : (defun my-start-clock-if-needed ()
   :   (save-excursion
   :     (goto-char (point-min))
   :     (when (re-search-forward " *CLOCK-IN *" nil t)
   :       (replace-match "")
   :       (org-clock-in))))

   Then, when a template contains the key string CLOCK-IN, the clock
   will be started.  Starting with Org-mode version 5.20, the clock will
   automatically be stopped when storing the remember buffer.

* Export

** Can I get TODO items exported to HTML as lists, rather than as headlines?
#<<export-TODO-items-as-lists>>

   If you plan to use ASCII or HTML export, make sure things you want to
   be exported as item lists are level 4 at least, even if that does
   mean there is a level jump.  For example:

   : * Todays top priorities
   : **** TODO write a letter to xyz
   : **** TODO Finish the paper
   : **** Pick up kids at the school

   Alternatively, if you need a specific value for the heading/item
   transition in a particular file, use the =#+OPTIONS= line to
   configure the H switch.

   : #+OPTIONS:   H:2; ...

** Can I export only a single subtree?
#<<export-single-subtree>>

   If you want to export a subtree, mark the subtree as region and then
   export.  Marking can be done with =C-c @ C-x C-x=, for example.

** How can I get Mac OSX 10.3 iCal to import my Org-exported .ics files?
#<<iCal-import-ics-files-old>>

   When using iCal under Apple MacOS X Tiger, you can create a new
   calendar /OrgMode/ (the default name for the calendar created by =C-c
   C-e c=, see the variables =org-icalendar-combined-name= and
   =org-combined-agenda-icalendar-file=).  Then set Org-mode to
   overwrite the corresponding file /~/Library/Calendars/OrgMode.ics/.
   You may even use AppleScript to make iCal re-read the calendar files
   each time a new version of /OrgMode.ics/ is produced.  Here is the
   setup needed for this:

   : (setq org-combined-agenda-icalendar-file
   :     "~/Library/Calendars/OrgMode.ics")
   : (add-hook 'org-after-save-iCalendar-file-hook
   :  (lambda ()
   :   (shell-command
   :    "osascript -e 'tell application \"iCal\" to reload calendars'")))


** How can I get Mac OSX 10.4 or later iCal to import my Org-exported .ics files?
#<<iCal-import-ics-files-new>>

   For Mac OS X 10.4, you need to write the ics file to
   =/Library/WebServer/Documents/= and then subscribe iCalendar to
   =http: //localhost/orgmode.ics=

* Tables
** Can I plot data from a table?
#<<plotting-table-data>>

   Yes, you can, using org-plot.el written by James TD Smith and now
   bundled with Org.  See [[http://orgmode.org/manual/Org-Plot.html#Org-Plot][the manual section about this]].

   See also [[file:org-tutorials/org-plot.org][this excellent tutorial]] by Eric Schulte.

** How can I fill a table column with incremental numbers?
#<<fill-table-column-with-incremental-numbers>>

Here is how: Use a field formula to set the first value in the column:

#+begin_src org
,| N   |   |
,|-----+---|
,| :=1 |   |
,|     |   |
,|     |   |
,|     |   |
,#+TBLFM: @2$1=1
#+end_src

Then define a column formula in the second field:

#+begin_src org
,| N        |   |
,|----------+---|
,| 1        |   |
,| =@-1 + 1 |   |
,|          |   |
,|          |   |
,#+TBLFM: @2$1=1
#+end_src

After recomputing the table, the column will be filled with
incremental numbers:

#+begin_src org
,| N |   |
,|---+---|
,| 1 |   |
,| 2 |   |
,| 3 |   |
,| 4 |   |
,#+TBLFM: $1=@-1 + 1::@2$1=1
#+end_src

Note that you could use arbitrary starting values and column formulas.

** Why does my table column get filled with #ERROR?
#<<table-column-filled-with-ERROR>>

   Org-mode tried to compute the column from other fields using a
   formula stored in the =#+TBLFM:= line just below the table, and
   the evaluation of the formula fails.  Fix the fields used in the
   formula, or fix the formula, or remove it!

** How can I stop the table editor from creating new lines?
#<<table-editor-creates-new-lines>>

   When I am in the last column of a table and just above a horizontal
   line in the table, pressing TAB creates a new table line before the
   horizontal line.  To move to the line below the
   horizontal line instead, do this:

   Press =down= (to get on the separator line) and then =TAB=.
   Or configure the variable

   : (setq org-table-tab-jumps-over-hlines t)

** How can I get table fields starting with "="?
#<<table-fields-starting-with-=>>

   With the setting

   : (setq org-table-formula-evaluate-inline nil)

   this will no longer happen.  You can still use formulas using the
   commands @<tt>C-c =@</tt> and @<tt>C-u C-c =@</tt>

** How can I change the indentation of an entire table without fixing every line by hand?
#<<change-indentation-entire-table>>

   The indentation of a table is set by the first line.  So just fix the
   indentation of the first line and realign with =TAB=.

** In my huge table the realigning after each TAB takes too long.  What can I do?
#<<table-realigning-after-TAB-takes-long>>

   Either split the table into several by inserting an empty line every
   100 lines or so.  Or turn off the automatic re-align with

   : (setq org-table-automatic-realign nil)

   After this the only way to realign a table is to press =C-c C-c=.  It
   will no longer happen automatically, removing the corresponding delays
   during editing.

** Recalculation of my table takes too long.  What can I do?
#<<Recalculation-of-my-table-takes-too-long>>

   Nothing, really.  The spreadsheet in org is mostly done to make
   calculations possible, not so much to make them fast.  Since Org-mode
   is firmly committed to the ASCII format, nothing is stopping you from
   editing the table by hand.  Therefore, there is no internal
   representation of the data.  Each time Org-mode starts a computation,
   it must scan the table for special lines, find the fields etc.  This
   is slow.  Furthermore, Calc is slow compared to hardware
   computations.  To make this work with normal editing, recalculation
   is not happening automatically, or only for the current line, so that
   the long wait for a full table iteration only happens when you ask
   for it.

   So for really complex tables, moving to a "real" spreadsheet may
   still be the best option.

   That said, there are some ways to optimize things in Org-mode, and I
   have been thinking about moving a bit further down this line.
   However, for my applications this has so far not been an issue at
   all.  If you have a good case, you could try to convince me.

** =S-RET= in a table keeps increasing the copied numbers.  How can I stop this?
#<<S-RET-in-a-table-increases-copied-numbers>>

   Well, it is /supposed/ to be a feature, to make it easy to create a
   column with increasing numbers.  If this gets into your way, turn it
   off with

   : (setq org-org-table-copy-increment nil)

* Agenda

** Is it possible to include entries from org-mode files into my emacs diary?
#<<include-entries-from-org-mode-files-into-emacs-diary>>

   Since the org-mode agenda is much more powerful and can contain the
   diary, you should think twice before deciding to do this.  If you
   insist, however, integrating Org-mode information into the diary is
   possible.  You need to turn on /fancy diary display/ by setting in
   .emacs:

   : (add-hook 'diary-display-hook 'fancy-diary-display)

   Then include the following line into your ~/diary file, in
   order to get the entries from all files listed in the variable
   =org-agenda-files=

   : &%%(org-diary)

   You may also select specific files with

   : &%%(org-diary) ~/path/to/some/org-file.org
   : &%%(org-diary) ~/path/to/another/org-file.org

   If you now launch the calendar and press @<tt>d@</tt> to display a
   diary, the headlines of entries containing a timestamp, date range,
   schedule, or deadline referring to the selected date will be listed.
   Just like Org-mode's agenda view, the diary for /today/ contains
   additional entries for overdue deadlines and scheduled items.  See
   also the documentation of the =org-diary= function.  Under XEmacs, it
   is not possible to jump back from the diary to the org, this works
   only in the agenda buffer.

** How can I make =appt= notice my Org appointments?
#<<appt-notice-my-Org-appointments>>

  :M-x org-agenda-to-appt RET

** Can I send myself an email containing tasks or other agenda info?
#<<email-containing-tasks-or-other-agenda-info>>

   Yes.  See [[http://article.gmane.org/gmane.emacs.orgmode/6112][this thread]] on the list.

** How can I limit the agenda view to my "work" tasks?
#<<limit-agenda-with-tag-filtering>>

   It is often convenient to group org files into separate categories,
   such as "home" and "work" (or "personal" and "professional"). One
   of the main reasons for such classification is to create agenda
   views that are limited by type of work or area of responsibility.
   For instance, while at work, one may want to see only professional
   tasks; while away from work, one may want to see only personal
   tasks.

   One way to categorize files and tasks is to use a "#+FILETAGS"
   declaration at the top of each file, such as:

   : #+FILETAGS: work

   As long as org-use-tag-inheritance is turned on, the filetags will
   be inherited by all tasks in the file. A file can have multiple
   filetags. And, of course, tags can be added to individual headings.
 
   Tasks can be quickly filtered by tag from within the agenda by
   typing "/" and the name of the tag. The full key sequence to filter
   for work items in an agenda view would be:

   : C-c a a / work [or a tag shortcut]
   
** How can I limit the agenda view to a particular category?
#<<limit-agenda-with-category-match>>
   
   Another way to filter agenda views by type of work is to use a
   "#+CATEGORY" declaration at the top of each file, such as:

   : #+CATEGORY: work

   Categories can also be added to individual headings within a file:

   : * Big project
   :   :PROPERTIES:
   :   :CATEGORY: work
   :   :END:

   All todos belonging to the category "work" can be found a with a
   simple tags-todo search:

   : C-c a M 
   
   At the prompt, type:
   
   : CATEGORY="work"

   The same results can be achieved with custom agenda commands, such as:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("h" tags-todo "CATEGORY=\"home\"")
	("w" tags-todo "CATEGORY=\"work\"")
	;; other custom agenda commands here
	))
#+END_SRC 

* COMMENT HTML style specifications

(defun org-faq-make-target ()
  "Make hard target for current headline."
  (interactive)
  (if (not (org-on-heading-p))
      (error "Not on a headline"))
  (let ((h (org-trim (org-get-heading 'no-tags))))
    (if (string-match "[ \t]*\\?\\'" h)
	(setq h (replace-match "" t t h)))
    (while (string-match "[ \t]+" h)
	(setq h (replace-match "-" t t h)))
    (beginning-of-line 2)
    (insert "#<<" h ">>\n")))


# Local Variables:
# org-export-html-style-extra: "<link rel=stylesheet href=\"org-faq.css\" type=\"text/css\"> <style type=\"text/css\"> </style>"
# End:
